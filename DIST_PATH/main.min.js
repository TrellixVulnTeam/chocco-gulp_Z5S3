/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,(function(e,t){"use strict";var n=[],i=Object.getPrototypeOf,o=n.slice,r=n.flat?function(e){return n.flat.call(e)}:function(e){return n.concat.apply([],e)},a=n.push,s=n.indexOf,l={},c=l.toString,u=l.hasOwnProperty,d=u.toString,p=d.call(Object),f={},h=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},T=e.document,m={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var i,o,r=(n=n||T).createElement("script");if(r.text=e,t)for(i in m)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var S="3.5.1",y=function(e,t){return new y.fn.init(e,t)};function x(e){var t=!!e&&"length"in e&&e.length,n=b(e);return!h(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}y.fn=y.prototype={jquery:S,constructor:y,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=y.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return y.each(this,e)},map:function(e){return this.pushStack(y.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(y.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(y.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:a,sort:n.sort,splice:n.splice},y.extend=y.fn.extend=function(){var e,t,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||h(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(c&&i&&(y.isPlainObject(i)||(o=Array.isArray(i)))?(n=a[t],r=o&&!Array.isArray(n)?[]:o||y.isPlainObject(n)?n:{},o=!1,a[t]=y.extend(c,r,i)):void 0!==i&&(a[t]=i));return a},y.extend({expando:"jQuery"+(S+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=u.call(t,"constructor")&&t.constructor)&&d.call(n)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){v(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(x(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?y.merge(n,"string"==typeof e?[e]:e):a.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:s.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,a=!n;o<r;o++)!t(e[o],o)!==a&&i.push(e[o]);return i},map:function(e,t,n){var i,o,a=0,s=[];if(x(e))for(i=e.length;a<i;a++)null!=(o=t(e[a],a,n))&&s.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&s.push(o);return r(s)},guid:1,support:f}),"function"==typeof Symbol&&(y.fn[Symbol.iterator]=n[Symbol.iterator]),y.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){l["[object "+t+"]"]=t.toLowerCase()}));var P=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,i,o,r,a,s,l,c,u,d,p,f,h,g,T,m,v,b,S="sizzle"+1*new Date,y=e.document,x=0,P=0,A=le(),M=le(),w=le(),C=le(),G=function(e,t){return e===t&&(d=!0),0},E={}.hasOwnProperty,H=[],B=H.pop,D=H.push,I=H.push,k=H.slice,L=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\[[\\x20\\t\\r\\n\\f]*("+R+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+O+"*\\]",W=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",F=new RegExp(O+"+","g"),X=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),j=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),_=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),q=new RegExp(O+"|>"),U=new RegExp(W),K=new RegExp("^"+R+"$"),z={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},$=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},ae=Se((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(H=k.call(y.childNodes),y.childNodes),H[y.childNodes.length].nodeType}catch(e){I={apply:H.length?function(e,t){D.apply(e,k.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,o){var r,s,c,u,d,h,m,v=t&&t.ownerDocument,y=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==y&&9!==y&&11!==y)return i;if(!o&&(p(t),t=t||f,g)){if(11!==y&&(d=J.exec(e)))if(r=d[1]){if(9===y){if(!(c=t.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(v&&(c=v.getElementById(r))&&b(t,c)&&c.id===r)return i.push(c),i}else{if(d[2])return I.apply(i,t.getElementsByTagName(e)),i;if((r=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(i,t.getElementsByClassName(r)),i}if(n.qsa&&!C[e+" "]&&(!T||!T.test(e))&&(1!==y||"object"!==t.nodeName.toLowerCase())){if(m=e,v=t,1===y&&(q.test(e)||_.test(e))){for((v=ee.test(e)&&me(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,oe):t.setAttribute("id",u=S)),s=(h=a(e)).length;s--;)h[s]=(u?"#"+u:":scope")+" "+be(h[s]);m=h.join(",")}try{return I.apply(i,v.querySelectorAll(m)),i}catch(t){C(e,!0)}finally{u===S&&t.removeAttribute("id")}}}return l(e.replace(X,"$1"),t,i,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[S]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function Te(e){return ce((function(t){return t=+t,ce((function(n,i){for(var o,r=e([],n.length,t),a=r.length;a--;)n[o=r[a]]&&(n[o]=!(i[o]=n[o]))}))}))}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},r=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!$.test(t||n&&n.nodeName||"HTML")},p=se.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:y;return a!=f&&9===a.nodeType&&a.documentElement?(h=(f=a).documentElement,g=!r(f),y!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.scope=ue((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Z.test(f.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=S,!f.getElementsByName||!f.getElementsByName(S).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},m=[],T=[],(n.qsa=Z.test(f.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&T.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||T.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+N+")"),e.querySelectorAll("[id~="+S+"-]").length||T.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||T.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||T.push(":checked"),e.querySelectorAll("a#"+S+"+*").length||T.push(".#.+[+~]"),e.querySelectorAll("\\\f"),T.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&T.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&T.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&T.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),T.push(",.*:")}))),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),m.push("!=",W)})),T=T.length&&new RegExp(T.join("|")),m=m.length&&new RegExp(m.join("|")),t=Z.test(h.compareDocumentPosition),b=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==f||e.ownerDocument==y&&b(y,e)?-1:t==f||t.ownerDocument==y&&b(y,t)?1:u?L(u,e)-L(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],s=[t];if(!o||!r)return e==f?-1:t==f?1:o?-1:r?1:u?L(u,e)-L(u,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?pe(a[i],s[i]):a[i]==y?-1:s[i]==y?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&g&&!C[t+" "]&&(!m||!m.test(t))&&(!T||!T.test(t)))try{var i=v.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){C(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var o=i.attrHandle[t.toLowerCase()],r=o&&E.call(i.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==r?r:n.attributes||!g?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(ie,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],o=0,r=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(G),d){for(;t=e[r++];)t===e[r]&&(o=i.push(r));for(;o--;)e.splice(i[o],1)}return u=null,e},o=se.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(i=se.selectors={cacheLength:50,createPseudo:ce,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+O+"|$)"))&&A(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var o=se.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,f,h,g=r!==a?"nextSibling":"previousSibling",T=t.parentNode,m=s&&t.nodeName.toLowerCase(),v=!l&&!s,b=!1;if(T){if(r){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?T.firstChild:T.lastChild],a&&v){for(b=(f=(c=(u=(d=(p=T)[S]||(p[S]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===x&&c[1])&&c[2],p=f&&T.childNodes[f];p=++f&&p&&p[g]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[x,f,b];break}}else if(v&&(b=f=(c=(u=(d=(p=t)[S]||(p[S]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===x&&c[1]),!1===b)for(;(p=++f&&p&&p[g]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++b||(v&&((u=(d=p[S]||(p[S]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,o=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return o[S]?o(t):o.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,r=o(e,t),a=r.length;a--;)e[i=L(e,r[a])]=!(n[i]=r[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],i=s(e.replace(X,"$1"));return i[S]?ce((function(e,t,n,o){for(var r,a=i(e,null,o,[]),s=e.length;s--;)(r=a[s])&&(e[s]=!(t[s]=r))})):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return K.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:Te((function(){return[0]})),last:Te((function(e,t){return[t-1]})),eq:Te((function(e,t,n){return[n<0?n+t:n]})),even:Te((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:Te((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:Te((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:Te((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ve(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function Se(e,t,n){var i=t.dir,o=t.next,r=o||i,a=n&&"parentNode"===r,s=P++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,p=[x,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=(d=t[S]||(t[S]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===x&&c[1]===s)return p[2]=c[2];if(u[r]=p,p[2]=e(t,n,l))return!0}return!1}}function ye(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,o){for(var r,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(r=e[s])&&(n&&!n(r,i,o)||(a.push(r),c&&t.push(s)));return a}function Pe(e,t,n,i,o,r){return i&&!i[S]&&(i=Pe(i)),o&&!o[S]&&(o=Pe(o,r)),ce((function(r,a,s,l){var c,u,d,p=[],f=[],h=a.length,g=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)se(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),T=!e||!r&&t?g:xe(g,p,e,s,l),m=n?o||(r?e:h||i)?[]:a:T;if(n&&n(T,m,s,l),i)for(c=xe(m,f),i(c,[],s,l),u=c.length;u--;)(d=c[u])&&(m[f[u]]=!(T[f[u]]=d));if(r){if(o||e){if(o){for(c=[],u=m.length;u--;)(d=m[u])&&c.push(T[u]=d);o(null,m=[],c,l)}for(u=m.length;u--;)(d=m[u])&&(c=o?L(r,d):p[u])>-1&&(r[c]=!(a[c]=d))}}else m=xe(m===a?m.splice(h,m.length):m),o?o(null,a,m,l):I.apply(a,m)}))}function Ae(e){for(var t,n,o,r=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,u=Se((function(e){return e===t}),s,!0),d=Se((function(e){return L(t,e)>-1}),s,!0),p=[function(e,n,i){var o=!a&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,o}];l<r;l++)if(n=i.relative[e[l].type])p=[Se(ye(p),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[S]){for(o=++l;o<r&&!i.relative[e[o].type];o++);return Pe(l>1&&ye(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(X,"$1"),n,l<o&&Ae(e.slice(l,o)),o<r&&Ae(e=e.slice(o)),o<r&&be(e))}p.push(n)}return ye(p)}return ve.prototype=i.filters=i.pseudos,i.setFilters=new ve,a=se.tokenize=function(e,t){var n,o,r,a,s,l,c,u=M[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=i.preFilter;s;){for(a in n&&!(o=j.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(r=[])),n=!1,(o=_.exec(s))&&(n=o.shift(),r.push({value:n,type:o[0].replace(X," ")}),s=s.slice(n.length)),i.filter)!(o=z[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),r.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):M(e,l).slice(0)},s=se.compile=function(e,t){var n,o=[],r=[],s=w[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Ae(t[n]))[S]?o.push(s):r.push(s);(s=w(e,function(e,t){var n=t.length>0,o=e.length>0,r=function(r,a,s,l,u){var d,h,T,m=0,v="0",b=r&&[],S=[],y=c,P=r||o&&i.find.TAG("*",u),A=x+=null==y?1:Math.random()||.1,M=P.length;for(u&&(c=a==f||a||u);v!==M&&null!=(d=P[v]);v++){if(o&&d){for(h=0,a||d.ownerDocument==f||(p(d),s=!g);T=e[h++];)if(T(d,a||f,s)){l.push(d);break}u&&(x=A)}n&&((d=!T&&d)&&m--,r&&b.push(d))}if(m+=v,n&&v!==m){for(h=0;T=t[h++];)T(b,S,a,s);if(r){if(m>0)for(;v--;)b[v]||S[v]||(S[v]=B.call(l));S=xe(S)}I.apply(l,S),u&&!r&&S.length>0&&m+t.length>1&&se.uniqueSort(l)}return u&&(x=A,c=y),b};return n?ce(r):r}(r,o))).selector=e}return s},l=se.select=function(e,t,n,o){var r,l,c,u,d,p="function"==typeof e&&e,f=!o&&a(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(r=z.needsContext.test(e)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((d=i.find[u])&&(o=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&me(t.parentNode)||t))){if(l.splice(r,1),!(e=o.length&&be(l)))return I.apply(n,o),n;break}}return(p||s(e,f))(o,t,!g,n,!t||ee.test(e)&&me(t.parentNode)||t),n},n.sortStable=S.split("").sort(G).join("")===S,n.detectDuplicates=!!d,p(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(N,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),se}(e);y.find=P,y.expr=P.selectors,y.expr[":"]=y.expr.pseudos,y.uniqueSort=y.unique=P.uniqueSort,y.text=P.getText,y.isXMLDoc=P.isXML,y.contains=P.contains,y.escapeSelector=P.escape;var A=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&y(e).is(n))break;i.push(e)}return i},M=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},w=y.expr.match.needsContext;function C(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var G=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,t,n){return h(t)?y.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?y.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?y.grep(e,(function(e){return s.call(t,e)>-1!==n})):y.filter(t,e,n)}y.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?y.find.matchesSelector(i,e)?[i]:[]:y.find.matches(e,y.grep(t,(function(e){return 1===e.nodeType})))},y.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(y(e).filter((function(){for(t=0;t<i;t++)if(y.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)y.find(e,o[t],n);return i>1?y.uniqueSort(n):n},filter:function(e){return this.pushStack(E(this,e||[],!1))},not:function(e){return this.pushStack(E(this,e||[],!0))},is:function(e){return!!E(this,"string"==typeof e&&w.test(e)?y(e):e||[],!1).length}});var H,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(y.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||H,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:B.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof y?t[0]:t,y.merge(this,y.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),G.test(i[1])&&y.isPlainObject(t))for(i in t)h(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=T.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):h(e)?void 0!==n.ready?n.ready(e):e(y):y.makeArray(e,this)}).prototype=y.fn,H=y(T);var D=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function k(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}y.fn.extend({has:function(e){var t=y(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(y.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,o=this.length,r=[],a="string"!=typeof e&&y(e);if(!w.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&y.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?y.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?s.call(y(e),this[0]):s.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(y.uniqueSort(y.merge(this.get(),y(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),y.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return A(e,"parentNode")},parentsUntil:function(e,t,n){return A(e,"parentNode",n)},next:function(e){return k(e,"nextSibling")},prev:function(e){return k(e,"previousSibling")},nextAll:function(e){return A(e,"nextSibling")},prevAll:function(e){return A(e,"previousSibling")},nextUntil:function(e,t,n){return A(e,"nextSibling",n)},prevUntil:function(e,t,n){return A(e,"previousSibling",n)},siblings:function(e){return M((e.parentNode||{}).firstChild,e)},children:function(e){return M(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(C(e,"template")&&(e=e.content||e),y.merge([],e.childNodes))}},(function(e,t){y.fn[e]=function(n,i){var o=y.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=y.filter(i,o)),this.length>1&&(I[e]||y.uniqueSort(o),D.test(e)&&o.reverse()),this.pushStack(o)}}));var L=/[^\x20\t\r\n\f]+/g;function N(e){return e}function O(e){throw e}function R(e,t,n,i){var o;try{e&&h(o=e.promise)?o.call(e).done(t).fail(n):e&&h(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}y.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return y.each(e.match(L)||[],(function(e,n){t[n]=!0})),t}(e):y.extend({},e);var t,n,i,o,r=[],a=[],s=-1,l=function(){for(o=o||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<r.length;)!1===r[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(s=r.length-1,a.push(n)),function t(n){y.each(n,(function(n,i){h(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==b(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return y.each(arguments,(function(e,t){for(var n;(n=y.inArray(t,r,n))>-1;)r.splice(n,1),n<=s&&s--})),this},has:function(e){return e?y.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=a=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},y.extend({Deferred:function(t){var n=[["notify","progress",y.Callbacks("memory"),y.Callbacks("memory"),2],["resolve","done",y.Callbacks("once memory"),y.Callbacks("once memory"),0,"resolved"],["reject","fail",y.Callbacks("once memory"),y.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return y.Deferred((function(t){y.each(n,(function(n,i){var o=h(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=o&&o.apply(this,arguments);e&&h(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(t,i,o){var r=0;function a(t,n,i,o){return function(){var s=this,l=arguments,c=function(){var e,c;if(!(t<r)){if((e=i.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");c=e&&("object"==typeof e||"function"==typeof e)&&e.then,h(c)?o?c.call(e,a(r,n,N,o),a(r,n,O,o)):(r++,c.call(e,a(r,n,N,o),a(r,n,O,o),a(r,n,N,n.notifyWith))):(i!==N&&(s=void 0,l=[e]),(o||n.resolveWith)(s,l))}},u=o?c:function(){try{c()}catch(e){y.Deferred.exceptionHook&&y.Deferred.exceptionHook(e,u.stackTrace),t+1>=r&&(i!==O&&(s=void 0,l=[e]),n.rejectWith(s,l))}};t?u():(y.Deferred.getStackHook&&(u.stackTrace=y.Deferred.getStackHook()),e.setTimeout(u))}}return y.Deferred((function(e){n[0][3].add(a(0,e,h(o)?o:N,e.notifyWith)),n[1][3].add(a(0,e,h(t)?t:N)),n[2][3].add(a(0,e,h(i)?i:O))})).promise()},promise:function(e){return null!=e?y.extend(e,o):o}},r={};return y.each(n,(function(e,t){var a=t[2],s=t[5];o[t[1]]=a.add,s&&a.add((function(){i=s}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=a.fireWith})),o.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),r=o.call(arguments),a=y.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(i,r)}};if(t<=1&&(R(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||h(r[n]&&r[n].then)))return a.then();for(;n--;)R(r[n],s(n),a.reject);return a.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;y.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&V.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},y.readyException=function(t){e.setTimeout((function(){throw t}))};var W=y.Deferred();function F(){T.removeEventListener("DOMContentLoaded",F),e.removeEventListener("load",F),y.ready()}y.fn.ready=function(e){return W.then(e).catch((function(e){y.readyException(e)})),this},y.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--y.readyWait:y.isReady)||(y.isReady=!0,!0!==e&&--y.readyWait>0||W.resolveWith(T,[y]))}}),y.ready.then=W.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?e.setTimeout(y.ready):(T.addEventListener("DOMContentLoaded",F),e.addEventListener("load",F));var X=function(e,t,n,i,o,r,a){var s=0,l=e.length,c=null==n;if("object"===b(n))for(s in o=!0,n)X(e,t,s,n[s],!0,r,a);else if(void 0!==i&&(o=!0,h(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(y(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):r},j=/^-ms-/,_=/-([a-z])/g;function q(e,t){return t.toUpperCase()}function U(e){return e.replace(j,"ms-").replace(_,q)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function z(){this.expando=y.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[U(t)]=n;else for(i in t)o[U(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in i?[t]:t.match(L)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||y.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!y.isEmptyObject(t)}};var $=new z,Q=new z,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Y.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}y.extend({hasData:function(e){return Q.hasData(e)||$.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return $.access(e,t,n)},_removeData:function(e,t){$.remove(e,t)}}),y.fn.extend({data:function(e,t){var n,i,o,r=this[0],a=r&&r.attributes;if(void 0===e){if(this.length&&(o=Q.get(r),1===r.nodeType&&!$.get(r,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=U(i.slice(5)),J(r,i,o[i]));$.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){Q.set(this,e)})):X(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=Q.get(r,e))||void 0!==(n=J(r,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),y.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=$.get(e,t),n&&(!i||Array.isArray(n)?i=$.access(e,t,y.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=y.queue(e,t),i=n.length,o=n.shift(),r=y._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,(function(){y.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $.get(e,n)||$.access(e,n,{empty:y.Callbacks("once memory").add((function(){$.remove(e,[t+"queue",n])}))})}}),y.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?y.queue(this[0],e):void 0===t?this:this.each((function(){var n=y.queue(this,e,t);y._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&y.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){y.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=y.Deferred(),r=this,a=this.length,s=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=$.get(r[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),o.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=T.documentElement,oe=function(e){return y.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(oe=function(e){return y.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===y.css(e,"display")};function se(e,t,n,i){var o,r,a=20,s=i?function(){return i.cur()}:function(){return y.css(e,t,"")},l=s(),c=n&&n[3]||(y.cssNumber[t]?"":"px"),u=e.nodeType&&(y.cssNumber[t]||"px"!==c&&+l)&&te.exec(y.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)y.style(e,t,u+c),(1-r)*(1-(r=s()/l||.5))<=0&&(a=0),u/=r;u*=2,y.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var le={};function ce(e){var t,n=e.ownerDocument,i=e.nodeName,o=le[i];return o||(t=n.body.appendChild(n.createElement(i)),o=y.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),le[i]=o,o)}function ue(e,t){for(var n,i,o=[],r=0,a=e.length;r<a;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(o[r]=$.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&ae(i)&&(o[r]=ce(i))):"none"!==n&&(o[r]="none",$.set(i,"display",n)));for(r=0;r<a;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}y.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ae(this)?y(this).show():y(this).hide()}))}});var de,pe,fe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i;de=T.createDocumentFragment().appendChild(T.createElement("div")),(pe=T.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),de.appendChild(pe),f.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",f.option=!!de.lastChild;var Te={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&C(e,t)?y.merge([e],n):n}function ve(e,t){for(var n=0,i=e.length;n<i;n++)$.set(e[n],"globalEval",!t||$.get(t[n],"globalEval"))}Te.tbody=Te.tfoot=Te.colgroup=Te.caption=Te.thead,Te.th=Te.td,f.option||(Te.optgroup=Te.option=[1,"<select multiple='multiple'>","</select>"]);var be=/<|&#?\w+;/;function Se(e,t,n,i,o){for(var r,a,s,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===b(r))y.merge(p,r.nodeType?[r]:r);else if(be.test(r)){for(a=a||d.appendChild(t.createElement("div")),s=(he.exec(r)||["",""])[1].toLowerCase(),l=Te[s]||Te._default,a.innerHTML=l[1]+y.htmlPrefilter(r)+l[2],u=l[0];u--;)a=a.lastChild;y.merge(p,a.childNodes),(a=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(i&&y.inArray(r,i)>-1)o&&o.push(r);else if(c=oe(r),a=me(d.appendChild(r),"script"),c&&ve(a),n)for(u=0;r=a[u++];)ge.test(r.type||"")&&n.push(r);return d}var ye=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Pe=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Me(){return!1}function we(e,t){return e===function(){try{return T.activeElement}catch(e){}}()==("focus"===t)}function Ce(e,t,n,i,o,r){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Ce(e,s,n,i,t[s],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Me;else if(!o)return e;return 1===r&&(a=o,(o=function(e){return y().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=y.guid++)),e.each((function(){y.event.add(this,t,o,i,n)}))}function Ge(e,t,n){n?($.set(e,t,!1),y.event.add(e,t,{namespace:!1,handler:function(e){var i,r,a=$.get(this,t);if(1&e.isTrigger&&this[t]){if(a.length)(y.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=o.call(arguments),$.set(this,t,a),i=n(this,t),this[t](),a!==(r=$.get(this,t))||i?$.set(this,t,!1):r={},a!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else a.length&&($.set(this,t,{value:y.event.trigger(y.extend(a[0],y.Event.prototype),a.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===$.get(e,t)&&y.event.add(e,t,Ae)}y.event={global:{},add:function(e,t,n,i,o){var r,a,s,l,c,u,d,p,f,h,g,T=$.get(e);if(K(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&y.find.matchesSelector(ie,o),n.guid||(n.guid=y.guid++),(l=T.events)||(l=T.events=Object.create(null)),(a=T.handle)||(a=T.handle=function(t){return void 0!==y&&y.event.triggered!==t.type?y.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(L)||[""]).length;c--;)f=g=(s=Pe.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f&&(d=y.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=y.event.special[f]||{},u=y.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&y.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),y.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,a,s,l,c,u,d,p,f,h,g,T=$.hasData(e)&&$.get(e);if(T&&(l=T.events)){for(c=(t=(t||"").match(L)||[""]).length;c--;)if(f=g=(s=Pe.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f){for(d=y.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=p.length;r--;)u=p[r],!o&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));a&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,T.handle)||y.removeEvent(e,f,T.handle),delete l[f])}else for(f in l)y.event.remove(e,f+t[c],n,i,!0);y.isEmptyObject(l)&&$.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,a,s=new Array(arguments.length),l=y.event.fix(e),c=($.get(this,"events")||Object.create(null))[l.type]||[],u=y.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=y.event.handlers.call(this,l,c),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((y.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],a={},n=0;n<l;n++)void 0===a[o=(i=t[n]).selector+" "]&&(a[o]=i.needsContext?y(o,this).index(c)>-1:y.find(o,this,null,[c]).length),a[o]&&r.push(i);r.length&&s.push({elem:c,handlers:r})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(y.Event.prototype,e,{enumerable:!0,configurable:!0,get:h(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[y.expando]?e:new y.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&C(t,"input")&&Ge(t,"click",Ae),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&C(t,"input")&&Ge(t,"click"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&C(t,"input")&&$.get(t,"click")||C(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},y.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},y.Event=function(e,t){if(!(this instanceof y.Event))return new y.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Me,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&y.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[y.expando]=!0},y.Event.prototype={constructor:y.Event,isDefaultPrevented:Me,isPropagationStopped:Me,isImmediatePropagationStopped:Me,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},y.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},y.event.addProp),y.each({focus:"focusin",blur:"focusout"},(function(e,t){y.event.special[e]={setup:function(){return Ge(this,e,we),!1},trigger:function(){return Ge(this,e),!0},delegateType:t}})),y.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){y.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||y.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),y.fn.extend({on:function(e,t,n,i){return Ce(this,e,t,n,i)},one:function(e,t,n,i){return Ce(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,y(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Me),this.each((function(){y.event.remove(this,e,n,t)}))}});var Ee=/<script|<style|<link/i,He=/checked\s*(?:[^=]|=\s*.checked.)/i,Be=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return C(e,"table")&&C(11!==t.nodeType?t:t.firstChild,"tr")&&y(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ke(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,i,o,r,a,s;if(1===t.nodeType){if($.hasData(e)&&(s=$.get(e).events))for(o in $.remove(t,"handle events"),s)for(n=0,i=s[o].length;n<i;n++)y.event.add(t,o,s[o][n]);Q.hasData(e)&&(r=Q.access(e),a=y.extend({},r),Q.set(t,a))}}function Ne(e,t){var n=t.nodeName.toLowerCase();"input"===n&&fe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Oe(e,t,n,i){t=r(t);var o,a,s,l,c,u,d=0,p=e.length,g=p-1,T=t[0],m=h(T);if(m||p>1&&"string"==typeof T&&!f.checkClone&&He.test(T))return e.each((function(o){var r=e.eq(o);m&&(t[0]=T.call(this,o,r.html())),Oe(r,t,n,i)}));if(p&&(a=(o=Se(t,e[0].ownerDocument,!1,e,i)).firstChild,1===o.childNodes.length&&(o=a),a||i)){for(l=(s=y.map(me(o,"script"),Ie)).length;d<p;d++)c=o,d!==g&&(c=y.clone(c,!0,!0),l&&y.merge(s,me(c,"script"))),n.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,y.map(s,ke),d=0;d<l;d++)c=s[d],ge.test(c.type||"")&&!$.access(c,"globalEval")&&y.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?y._evalUrl&&!c.noModule&&y._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):v(c.textContent.replace(Be,""),c,u))}return e}function Re(e,t,n){for(var i,o=t?y.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||y.cleanData(me(i)),i.parentNode&&(n&&oe(i)&&ve(me(i,"script")),i.parentNode.removeChild(i));return e}y.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,a,s=e.cloneNode(!0),l=oe(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||y.isXMLDoc(e)))for(a=me(s),i=0,o=(r=me(e)).length;i<o;i++)Ne(r[i],a[i]);if(t)if(n)for(r=r||me(e),a=a||me(s),i=0,o=r.length;i<o;i++)Le(r[i],a[i]);else Le(e,s);return(a=me(s,"script")).length>0&&ve(a,!l&&me(e,"script")),s},cleanData:function(e){for(var t,n,i,o=y.event.special,r=0;void 0!==(n=e[r]);r++)if(K(n)){if(t=n[$.expando]){if(t.events)for(i in t.events)o[i]?y.event.remove(n,i):y.removeEvent(n,i,t.handle);n[$.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),y.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return X(this,(function(e){return void 0===e?y.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Oe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)}))},prepend:function(){return Oe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Oe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Oe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(y.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return y.clone(this,e,t)}))},html:function(e){return X(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ee.test(e)&&!Te[(he.exec(e)||["",""])[1].toLowerCase()]){e=y.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(y.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Oe(this,arguments,(function(t){var n=this.parentNode;y.inArray(this,e)<0&&(y.cleanData(me(this)),n&&n.replaceChild(t,this))}),e)}}),y.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){y.fn[e]=function(e){for(var n,i=[],o=y(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),y(o[s])[t](n),a.apply(i,n.get());return this.pushStack(i)}}));var Ve=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),We=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Fe=function(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i},Xe=new RegExp(ne.join("|"),"i");function je(e,t,n){var i,o,r,a,s=e.style;return(n=n||We(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=y.style(e,t)),!f.pixelBoxStyles()&&Ve.test(a)&&Xe.test(t)&&(i=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=o,s.maxWidth=r)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(c).appendChild(u);var t=e.getComputedStyle(u);i="1%"!==t.top,l=12===n(t.marginLeft),u.style.right="60%",a=36===n(t.right),o=36===n(t.width),u.style.position="absolute",r=12===n(u.offsetWidth/3),ie.removeChild(c),u=null}}function n(e){return Math.round(parseFloat(e))}var i,o,r,a,s,l,c=T.createElement("div"),u=T.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===u.style.backgroundClip,y.extend(f,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),r},reliableTrDimensions:function(){var t,n,i,o;return null==s&&(t=T.createElement("table"),n=T.createElement("tr"),i=T.createElement("div"),t.style.cssText="position:absolute;left:-11111px",n.style.height="1px",i.style.height="9px",ie.appendChild(t).appendChild(n).appendChild(i),o=e.getComputedStyle(n),s=parseInt(o.height)>3,ie.removeChild(t)),s}}))}();var qe=["Webkit","Moz","ms"],Ue=T.createElement("div").style,Ke={};function ze(e){var t=y.cssProps[e]||Ke[e];return t||(e in Ue?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=qe.length;n--;)if((e=qe[n]+t)in Ue)return e}(e)||e)}var $e=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ye={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function Je(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function et(e,t,n,i,o,r){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=y.css(e,n+ne[a],!0,o)),i?("content"===n&&(l-=y.css(e,"padding"+ne[a],!0,o)),"margin"!==n&&(l-=y.css(e,"border"+ne[a]+"Width",!0,o))):(l+=y.css(e,"padding"+ne[a],!0,o),"padding"!==n?l+=y.css(e,"border"+ne[a]+"Width",!0,o):s+=y.css(e,"border"+ne[a]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-s-.5))||0),l}function tt(e,t,n){var i=We(e),o=(!f.boxSizingReliable()||n)&&"border-box"===y.css(e,"boxSizing",!1,i),r=o,a=je(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ve.test(a)){if(!n)return a;a="auto"}return(!f.boxSizingReliable()&&o||!f.reliableTrDimensions()&&C(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===y.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===y.css(e,"boxSizing",!1,i),(r=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(o?"border":"content"),r,i,a)+"px"}function nt(e,t,n,i,o){return new nt.prototype.init(e,t,n,i,o)}y.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=je(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,a,s=U(t),l=Qe.test(t),c=e.style;if(l||(t=ze(s)),a=y.cssHooks[t]||y.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,i))?o:c[t];"string"===(r=typeof n)&&(o=te.exec(n))&&o[1]&&(n=se(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(y.cssNumber[s]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,a,s=U(t);return Qe.test(t)||(t=ze(s)),(a=y.cssHooks[t]||y.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=je(e,t,i)),"normal"===o&&t in Ze&&(o=Ze[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),y.each(["height","width"],(function(e,t){y.cssHooks[t]={get:function(e,n,i){if(n)return!$e.test(y.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,t,i):Fe(e,Ye,(function(){return tt(e,t,i)}))},set:function(e,n,i){var o,r=We(e),a=!f.scrollboxSize()&&"absolute"===r.position,s=(a||i)&&"border-box"===y.css(e,"boxSizing",!1,r),l=i?et(e,t,i,s,r):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-et(e,t,"border",!1,r)-.5)),l&&(o=te.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=y.css(e,t)),Je(0,n,l)}}})),y.cssHooks.marginLeft=_e(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(je(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),y.each({margin:"",padding:"",border:"Width"},(function(e,t){y.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+ne[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(y.cssHooks[e+t].set=Je)})),y.fn.extend({css:function(e,t){return X(this,(function(e,t,n){var i,o,r={},a=0;if(Array.isArray(t)){for(i=We(e),o=t.length;a<o;a++)r[t[a]]=y.css(e,t[a],!1,i);return r}return void 0!==n?y.style(e,t,n):y.css(e,t)}),e,t,arguments.length>1)}}),y.Tween=nt,nt.prototype={constructor:nt,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||y.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(y.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=y.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}},nt.prototype.init.prototype=nt.prototype,nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=y.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){y.fx.step[e.prop]?y.fx.step[e.prop](e):1!==e.elem.nodeType||!y.cssHooks[e.prop]&&null==e.elem.style[ze(e.prop)]?e.elem[e.prop]=e.now:y.style(e.elem,e.prop,e.now+e.unit)}}},nt.propHooks.scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},y.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},y.fx=nt.prototype.init,y.fx.step={};var it,ot,rt=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function st(){ot&&(!1===T.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(st):e.setTimeout(st,y.fx.interval),y.fx.tick())}function lt(){return e.setTimeout((function(){it=void 0})),it=Date.now()}function ct(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=ne[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ut(e,t,n){for(var i,o=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,t,e))return i}function dt(e,t,n){var i,o,r=0,a=dt.prefilters.length,s=y.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=it||lt(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,a=c.tweens.length;r<a;r++)c.tweens[r].run(i);return s.notifyWith(e,[c,i,n]),i<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:y.extend({},t),opts:y.extend(!0,{specialEasing:{},easing:y.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=y.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,a;for(n in e)if(o=t[i=U(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(a=y.cssHooks[i])&&"expand"in a)for(n in r=a.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);r<a;r++)if(i=dt.prefilters[r].call(c,e,u,c.opts))return h(i.stop)&&(y._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return y.map(u,ut,c),h(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),y.fx.timer(y.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}y.Animation=y.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){h(e)?(t=e,e=["*"]):e=e.match(L);for(var n,i=0,o=e.length;i<o;i++)n=e[i],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,a,s,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&ae(e),T=$.get(e,"fxshow");for(i in n.queue||(null==(a=y._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always((function(){p.always((function(){a.unqueued--,y.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[i],rt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!T||void 0===T[i])continue;g=!0}f[i]=T&&T[i]||y.style(e,i)}if((l=!y.isEmptyObject(t))||!y.isEmptyObject(f))for(i in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=T&&T.display)&&(c=$.get(e,"display")),"none"===(u=y.css(e,"display"))&&(c?u=c:(ue([e],!0),c=e.style.display||c,u=y.css(e,"display"),ue([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===y.css(e,"float")&&(l||(p.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(T?"hidden"in T&&(g=T.hidden):T=$.access(e,"fxshow",{display:c}),r&&(T.hidden=!g),g&&ue([e],!0),p.done((function(){for(i in g||ue([e]),$.remove(e,"fxshow"),f)y.style(e,i,f[i])}))),l=ut(g?T[i]:0,i,p),i in T||(T[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),y.speed=function(e,t,n){var i=e&&"object"==typeof e?y.extend({},e):{complete:n||!n&&t||h(e)&&e,duration:e,easing:n&&t||t&&!h(t)&&t};return y.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in y.fx.speeds?i.duration=y.fx.speeds[i.duration]:i.duration=y.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){h(i.old)&&i.old.call(this),i.queue&&y.dequeue(this,i.queue)},i},y.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=y.isEmptyObject(e),r=y.speed(t,n,i),a=function(){var t=dt(this,y.extend({},e),r);(o||$.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===r.queue?this.each(a):this.queue(r.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",r=y.timers,a=$.get(this);if(o)a[o]&&a[o].stop&&i(a[o]);else for(o in a)a[o]&&a[o].stop&&at.test(o)&&i(a[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||y.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=$.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=y.timers,a=i?i.length:0;for(n.finish=!0,y.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),y.each(["toggle","show","hide"],(function(e,t){var n=y.fn[t];y.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,i,o)}})),y.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){y.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),y.timers=[],y.fx.tick=function(){var e,t=0,n=y.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||y.fx.stop(),it=void 0},y.fx.timer=function(e){y.timers.push(e),y.fx.start()},y.fx.interval=13,y.fx.start=function(){ot||(ot=!0,st())},y.fx.stop=function(){ot=null},y.fx.speeds={slow:600,fast:200,_default:400},y.fn.delay=function(t,n){return t=y.fx&&y.fx.speeds[t]||t,n=n||"fx",this.queue(n,(function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}}))},function(){var e=T.createElement("input"),t=T.createElement("select").appendChild(T.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=t.selected,(e=T.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var pt,ft=y.expr.attrHandle;y.fn.extend({attr:function(e,t){return X(this,y.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){y.removeAttr(this,e)}))}}),y.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?y.prop(e,t,n):(1===r&&y.isXMLDoc(e)||(o=y.attrHooks[t.toLowerCase()]||(y.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void y.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=y.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&C(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(L);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?y.removeAttr(e,n):e.setAttribute(n,n),n}},y.each(y.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ft[t]||y.find.attr;ft[t]=function(e,t,i){var o,r,a=t.toLowerCase();return i||(r=ft[a],ft[a]=o,o=null!=n(e,t,i)?a:null,ft[a]=r),o}}));var ht=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function Tt(e){return(e.match(L)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(L)||[]}y.fn.extend({prop:function(e,t){return X(this,y.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[y.propFix[e]||e]}))}}),y.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&y.isXMLDoc(e)||(t=y.propFix[t]||t,o=y.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=y.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(y.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),y.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){y.propFix[this.toLowerCase()]=this})),y.fn.extend({addClass:function(e){var t,n,i,o,r,a,s,l=0;if(h(e))return this.each((function(t){y(this).addClass(e.call(this,t,mt(this)))}));if((t=vt(e)).length)for(;n=this[l++];)if(o=mt(n),i=1===n.nodeType&&" "+Tt(o)+" "){for(a=0;r=t[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(s=Tt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,o,r,a,s,l=0;if(h(e))return this.each((function(t){y(this).removeClass(e.call(this,t,mt(this)))}));if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[l++];)if(o=mt(n),i=1===n.nodeType&&" "+Tt(o)+" "){for(a=0;r=t[a++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(s=Tt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):h(e)?this.each((function(n){y(this).toggleClass(e.call(this,n,mt(this),t),t)})):this.each((function(){var t,o,r,a;if(i)for(o=0,r=y(this),a=vt(e);t=a[o++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&$.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":$.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Tt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;y.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=h(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,y(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=y.map(o,(function(e){return null==e?"":e+""}))),(t=y.valHooks[this.type]||y.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=y.valHooks[o.type]||y.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(bt,""):null==n?"":n:void 0}}),y.extend({valHooks:{option:{get:function(e){var t=y.find.attr(e,"value");return null!=t?t:Tt(y.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?r+1:o.length;for(i=r<0?l:a?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!C(n.parentNode,"optgroup"))){if(t=y(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,o=e.options,r=y.makeArray(t),a=o.length;a--;)((i=o[a]).selected=y.inArray(y.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),y.each(["radio","checkbox"],(function(){y.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=y.inArray(y(e).val(),t)>-1}},f.checkOn||(y.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in e;var St=/^(?:focusinfocus|focusoutblur)$/,yt=function(e){e.stopPropagation()};y.extend(y.event,{trigger:function(t,n,i,o){var r,a,s,l,c,d,p,f,m=[i||T],v=u.call(t,"type")?t.type:t,b=u.call(t,"namespace")?t.namespace.split("."):[];if(a=f=s=i=i||T,3!==i.nodeType&&8!==i.nodeType&&!St.test(v+y.event.triggered)&&(v.indexOf(".")>-1&&(b=v.split("."),v=b.shift(),b.sort()),c=v.indexOf(":")<0&&"on"+v,(t=t[y.expando]?t:new y.Event(v,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=b.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:y.makeArray(n,[t]),p=y.event.special[v]||{},o||!p.trigger||!1!==p.trigger.apply(i,n))){if(!o&&!p.noBubble&&!g(i)){for(l=p.delegateType||v,St.test(l+v)||(a=a.parentNode);a;a=a.parentNode)m.push(a),s=a;s===(i.ownerDocument||T)&&m.push(s.defaultView||s.parentWindow||e)}for(r=0;(a=m[r++])&&!t.isPropagationStopped();)f=a,t.type=r>1?l:p.bindType||v,(d=($.get(a,"events")||Object.create(null))[t.type]&&$.get(a,"handle"))&&d.apply(a,n),(d=c&&a[c])&&d.apply&&K(a)&&(t.result=d.apply(a,n),!1===t.result&&t.preventDefault());return t.type=v,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),n)||!K(i)||c&&h(i[v])&&!g(i)&&((s=i[c])&&(i[c]=null),y.event.triggered=v,t.isPropagationStopped()&&f.addEventListener(v,yt),i[v](),t.isPropagationStopped()&&f.removeEventListener(v,yt),y.event.triggered=void 0,s&&(i[c]=s)),t.result}},simulate:function(e,t,n){var i=y.extend(new y.Event,n,{type:e,isSimulated:!0});y.event.trigger(i,null,t)}}),y.fn.extend({trigger:function(e,t){return this.each((function(){y.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return y.event.trigger(e,t,n,!0)}}),f.focusin||y.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){y.event.simulate(t,e.target,y.event.fix(e))};y.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,o=$.access(i,t);o||i.addEventListener(e,n,!0),$.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=$.access(i,t)-1;o?$.access(i,t,o):(i.removeEventListener(e,n,!0),$.remove(i,t))}}}));var xt=e.location,Pt={guid:Date.now()},At=/\?/;y.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||y.error("Invalid XML: "+t),n};var Mt=/\[\]$/,wt=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,Gt=/^(?:input|select|textarea|keygen)/i;function Et(e,t,n,i){var o;if(Array.isArray(t))y.each(t,(function(t,o){n||Mt.test(e)?i(e,o):Et(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)}));else if(n||"object"!==b(t))i(e,t);else for(o in t)Et(e+"["+o+"]",t[o],n,i)}y.param=function(e,t){var n,i=[],o=function(e,t){var n=h(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!y.isPlainObject(e))y.each(e,(function(){o(this.name,this.value)}));else for(n in e)Et(n,e[n],t,o);return i.join("&")},y.fn.extend({serialize:function(){return y.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=y.prop(this,"elements");return e?y.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!y(this).is(":disabled")&&Gt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!fe.test(e))})).map((function(e,t){var n=y(this).val();return null==n?null:Array.isArray(n)?y.map(n,(function(e){return{name:t.name,value:e.replace(wt,"\r\n")}})):{name:t.name,value:n.replace(wt,"\r\n")}})).get()}});var Ht=/%20/g,Bt=/#.*$/,Dt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,kt=/^(?:GET|HEAD)$/,Lt=/^\/\//,Nt={},Ot={},Rt="*/".concat("*"),Vt=T.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(L)||[];if(h(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ft(e,t,n,i){var o={},r=e===Ot;function a(s){var l;return o[s]=!0,y.each(e[s]||[],(function(e,s){var c=s(t,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Xt(e,t){var n,i,o=y.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&y.extend(!0,e,i),e}Vt.href=xt.href,y.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":y.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Xt(Xt(e,y.ajaxSettings),t):Xt(y.ajaxSettings,e)},ajaxPrefilter:Wt(Nt),ajaxTransport:Wt(Ot),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,r,a,s,l,c,u,d,p,f=y.ajaxSetup({},n),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?y(h):y.event,m=y.Deferred(),v=y.Callbacks("once memory"),b=f.statusCode||{},S={},x={},P="canceled",A={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=It.exec(r);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,S[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)A.always(e[A.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||P;return i&&i.abort(t),M(0,t),this}};if(m.promise(A),f.url=((t||f.url||xt.href)+"").replace(Lt,xt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(L)||[""],null==f.crossDomain){l=T.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=y.param(f.data,f.traditional)),Ft(Nt,f,n,A),c)return A;for(d in(u=y.event&&f.global)&&0==y.active++&&y.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!kt.test(f.type),o=f.url.replace(Bt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ht,"+")):(p=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(At.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Dt,"$1"),p=(At.test(o)?"&":"?")+"_="+Pt.guid+++p),f.url=o+p),f.ifModified&&(y.lastModified[o]&&A.setRequestHeader("If-Modified-Since",y.lastModified[o]),y.etag[o]&&A.setRequestHeader("If-None-Match",y.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&A.setRequestHeader("Content-Type",f.contentType),A.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Rt+"; q=0.01":""):f.accepts["*"]),f.headers)A.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,A,f)||c))return A.abort();if(P="abort",v.add(f.complete),A.done(f.success),A.fail(f.error),i=Ft(Ot,f,n,A)){if(A.readyState=1,u&&g.trigger("ajaxSend",[A,f]),c)return A;f.async&&f.timeout>0&&(s=e.setTimeout((function(){A.abort("timeout")}),f.timeout));try{c=!1,i.send(S,M)}catch(e){if(c)throw e;M(-1,e)}}else M(-1,"No Transport");function M(t,n,a,l){var d,p,T,S,x,P=n;c||(c=!0,s&&e.clearTimeout(s),i=void 0,r=l||"",A.readyState=t>0?4:0,d=t>=200&&t<300||304===t,a&&(S=function(e,t,n){for(var i,o,r,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}a||(a=o)}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,A,a)),!d&&y.inArray("script",f.dataTypes)>-1&&(f.converters["text script"]=function(){}),S=function(e,t,n,i){var o,r,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=c[l+" "+r]||c["* "+r]))for(o in c)if((s=o.split(" "))[1]===r&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(r=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(f,S,A,d),d?(f.ifModified&&((x=A.getResponseHeader("Last-Modified"))&&(y.lastModified[o]=x),(x=A.getResponseHeader("etag"))&&(y.etag[o]=x)),204===t||"HEAD"===f.type?P="nocontent":304===t?P="notmodified":(P=S.state,p=S.data,d=!(T=S.error))):(T=P,!t&&P||(P="error",t<0&&(t=0))),A.status=t,A.statusText=(n||P)+"",d?m.resolveWith(h,[p,P,A]):m.rejectWith(h,[A,P,T]),A.statusCode(b),b=void 0,u&&g.trigger(d?"ajaxSuccess":"ajaxError",[A,f,d?p:T]),v.fireWith(h,[A,P]),u&&(g.trigger("ajaxComplete",[A,f]),--y.active||y.event.trigger("ajaxStop")))}return A},getJSON:function(e,t,n){return y.get(e,t,n,"json")},getScript:function(e,t){return y.get(e,void 0,t,"script")}}),y.each(["get","post"],(function(e,t){y[t]=function(e,n,i,o){return h(n)&&(o=o||i,i=n,n=void 0),y.ajax(y.extend({url:e,type:t,dataType:o,data:n,success:i},y.isPlainObject(e)&&e))}})),y.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),y._evalUrl=function(e,t,n){return y.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){y.globalEval(e,t,n)}})},y.fn.extend({wrapAll:function(e){var t;return this[0]&&(h(e)&&(e=e.call(this[0])),t=y(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return h(e)?this.each((function(t){y(this).wrapInner(e.call(this,t))})):this.each((function(){var t=y(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=h(e);return this.each((function(n){y(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){y(this).replaceWith(this.childNodes)})),this}}),y.expr.pseudos.hidden=function(e){return!y.expr.pseudos.visible(e)},y.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},y.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var jt={0:200,1223:204},_t=y.ajaxSettings.xhr();f.cors=!!_t&&"withCredentials"in _t,f.ajax=_t=!!_t,y.ajaxTransport((function(t){var n,i;if(f.cors||_t&&!t.crossDomain)return{send:function(o,r){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r(jt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout((function(){n&&i()}))},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}})),y.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),y.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return y.globalEval(e),e}}}),y.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),y.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=y("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),T.head.appendChild(t[0])},abort:function(){n&&n()}}}));var qt=[],Ut=/(=)\?(?=&|$)|\?\?/;y.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||y.expando+"_"+Pt.guid++;return this[e]=!0,e}}),y.ajaxPrefilter("json jsonp",(function(t,n,i){var o,r,a,s=!1!==t.jsonp&&(Ut.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ut.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=h(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Ut,"$1"+o):!1!==t.jsonp&&(t.url+=(At.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||y.error(o+" was not called"),a[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){a=arguments},i.always((function(){void 0===r?y(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,qt.push(o)),a&&h(r)&&r(a[0]),a=r=void 0})),"script"})),f.createHTMLDocument=function(){var e=T.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),y.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(f.createHTMLDocument?((i=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(i)):t=T),r=!n&&[],(o=G.exec(e))?[t.createElement(o[1])]:(o=Se([e],t,r),r&&r.length&&y(r).remove(),y.merge([],o.childNodes)));var i,o,r},y.fn.load=function(e,t,n){var i,o,r,a=this,s=e.indexOf(" ");return s>-1&&(i=Tt(e.slice(s)),e=e.slice(0,s)),h(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&y.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){r=arguments,a.html(i?y("<div>").append(y.parseHTML(e)).find(i):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},y.expr.pseudos.animated=function(e){return y.grep(y.timers,(function(t){return e===t.elem})).length},y.offset={setOffset:function(e,t,n){var i,o,r,a,s,l,c=y.css(e,"position"),u=y(e),d={};"static"===c&&(e.style.position="relative"),s=u.offset(),r=y.css(e,"top"),l=y.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(a=(i=u.position()).top,o=i.left):(a=parseFloat(r)||0,o=parseFloat(l)||0),h(t)&&(t=t.call(e,n,y.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+o),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},y.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){y.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===y.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===y.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=y(e).offset()).top+=y.css(e,"borderTopWidth",!0),o.left+=y.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-y.css(i,"marginTop",!0),left:t.left-o.left-y.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===y.css(e,"position");)e=e.offsetParent;return e||ie}))}}),y.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;y.fn[e]=function(i){return X(this,(function(e,i,o){var r;if(g(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o}),e,i,arguments.length)}})),y.each(["top","left"],(function(e,t){y.cssHooks[t]=_e(f.pixelPosition,(function(e,n){if(n)return n=je(e,t),Ve.test(n)?y(e).position()[t]+"px":n}))})),y.each({Height:"height",Width:"width"},(function(e,t){y.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){y.fn[i]=function(o,r){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===r?"margin":"border");return X(this,(function(t,n,o){var r;return g(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?y.css(t,n,s):y.style(t,n,o,s)}),t,a?o:void 0,a)}}))})),y.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){y.fn[t]=function(e){return this.on(t,e)}})),y.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),y.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){y.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;y.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),h(e))return i=o.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||y.guid++,r},y.holdReady=function(e){e?y.readyWait++:y.ready(!0)},y.isArray=Array.isArray,y.parseJSON=JSON.parse,y.nodeName=C,y.isFunction=h,y.isWindow=g,y.camelCase=U,y.type=b,y.now=Date.now,y.isNumeric=function(e){var t=y.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},y.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return y}));var zt=e.jQuery,$t=e.$;return y.noConflict=function(t){return e.$===y&&(e.$=$t),t&&e.jQuery===y&&(e.jQuery=zt),y},void 0===t&&(e.jQuery=e.$=y),y})),
/*!mobile-detect v1.4.4 2019-09-21*/
/*!@license Copyright 2013, Heinrich Goebl, License: MIT, see https://github.com/hgoebl/mobile-detect.js*/
function(e,t){e((function(){"use strict";var e,n={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",Asus:"Asus.*Galaxy|PadFone.*Mobile",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android.*\\bG1\\b(?!\\))",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},i=Object.prototype.hasOwnProperty;function o(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function r(e,t){var n,i,o=e.length;if(!o||!t)return!1;for(n=t.toLowerCase(),i=0;i<o;++i)if(n===e[i].toLowerCase())return!0;return!1}function a(e){for(var t in e)i.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function s(e,t){this.ua=function(e){return(e||"").substr(0,500)}(e),this._cache={},this.maxPhoneWidth=t||600}return n.FALLBACK_PHONE="UnknownPhone",n.FALLBACK_TABLET="UnknownTablet",n.FALLBACK_MOBILE="UnknownMobile",e="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var t,o,r,s,l,c,u=n.mobileDetectRules;for(t in u.props)if(i.call(u.props,t)){for(o=u.props[t],e(o)||(o=[o]),l=o.length,s=0;s<l;++s)(c=(r=o[s]).indexOf("[VER]"))>=0&&(r=r.substring(0,c)+"([\\w._\\+]+)"+r.substring(c+5)),o[s]=new RegExp(r,"i");u.props[t]=o}a(u.oss),a(u.phones),a(u.tablets),a(u.uas),a(u.utils),u.oss0={WindowsPhoneOS:u.oss.WindowsPhoneOS,WindowsMobileOS:u.oss.WindowsMobileOS}}(),n.findMatch=function(e,t){for(var n in e)if(i.call(e,n)&&e[n].test(t))return n;return null},n.findMatches=function(e,t){var n=[];for(var o in e)i.call(e,o)&&e[o].test(t)&&n.push(o);return n},n.getVersionStr=function(e,t){var o,r,a,s,l=n.mobileDetectRules.props;if(i.call(l,e))for(a=(o=l[e]).length,r=0;r<a;++r)if(null!==(s=o[r].exec(t)))return s[1];return null},n.getVersion=function(e,t){var i=n.getVersionStr(e,t);return i?n.prepareVersionNo(i):NaN},n.prepareVersionNo=function(e){var t;return 1===(t=e.split(/[a-z._ \/\-]/i)).length&&(e=t[0]),t.length>1&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},n.isMobileFallback=function(e){return n.detectMobileBrowsers.fullPattern.test(e)||n.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},n.isTabletFallback=function(e){return n.detectMobileBrowsers.tabletPattern.test(e)},n.prepareDetectionCache=function(e,i,o){if(e.mobile===t){var r,a,l;if(a=n.findMatch(n.mobileDetectRules.tablets,i))return e.mobile=e.tablet=a,void(e.phone=null);if(r=n.findMatch(n.mobileDetectRules.phones,i))return e.mobile=e.phone=r,void(e.tablet=null);n.isMobileFallback(i)?(l=s.isPhoneSized(o))===t?(e.mobile=n.FALLBACK_MOBILE,e.tablet=e.phone=null):l?(e.mobile=e.phone=n.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=n.FALLBACK_TABLET,e.phone=null):n.isTabletFallback(i)?(e.mobile=e.tablet=n.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null}},n.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&e.version("iPad")>=4.3||e.os("iOS")&&e.version("iPhone")>=3.1||e.os("iOS")&&e.version("iPod")>=3.1||e.version("Android")>2.1&&e.is("Webkit")||e.version("Windows Phone OS")>=7||e.is("BlackBerry")&&e.version("BlackBerry")>=6||e.match("Playbook.*Tablet")||e.version("webOS")>=1.4&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&e.version("Firefox")>=12||e.is("Chrome")&&e.is("AndroidOS")&&e.version("Android")>=4||e.is("Skyfire")&&e.version("Skyfire")>=4.1&&e.is("AndroidOS")&&e.version("Android")>=2.3||e.is("Opera")&&e.version("Opera Mobi")>11&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&e.version("Bada")>=2||(e.is("UC Browser")||e.is("Dolfin"))&&e.version("Android")>=2.3||e.match("Kindle Fire")||e.is("Kindle")&&e.version("Kindle")>=3||e.is("AndroidOS")&&e.is("NookTablet")||e.version("Chrome")>=11&&!t||e.version("Safari")>=5&&!t||e.version("Firefox")>=4&&!t||e.version("MSIE")>=7&&!t||e.version("Opera")>=10&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&e.version("BlackBerry")>=5&&e.version("BlackBerry")<6||e.version("Opera Mini")>=5&&e.version("Opera Mini")<=6.5&&(e.version("Android")>=2.3||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||e.version("Opera Mobi")>=11&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},n.detectOS=function(e){return n.findMatch(n.mobileDetectRules.oss0,e)||n.findMatch(n.mobileDetectRules.oss,e)},n.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},s.prototype={constructor:s,mobile:function(){return n.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return n.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return n.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===t&&(this._cache.userAgent=n.findMatch(n.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===t&&(this._cache.userAgents=n.findMatches(n.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===t&&(this._cache.os=n.detectOS(this.ua)),this._cache.os},version:function(e){return n.getVersion(e,this.ua)},versionStr:function(e){return n.getVersionStr(e,this.ua)},is:function(e){return r(this.userAgents(),e)||o(e,this.os())||o(e,this.phone())||o(e,this.tablet())||r(n.findMatches(n.mobileDetectRules.utils,this.ua),e)},match:function(e){return e instanceof RegExp||(e=new RegExp(e,"i")),e.test(this.ua)},isPhoneSized:function(e){return s.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===t&&(this._cache.grade=n.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&&window.screen?s.isPhoneSized=function(e){return e<0?t:n.getDeviceSmallerSide()<=e}:s.isPhoneSized=function(){},s._impl=n,s.version="1.4.4 2019-09-21",s}))}(function(e){if("undefined"!=typeof module&&module.exports)return function(e){module.exports=e()};if("function"==typeof define&&define.amd)return define;if("undefined"!=typeof window)return function(e){window.MobileDetect=e()};throw new Error("unknown environment")}()),
/*!
 * @fileOverview TouchSwipe - jQuery Plugin
 * @version 1.6.18
 *
 * @author Matt Bryson http://www.github.com/mattbryson
 * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
 * @see http://labs.rampinteractive.co.uk/touchSwipe/
 * @see http://plugins.jquery.com/project/touchSwipe
 * @license
 * Copyright (c) 2010-2015 Matt Bryson
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 */
function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):"undefined"!=typeof module&&module.exports?e(require("jquery")):e(jQuery)}((function(e){"use strict";var t="left",n="right",i="up",o="down",r="in",a="out",s="none",l="auto",c="swipe",u="pinch",d="tap",p="doubletap",f="longtap",h="horizontal",g="vertical",T="all",m="start",v="move",b="end",S="cancel",y="ontouchstart"in window,x=window.navigator.msPointerEnabled&&!window.PointerEvent&&!y,P=(window.PointerEvent||window.navigator.msPointerEnabled)&&!y,A="TouchSwipe";function M(t){return!t||void 0!==t.allowPageScroll||void 0===t.swipe&&void 0===t.swipeStatus||(t.allowPageScroll=s),void 0!==t.click&&void 0===t.tap&&(t.tap=t.click),t||(t={}),t=e.extend({},e.fn.swipe.defaults,t),this.each((function(){var n=e(this),i=n.data(A);i||(i=new w(this,t),n.data(A,i))}))}function w(M,w){w=e.extend({},w);var C=y||P||!w.fallbackToMouseEvents,G=C?P?x?"MSPointerDown":"pointerdown":"touchstart":"mousedown",E=C?P?x?"MSPointerMove":"pointermove":"touchmove":"mousemove",H=C?P?x?"MSPointerUp":"pointerup":"touchend":"mouseup",B=C?P?"mouseleave":null:"mouseleave",D=P?x?"MSPointerCancel":"pointercancel":"touchcancel",I=0,k=null,L=null,N=0,O=0,R=0,V=1,W=0,F=0,X=null,j=e(M),_="start",q=0,U={},K=0,z=0,$=0,Q=0,Y=0,Z=null,J=null;try{j.on(G,ee),j.on(D,ie)}catch(t){e.error("events not supported "+G+","+D+" on jQuery.swipe")}function ee(r){if(!0!==j.data("TouchSwipe_intouch")&&!(e(r.target).closest(w.excludedElements,j).length>0)){var a=r.originalEvent?r.originalEvent:r;if(!a.pointerType||"mouse"!=a.pointerType||0!=w.fallbackToMouseEvents){var s,l,c=a.touches,u=c?c[0]:a;return _=m,c?q=c.length:!1!==w.preventDefaultEvents&&r.preventDefault(),I=0,k=null,L=null,F=null,N=0,O=0,R=0,V=1,W=0,(l={}).left=Ce(t),l.right=Ce(n),l.up=Ce(i),l.down=Ce(o),X=l,ye(),Ae(0,u),!c||q===w.fingers||w.fingers===T||fe()?(K=Be(),2==q&&(Ae(1,c[1]),O=R=Ee(U[0].start,U[1].start)),(w.swipeStatus||w.pinchStatus)&&(s=se(a,_))):s=!1,!1===s?(se(a,_=S),s):(w.hold&&(J=setTimeout(e.proxy((function(){j.trigger("hold",[a.target]),w.hold&&(s=w.hold.call(j,a,a.target))}),this),w.longTapThreshold)),Pe(!0),null)}}}function te(c){var u=c.originalEvent?c.originalEvent:c;if(_!==b&&_!==S&&!xe()){var d,p,f,m,y,x=u.touches,P=Me(x?x[0]:u);if(z=Be(),x&&(q=x.length),w.hold&&clearTimeout(J),_=v,2==q&&(0==O?(Ae(1,x[1]),O=R=Ee(U[0].start,U[1].start)):(Me(x[1]),R=Ee(U[0].end,U[1].end),U[0].end,U[1].end,F=V<1?a:r),V=(R/O*1).toFixed(2),W=Math.abs(O-R)),q===w.fingers||w.fingers===T||!x||fe()){if(k=He(P.start,P.end),function(e,r){if(!1===w.preventDefaultEvents)return;if(w.allowPageScroll===s)e.preventDefault();else{var a=w.allowPageScroll===l;switch(r){case t:(w.swipeLeft&&a||!a&&w.allowPageScroll!=h)&&e.preventDefault();break;case n:(w.swipeRight&&a||!a&&w.allowPageScroll!=h)&&e.preventDefault();break;case i:(w.swipeUp&&a||!a&&w.allowPageScroll!=g)&&e.preventDefault();break;case o:(w.swipeDown&&a||!a&&w.allowPageScroll!=g)&&e.preventDefault()}}}(c,L=He(P.last,P.end)),m=P.start,y=P.end,I=Math.round(Math.sqrt(Math.pow(y.x-m.x,2)+Math.pow(y.y-m.y,2))),N=Ge(),function(e,t){if(e==s)return;t=Math.max(t,we(e)),X[e].distance=t}(k,I),d=se(u,_),!w.triggerOnTouchEnd||w.triggerOnTouchLeave){var A=!0;if(w.triggerOnTouchLeave){var M={left:(f=(p=e(p=this)).offset()).left,right:f.left+p.outerWidth(),top:f.top,bottom:f.top+p.outerHeight()};A=function(e,t){return e.x>t.left&&e.x<t.right&&e.y>t.top&&e.y<t.bottom}(P.end,M)}!w.triggerOnTouchEnd&&A?_=ae(v):w.triggerOnTouchLeave&&!A&&(_=ae(b)),_!=S&&_!=b||se(u,_)}}else se(u,_=S);!1===d&&se(u,_=S)}}function ne(e){var t=e.originalEvent?e.originalEvent:e,n=t.touches;if(n){if(n.length&&!xe())return function(e){$=Be(),Q=e.touches.length+1}(t),!0;if(n.length&&xe())return!0}return xe()&&(q=Q),z=Be(),N=Ge(),ue()||!ce()?se(t,_=S):w.triggerOnTouchEnd||!1===w.triggerOnTouchEnd&&_===v?(!1!==w.preventDefaultEvents&&!1!==e.cancelable&&e.preventDefault(),se(t,_=b)):!w.triggerOnTouchEnd&&ve()?le(t,_=b,d):_===v&&se(t,_=S),Pe(!1),null}function ie(){q=0,z=0,K=0,O=0,R=0,V=1,ye(),Pe(!1)}function oe(e){var t=e.originalEvent?e.originalEvent:e;w.triggerOnTouchLeave&&se(t,_=ae(b))}function re(){j.off(G,ee),j.off(D,ie),j.off(E,te),j.off(H,ne),B&&j.off(B,oe),Pe(!1)}function ae(e){var t=e,n=de(),i=ce(),o=ue();return!n||o?t=S:!i||e!=v||w.triggerOnTouchEnd&&!w.triggerOnTouchLeave?!i&&e==b&&w.triggerOnTouchLeave&&(t=S):t=b,t}function se(e,t){var n,i=e.touches;return(he()&&ge()||ge())&&(n=le(e,t,c)),(pe()&&fe()||fe())&&!1!==n&&(n=le(e,t,u)),Se()&&be()&&!1!==n?n=le(e,t,p):N>w.longTapThreshold&&I<10&&w.longTap&&!1!==n?n=le(e,t,f):1!==q&&y||!(isNaN(I)||I<w.threshold)||!ve()||!1===n||(n=le(e,t,d)),t===S&&ie(),t===b&&(i&&i.length||ie()),n}function le(s,l,h){var g;if(h==c){if(j.trigger("swipeStatus",[l,k||null,I||0,N||0,q,U,L]),w.swipeStatus&&!1===(g=w.swipeStatus.call(j,s,l,k||null,I||0,N||0,q,U,L)))return!1;if(l==b&&he()){if(clearTimeout(Z),clearTimeout(J),j.trigger("swipe",[k,I,N,q,U,L]),w.swipe&&!1===(g=w.swipe.call(j,s,k,I,N,q,U,L)))return!1;switch(k){case t:j.trigger("swipeLeft",[k,I,N,q,U,L]),w.swipeLeft&&(g=w.swipeLeft.call(j,s,k,I,N,q,U,L));break;case n:j.trigger("swipeRight",[k,I,N,q,U,L]),w.swipeRight&&(g=w.swipeRight.call(j,s,k,I,N,q,U,L));break;case i:j.trigger("swipeUp",[k,I,N,q,U,L]),w.swipeUp&&(g=w.swipeUp.call(j,s,k,I,N,q,U,L));break;case o:j.trigger("swipeDown",[k,I,N,q,U,L]),w.swipeDown&&(g=w.swipeDown.call(j,s,k,I,N,q,U,L))}}}if(h==u){if(j.trigger("pinchStatus",[l,F||null,W||0,N||0,q,V,U]),w.pinchStatus&&!1===(g=w.pinchStatus.call(j,s,l,F||null,W||0,N||0,q,V,U)))return!1;if(l==b&&pe())switch(F){case r:j.trigger("pinchIn",[F||null,W||0,N||0,q,V,U]),w.pinchIn&&(g=w.pinchIn.call(j,s,F||null,W||0,N||0,q,V,U));break;case a:j.trigger("pinchOut",[F||null,W||0,N||0,q,V,U]),w.pinchOut&&(g=w.pinchOut.call(j,s,F||null,W||0,N||0,q,V,U))}}return h==d?l!==S&&l!==b||(clearTimeout(Z),clearTimeout(J),be()&&!Se()?(Y=Be(),Z=setTimeout(e.proxy((function(){Y=null,j.trigger("tap",[s.target]),w.tap&&(g=w.tap.call(j,s,s.target))}),this),w.doubleTapThreshold)):(Y=null,j.trigger("tap",[s.target]),w.tap&&(g=w.tap.call(j,s,s.target)))):h==p?l!==S&&l!==b||(clearTimeout(Z),clearTimeout(J),Y=null,j.trigger("doubletap",[s.target]),w.doubleTap&&(g=w.doubleTap.call(j,s,s.target))):h==f&&(l!==S&&l!==b||(clearTimeout(Z),Y=null,j.trigger("longtap",[s.target]),w.longTap&&(g=w.longTap.call(j,s,s.target)))),g}function ce(){var e=!0;return null!==w.threshold&&(e=I>=w.threshold),e}function ue(){var e=!1;return null!==w.cancelThreshold&&null!==k&&(e=we(k)-I>=w.cancelThreshold),e}function de(){return!w.maxTimeThreshold||!(N>=w.maxTimeThreshold)}function pe(){var e=Te(),t=me(),n=null===w.pinchThreshold||W>=w.pinchThreshold;return e&&t&&n}function fe(){return!!(w.pinchStatus||w.pinchIn||w.pinchOut)}function he(){var e=de(),t=ce(),n=Te(),i=me();return!ue()&&i&&n&&t&&e}function ge(){return!!(w.swipe||w.swipeStatus||w.swipeLeft||w.swipeRight||w.swipeUp||w.swipeDown)}function Te(){return q===w.fingers||w.fingers===T||!y}function me(){return 0!==U[0].end.x}function ve(){return!!w.tap}function be(){return!!w.doubleTap}function Se(){if(null==Y)return!1;var e=Be();return be()&&e-Y<=w.doubleTapThreshold}function ye(){$=0,Q=0}function xe(){var e=!1;$&&(Be()-$<=w.fingerReleaseThreshold&&(e=!0));return e}function Pe(e){j&&(!0===e?(j.on(E,te),j.on(H,ne),B&&j.on(B,oe)):(j.off(E,te,!1),j.off(H,ne,!1),B&&j.off(B,oe,!1)),j.data("TouchSwipe_intouch",!0===e))}function Ae(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,U[e]=n,n}function Me(e){var t=void 0!==e.identifier?e.identifier:0,n=function(e){return U[e]||null}(t);return null===n&&(n=Ae(t,e)),n.last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function we(e){if(X[e])return X[e].distance}function Ce(e){return{direction:e,distance:0}}function Ge(){return z-K}function Ee(e,t){var n=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+i*i))}function He(e,r){if(l=r,(a=e).x==l.x&&a.y==l.y)return s;var a,l,c=function(e,t){var n=e.x-t.x,i=t.y-e.y,o=Math.atan2(i,n),r=Math.round(180*o/Math.PI);return r<0&&(r=360-Math.abs(r)),r}(e,r);return c<=45&&c>=0||c<=360&&c>=315?t:c>=135&&c<=225?n:c>45&&c<135?o:i}function Be(){return(new Date).getTime()}this.enable=function(){return this.disable(),j.on(G,ee),j.on(D,ie),j},this.disable=function(){return re(),j},this.destroy=function(){re(),j.data(A,null),j=null},this.option=function(t,n){if("object"==typeof t)w=e.extend(w,t);else if(void 0!==w[t]){if(void 0===n)return w[t];w[t]=n}else{if(!t)return w;e.error("Option "+t+" does not exist on jQuery.swipe.options")}return null}}e.fn.swipe=function(t){var n=e(this),i=n.data(A);if(i&&"string"==typeof t){if(i[t])return i[t].apply(i,Array.prototype.slice.call(arguments,1));e.error("Method "+t+" does not exist on jQuery.swipe")}else if(i&&"object"==typeof t)i.option.apply(i,arguments);else if(!(i||"object"!=typeof t&&t))return M.apply(this,arguments);return n},e.fn.swipe.version="1.6.18",e.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},e.fn.swipe.phases={PHASE_START:m,PHASE_MOVE:v,PHASE_END:b,PHASE_CANCEL:S},e.fn.swipe.directions={LEFT:t,RIGHT:n,UP:i,DOWN:o,IN:r,OUT:a},e.fn.swipe.pageScroll={NONE:s,HORIZONTAL:h,VERTICAL:g,AUTO:l},e.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:T}})),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each((function(){e(this).bxSlider(n)})),this;var o={},r=this,a=e(window).width(),s=e(window).height();if(!e(r).data("bxSlider")){var l=function(){e(r).data("bxSlider")||(o.settings=e.extend({},t,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"===o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!==o.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return o.cssPrefix=t[n].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"===o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each((function(){e(this).data("origStyle",e(this).attr("style"))})),c())},c=function(){var t=o.children.eq(o.settings.startSlide);r.wrap('<div class="'+o.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.settings.ariaLive&&!o.settings.ticker&&o.viewport.attr("aria-live","polite"),o.loader=e('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"===o.settings.mode?1e3*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:f()}),o.children.css({float:"horizontal"===o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",h()),"horizontal"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"===o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=e('<div class="bx-controls" />'),o.settings.captions&&A(),o.active.last=o.settings.startSlide===T()-1,o.settings.video&&r.fitVids(),"none"===o.settings.preloadImages?t=null:("all"===o.settings.preloadImages||o.settings.ticker)&&(t=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.controls&&x(),o.settings.auto&&o.settings.autoControls&&P(),o.settings.pager&&y(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),null===t?d():u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,o=0;0!==i?t.find('img:not([src=""]), iframe').each((function(){e(this).one("load error",(function(){++o===i&&n()})).each((function(){(this.complete||""==this.src)&&e(this).trigger("load")}))})):n()},d=function(){if(o.settings.infiniteLoop&&"fade"!==o.settings.mode&&!o.settings.ticker){var t="vertical"===o.settings.mode?o.settings.minSlides:o.settings.maxSlides,n=o.children.slice(0,t).clone(!0).addClass("bx-clone"),i=o.children.slice(-t).clone(!0).addClass("bx-clone");o.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),r.append(n).prepend(i)}o.loader.remove(),v(),"vertical"===o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(p()),r.redrawSlider(),o.settings.onSliderLoad.call(r,o.active.index),o.initialized=!0,o.settings.responsive&&e(window).on("resize",q),o.settings.auto&&o.settings.autoStart&&(T()>1||o.settings.autoSlideForOnePage)&&N(),o.settings.ticker&&O(),o.settings.pager&&H(o.settings.startSlide),o.settings.controls&&I(),o.settings.touchEnabled&&!o.settings.ticker&&W(),o.settings.keyboardEnabled&&!o.settings.ticker&&e(document).keydown(V)},p=function(){var t=0,n=e();if("vertical"===o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var r=1===o.settings.moveSlides?o.active.index:o.active.index*m();for(n=o.children.eq(r),i=1;i<=o.settings.maxSlides-1;i++)n=r+i>=o.children.length?n.add(o.children.eq(i-1)):n.add(o.children.eq(r+i))}else n=o.children.eq(o.active.index);else n=o.children;return"vertical"===o.settings.mode?(n.each((function(n){t+=e(this).outerHeight()})),o.settings.slideMargin>0&&(t+=o.settings.slideMargin*(o.settings.minSlides-1))):t=Math.max.apply(Math,n.map((function(){return e(this).outerHeight(!1)})).get()),"border-box"===o.viewport.css("box-sizing")?t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))+parseFloat(o.viewport.css("border-top-width"))+parseFloat(o.viewport.css("border-bottom-width")):"padding-box"===o.viewport.css("box-sizing")&&(t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))),t},f=function(){var e="100%";return o.settings.slideWidth>0&&(e="horizontal"===o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),e},h=function(){var e=o.settings.slideWidth,t=o.viewport.width();if(0===o.settings.slideWidth||o.settings.slideWidth>t&&!o.carousel||"vertical"===o.settings.mode)e=t;else if(o.settings.maxSlides>1&&"horizontal"===o.settings.mode){if(t>o.maxThreshold)return e;t<o.minThreshold?e=(t-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides:o.settings.shrinkItems&&(e=Math.floor((t+o.settings.slideMargin)/Math.ceil((t+o.settings.slideMargin)/(e+o.settings.slideMargin))-o.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===o.settings.mode&&o.settings.slideWidth>0?o.viewport.width()<o.minThreshold?e=o.settings.minSlides:o.viewport.width()>o.maxThreshold?e=o.settings.maxSlides:(t=o.children.first().width()+o.settings.slideMargin,e=Math.floor((o.viewport.width()+o.settings.slideMargin)/t)||1):"vertical"===o.settings.mode&&(e=o.settings.minSlides),e},T=function(){var e=0,t=0,n=0;if(o.settings.moveSlides>0){if(!o.settings.infiniteLoop){for(;t<o.children.length;)++e,t=n+g(),n+=o.settings.moveSlides<=g()?o.settings.moveSlides:g();return n}e=Math.ceil(o.children.length/m())}else e=Math.ceil(o.children.length/g());return e},m=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=g()?o.settings.moveSlides:g()},v=function(){var e,t,n;o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop?"horizontal"===o.settings.mode?(e=(t=o.children.last()).position(),b(-(e.left-(o.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===o.settings.mode&&(n=o.children.length-o.settings.minSlides,e=o.children.eq(n).position(),b(-e.top,"reset",0)):(e=o.children.eq(o.active.index*m()).position(),o.active.index===T()-1&&(o.active.last=!0),void 0!==e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,a){var s,l;o.usingCSS?(l="vertical"===o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(r.css(o.animProp,l),0!==i?r.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",(function(t){e(t.target).is(r)&&(r.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),B())})):B()):"reset"===n?r.css(o.animProp,l):"ticker"===n&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,l),0!==i?r.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",(function(t){e(t.target).is(r)&&(r.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(a.resetValue,"reset",0),R())})):(b(a.resetValue,"reset",0),R()))):((s={})[o.animProp]=t,"slide"===n?r.animate(s,i,o.settings.easing,(function(){B()})):"reset"===n?r.css(o.animProp,t):"ticker"===n&&r.animate(s,i,"linear",(function(){b(a.resetValue,"reset",0),R()})))},S=function(){for(var t="",n="",i=T(),r=0;r<i;r++)n="",o.settings.buildPager&&e.isFunction(o.settings.buildPager)||o.settings.pagerCustom?(n=o.settings.buildPager(r),o.pagerEl.addClass("bx-custom-pager")):(n=r+1,o.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+r+'" class="bx-pager-link">'+n+"</a></div>";o.pagerEl.html(t)},y=function(){o.settings.pagerCustom?o.pagerEl=e(o.settings.pagerCustom):(o.pagerEl=e('<div class="bx-pager" />'),o.settings.pagerSelector?e(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),S()),o.pagerEl.on("click touchend","a",E)},x=function(){o.controls.next=e('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=e('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.on("click touchend",M),o.controls.prev.on("click touchend",w),o.settings.nextSelector&&e(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&e(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=e('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},P=function(){o.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=e('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",C),o.controls.autoEl.on("click",".bx-stop",G),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?e(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),D(o.settings.autoStart?"stop":"start")},A=function(){o.children.each((function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")}))},M=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToNextSlide())},w=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToPrevSlide())},C=function(e){r.startAuto(),e.preventDefault()},G=function(e){r.stopAuto(),e.preventDefault()},E=function(t){var n,i;t.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),void 0!==(n=e(t.currentTarget)).attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==o.active.index&&r.goToSlide(i))},H=function(t){var n=o.children.length;if("short"===o.settings.pagerType)return o.settings.maxSlides>1&&(n=Math.ceil(o.children.length/o.settings.maxSlides)),void o.pagerEl.html(t+1+o.settings.pagerShortSeparator+n);o.pagerEl.find("a").removeClass("active"),o.pagerEl.each((function(n,i){e(i).find("a").eq(t).addClass("active")}))},B=function(){if(o.settings.infiniteLoop){var e="";0===o.active.index?e=o.children.eq(0).position():o.active.index===T()-1&&o.carousel?e=o.children.eq((T()-1)*m()).position():o.active.index===o.children.length-1&&(e=o.children.eq(o.children.length-1).position()),e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0))}o.working=!1,o.settings.onSlideAfter.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)},D=function(e){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[e]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},I=function(){1===T()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0===o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index===T()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},k=function(){r.startAuto()},L=function(){r.stopAuto()},N=function(){o.settings.autoDelay>0?setTimeout(r.startAuto,o.settings.autoDelay):(r.startAuto(),e(window).focus(k).blur(L)),o.settings.autoHover&&r.hover((function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)}),(function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)}))},O=function(){var t,n,i,a,s,l,c,u,d=0;"next"===o.settings.autoDirection?r.append(o.children.clone().addClass("bx-clone")):(r.prepend(o.children.clone().addClass("bx-clone")),t=o.children.first().position(),d="horizontal"===o.settings.mode?-t.left:-t.top),b(d,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&(o.usingCSS?(a="horizontal"===o.settings.mode?4:5,o.viewport.hover((function(){n=r.css("-"+o.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),b(i,"reset",0)}),(function(){u=0,o.children.each((function(t){u+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)})),s=o.settings.speed/u,l="horizontal"===o.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(i))),R(c)}))):o.viewport.hover((function(){r.stop()}),(function(){u=0,o.children.each((function(t){u+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)})),s=o.settings.speed/u,l="horizontal"===o.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(r.css(l)))),R(c)}))),R()},R=function(e){var t,n,i=e||o.settings.speed,a={left:0,top:0},s={left:0,top:0};"next"===o.settings.autoDirection?a=r.find(".bx-clone").first().position():s=o.children.first().position(),t="horizontal"===o.settings.mode?-a.left:-a.top,n="horizontal"===o.settings.mode?-s.left:-s.top,b(t,"ticker",i,{resetValue:n})},V=function(t){var n=document.activeElement.tagName.toLowerCase();if(null==new RegExp(n,["i"]).exec("input|textarea")&&function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom)}(r)){if(39===t.keyCode)return M(t),!1;if(37===t.keyCode)return w(t),!1}},W=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.on("touchstart MSPointerDown pointerdown",F),o.viewport.on("click",".bxslider a",(function(e){o.viewport.hasClass("click-disabled")&&(e.preventDefault(),o.viewport.removeClass("click-disabled"))}))},F=function(e){if("touchstart"===e.type||0===e.button)if(e.preventDefault(),o.controls.el.addClass("disabled"),o.working)o.controls.el.removeClass("disabled");else{o.touch.originalPos=r.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];if("function"==typeof PointerEvent&&void 0===t.pointerId)return;o.touch.start.x=n[0].pageX,o.touch.start.y=n[0].pageY,o.viewport.get(0).setPointerCapture&&(o.pointerId=t.pointerId,o.viewport.get(0).setPointerCapture(o.pointerId)),o.originalClickTarget=t.originalTarget||t.target,o.originalClickButton=t.button,o.originalClickButtons=t.buttons,o.originalEventType=t.type,o.hasMove=!1,o.viewport.on("touchmove MSPointerMove pointermove",j),o.viewport.on("touchend MSPointerUp pointerup",_),o.viewport.on("MSPointerCancel pointercancel",X)}},X=function(e){e.preventDefault(),b(o.touch.originalPos.left,"reset",0),o.controls.el.removeClass("disabled"),o.viewport.off("MSPointerCancel pointercancel",X),o.viewport.off("touchmove MSPointerMove pointermove",j),o.viewport.off("touchend MSPointerUp pointerup",_),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},j=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-o.touch.start.x),r=Math.abs(n[0].pageY-o.touch.start.y),a=0,s=0;o.hasMove=!0,(3*i>r&&o.settings.preventDefaultSwipeX||3*r>i&&o.settings.preventDefaultSwipeY)&&e.preventDefault(),"touchmove"!==e.type&&e.preventDefault(),"fade"!==o.settings.mode&&o.settings.oneToOneTouch&&("horizontal"===o.settings.mode?(s=n[0].pageX-o.touch.start.x,a=o.touch.originalPos.left+s):(s=n[0].pageY-o.touch.start.y,a=o.touch.originalPos.top+s),b(a,"reset",0))},_=function(t){t.preventDefault(),o.viewport.off("touchmove MSPointerMove pointermove",j),o.controls.el.removeClass("disabled");var n=t.originalEvent,i=void 0!==n.changedTouches?n.changedTouches:[n],a=0,s=0;o.touch.end.x=i[0].pageX,o.touch.end.y=i[0].pageY,"fade"===o.settings.mode?(s=Math.abs(o.touch.start.x-o.touch.end.x))>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):("horizontal"===o.settings.mode?(s=o.touch.end.x-o.touch.start.x,a=o.touch.originalPos.left):(s=o.touch.end.y-o.touch.start.y,a=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0===o.active.index&&s>0||o.active.last&&s<0)?b(a,"reset",200):Math.abs(s)>=o.settings.swipeThreshold?(s<0?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(a,"reset",200)),o.viewport.off("touchend MSPointerUp pointerup",_),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId),!1!==o.hasMove||0!==o.originalClickButton&&"touchstart"!==o.originalEventType||e(o.originalClickTarget).trigger({type:"click",button:o.originalClickButton,buttons:o.originalClickButtons})},q=function(t){if(o.initialized)if(o.working)window.setTimeout(q,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))}},U=function(e){var t=g();o.settings.ariaHidden&&!o.settings.ticker&&(o.children.attr("aria-hidden","true"),o.children.slice(e,e+t).attr("aria-hidden","false"))};return r.goToSlide=function(t,n){var i,a,s,l,c=!0,u=0,d={left:0,top:0},f=null;if(o.oldIndex=o.active.index,o.active.index=function(e){return e<0?o.settings.infiniteLoop?T()-1:o.active.index:e>=T()?o.settings.infiniteLoop?0:o.active.index:e}(t),!o.working&&o.active.index!==o.oldIndex){if(o.working=!0,void 0!==(c=o.settings.onSlideBefore.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index))&&!c)return o.active.index=o.oldIndex,void(o.working=!1);"next"===n?o.settings.onSlideNext.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1):"prev"===n&&(o.settings.onSlidePrev.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1)),o.active.last=o.active.index>=T()-1,(o.settings.pager||o.settings.pagerCustom)&&H(o.active.index),o.settings.controls&&I(),"fade"===o.settings.mode?(o.settings.adaptiveHeight&&o.viewport.height()!==p()&&o.viewport.animate({height:p()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,(function(){e(this).css("zIndex",o.settings.slideZIndex),B()}))):(o.settings.adaptiveHeight&&o.viewport.height()!==p()&&o.viewport.animate({height:p()},o.settings.adaptiveHeightSpeed),!o.settings.infiniteLoop&&o.carousel&&o.active.last?"horizontal"===o.settings.mode?(d=(f=o.children.eq(o.children.length-1)).position(),u=o.viewport.width()-f.outerWidth()):(i=o.children.length-o.settings.minSlides,d=o.children.eq(i).position()):o.carousel&&o.active.last&&"prev"===n?(a=1===o.settings.moveSlides?o.settings.maxSlides-m():(T()-1)*m()-(o.children.length-o.settings.maxSlides),d=(f=r.children(".bx-clone").eq(a)).position()):"next"===n&&0===o.active.index?(d=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1):t>=0&&(l=t*parseInt(m()),d=o.children.eq(l).position()),void 0!==d&&(s="horizontal"===o.settings.mode?-(d.left-u):-d.top,b(s,"slide",o.settings.speed)),o.working=!1),o.settings.ariaHidden&&U(o.active.index*m())}},r.goToNextSlide=function(){if((o.settings.infiniteLoop||!o.active.last)&&!0!==o.working){var e=parseInt(o.active.index)+1;r.goToSlide(e,"next")}},r.goToPrevSlide=function(){if((o.settings.infiniteLoop||0!==o.active.index)&&!0!==o.working){var e=parseInt(o.active.index)-1;r.goToSlide(e,"prev")}},r.startAuto=function(e){o.interval||(o.interval=setInterval((function(){"next"===o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()}),o.settings.pause),o.settings.onAutoChange.call(r,!0),o.settings.autoControls&&!0!==e&&D("stop"))},r.stopAuto=function(e){o.autoPaused&&(o.autoPaused=!1),o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.onAutoChange.call(r,!1),o.settings.autoControls&&!0!==e&&D("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideElement=function(e){return o.children.eq(e)},r.getSlideCount=function(){return o.children.length},r.isWorking=function(){return o.working},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(h()),o.viewport.css("height",p()),o.settings.ticker||v(),o.active.last&&(o.active.index=T()-1),o.active.index>=T()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(S(),H(o.active.index)),o.settings.ariaHidden&&U(o.active.index*m())},r.destroySlider=function(){o.initialized&&(o.initialized=!1,e(".bx-clone",this).remove(),o.children.each((function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")})),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&!o.settings.pagerCustom&&o.pagerEl.remove(),e(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&e(window).off("resize",q),o.settings.keyboardEnabled&&e(document).off("keydown",V),e(this).removeData("bxSlider"),e(window).off("blur",L).off("focus",k))},r.reloadSlider=function(t){void 0!==t&&(n=t),r.destroySlider(),l(),e(r).data("bxSlider",this)},l(),e(r).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";var o=n("html"),r=n(e),a=n(t),s=n.fancybox=function(){s.open.apply(this,arguments)},l=navigator.userAgent.match(/msie/i),c=null,u=t.createTouch!==i,d=function(e){return e&&e.hasOwnProperty&&e instanceof n},p=function(e){return e&&"string"===n.type(e)},f=function(e){return p(e)&&e.indexOf("%")>0},h=function(e,t){var n=parseInt(e,10)||0;return t&&f(e)&&(n=s.getViewport()[t]/100*n),Math.ceil(n)},g=function(e,t){return h(e,t)+"px"};n.extend(s,{version:"2.1.5",defaults:{padding:15,margin:20,width:800,height:600,minWidth:100,minHeight:100,maxWidth:9999,maxHeight:9999,pixelRatio:1,autoSize:!0,autoHeight:!1,autoWidth:!1,autoResize:!0,autoCenter:!u,fitToView:!0,aspectRatio:!1,topRatio:.5,leftRatio:.5,scrolling:"auto",wrapCSS:"",arrows:!0,closeBtn:!0,closeClick:!1,nextClick:!1,mouseWheel:!0,autoPlay:!1,playSpeed:3e3,preload:3,modal:!1,loop:!0,ajax:{dataType:"html",headers:{"X-fancyBox":!0}},iframe:{scrolling:"auto",preload:!0},swf:{wmode:"transparent",allowfullscreen:"true",allowscriptaccess:"always"},keys:{next:{13:"left",34:"up",39:"left",40:"up"},prev:{8:"right",33:"down",37:"right",38:"down"},close:[27],play:[32],toggle:[70]},direction:{next:"left",prev:"right"},scrollOutside:!0,index:0,type:null,href:null,content:null,title:null,tpl:{wrap:'<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',image:'<img class="fancybox-image" src="{href}" alt="" />',iframe:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen'+(l?' allowtransparency="true"':"")+"></iframe>",error:'<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',closeBtn:'<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',next:'<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',prev:'<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',loading:'<div id="fancybox-loading"><div></div></div>'},openEffect:"fade",openSpeed:250,openEasing:"swing",openOpacity:!0,openMethod:"zoomIn",closeEffect:"fade",closeSpeed:250,closeEasing:"swing",closeOpacity:!0,closeMethod:"zoomOut",nextEffect:"elastic",nextSpeed:250,nextEasing:"swing",nextMethod:"changeIn",prevEffect:"elastic",prevSpeed:250,prevEasing:"swing",prevMethod:"changeOut",helpers:{overlay:!0,title:!0},onCancel:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeChange:n.noop,beforeClose:n.noop,afterClose:n.noop},group:{},opts:{},previous:null,coming:null,current:null,isActive:!1,isOpen:!1,isOpened:!1,wrap:null,skin:null,outer:null,inner:null,player:{timer:null,isActive:!1},ajaxLoad:null,imgPreload:null,transitions:{},helpers:{},open:function(e,t){if(e&&(n.isPlainObject(t)||(t={}),!1!==s.close(!0)))return n.isArray(e)||(e=d(e)?n(e).get():[e]),n.each(e,(function(o,r){var a,l,c,u,f,h,g,T={};"object"===n.type(r)&&(r.nodeType&&(r=n(r)),d(r)?(T={href:r.data("fancybox-href")||r.attr("href"),title:n("<div/>").text(r.data("fancybox-title")||r.attr("title")||"").html(),isDom:!0,element:r},n.metadata&&n.extend(!0,T,r.metadata())):T=r),a=t.href||T.href||(p(r)?r:null),l=t.title!==i?t.title:T.title||"",!(u=(c=t.content||T.content)?"html":t.type||T.type)&&T.isDom&&((u=r.data("fancybox-type"))||(u=(f=r.prop("class").match(/fancybox\.(\w+)/))?f[1]:null)),p(a)&&(u||(s.isImage(a)?u="image":s.isSWF(a)?u="swf":"#"===a.charAt(0)?u="inline":p(r)&&(u="html",c=r)),"ajax"===u&&(h=a.split(/\s+/,2),a=h.shift(),g=h.shift())),c||("inline"===u?a?c=n(p(a)?a.replace(/.*(?=#[^\s]+$)/,""):a):T.isDom&&(c=r):"html"===u?c=a:u||a||!T.isDom||(u="inline",c=r)),n.extend(T,{href:a,type:u,content:c,title:l,selector:g}),e[o]=T})),s.opts=n.extend(!0,{},s.defaults,t),t.keys!==i&&(s.opts.keys=!!t.keys&&n.extend({},s.defaults.keys,t.keys)),s.group=e,s._start(s.opts.index)},cancel:function(){var e=s.coming;e&&!1===s.trigger("onCancel")||(s.hideLoading(),e&&(s.ajaxLoad&&s.ajaxLoad.abort(),s.ajaxLoad=null,s.imgPreload&&(s.imgPreload.onload=s.imgPreload.onerror=null),e.wrap&&e.wrap.stop(!0,!0).trigger("onReset").remove(),s.coming=null,s.current||s._afterZoomOut(e)))},close:function(e){s.cancel(),!1!==s.trigger("beforeClose")&&(s.unbindEvents(),s.isActive&&(s.isOpen&&!0!==e?(s.isOpen=s.isOpened=!1,s.isClosing=!0,n(".fancybox-item, .fancybox-nav").remove(),s.wrap.stop(!0,!0).removeClass("fancybox-opened"),s.transitions[s.current.closeMethod]()):(n(".fancybox-wrap").stop(!0).trigger("onReset").remove(),s._afterZoomOut())))},play:function(e){var t=function(){clearTimeout(s.player.timer)},n=function(){t(),s.current&&s.player.isActive&&(s.player.timer=setTimeout(s.next,s.current.playSpeed))},i=function(){t(),a.unbind(".player"),s.player.isActive=!1,s.trigger("onPlayEnd")};!0===e||!s.player.isActive&&!1!==e?s.current&&(s.current.loop||s.current.index<s.group.length-1)&&(s.player.isActive=!0,a.bind({"onCancel.player beforeClose.player":i,"onUpdate.player":n,"beforeLoad.player":t}),n(),s.trigger("onPlayStart")):i()},next:function(e){var t=s.current;t&&(p(e)||(e=t.direction.next),s.jumpto(t.index+1,e,"next"))},prev:function(e){var t=s.current;t&&(p(e)||(e=t.direction.prev),s.jumpto(t.index-1,e,"prev"))},jumpto:function(e,t,n){var o=s.current;o&&(e=h(e),s.direction=t||o.direction[e>=o.index?"next":"prev"],s.router=n||"jumpto",o.loop&&(e<0&&(e=o.group.length+e%o.group.length),e%=o.group.length),o.group[e]!==i&&(s.cancel(),s._start(e)))},reposition:function(e,t){var i,o=s.current,r=o?o.wrap:null;r&&(i=s._getPosition(t),e&&"scroll"===e.type?(delete i.position,r.stop(!0,!0).animate(i,200)):(r.css(i),o.pos=n.extend({},o.dim,i)))},update:function(e){var t=e&&e.originalEvent&&e.originalEvent.type,n=!t||"orientationchange"===t;n&&(clearTimeout(c),c=null),s.isOpen&&!c&&(c=setTimeout((function(){var i=s.current;i&&!s.isClosing&&(s.wrap.removeClass("fancybox-tmp"),(n||"load"===t||"resize"===t&&i.autoResize)&&s._setDimension(),"scroll"===t&&i.canShrink||s.reposition(e),s.trigger("onUpdate"),c=null)}),n&&!u?0:300))},toggle:function(e){s.isOpen&&(s.current.fitToView="boolean"===n.type(e)?e:!s.current.fitToView,u&&(s.wrap.removeAttr("style").addClass("fancybox-tmp"),s.trigger("onUpdate")),s.update())},hideLoading:function(){a.unbind(".loading"),n("#fancybox-loading").remove()},showLoading:function(){var e,t;s.hideLoading(),e=n(s.opts.tpl.loading).click(s.cancel).appendTo("body"),a.bind("keydown.loading",(function(e){27===(e.which||e.keyCode)&&(e.preventDefault(),s.cancel())})),s.defaults.fixed||(t=s.getViewport(),e.css({position:"absolute",top:.5*t.h+t.y,left:.5*t.w+t.x})),s.trigger("onLoading")},getViewport:function(){var t=s.current&&s.current.locked||!1,n={x:r.scrollLeft(),y:r.scrollTop()};return t&&t.length?(n.w=t[0].clientWidth,n.h=t[0].clientHeight):(n.w=u&&e.innerWidth?e.innerWidth:r.width(),n.h=u&&e.innerHeight?e.innerHeight:r.height()),n},unbindEvents:function(){s.wrap&&d(s.wrap)&&s.wrap.unbind(".fb"),a.unbind(".fb"),r.unbind(".fb")},bindEvents:function(){var e,t=s.current;t&&(r.bind("orientationchange.fb"+(u?"":" resize.fb")+(t.autoCenter&&!t.locked?" scroll.fb":""),s.update),(e=t.keys)&&a.bind("keydown.fb",(function(o){var r=o.which||o.keyCode,a=o.target||o.srcElement;if(27===r&&s.coming)return!1;o.ctrlKey||o.altKey||o.shiftKey||o.metaKey||a&&(a.type||n(a).is("[contenteditable]"))||n.each(e,(function(e,a){return t.group.length>1&&a[r]!==i?(s[e](a[r]),o.preventDefault(),!1):n.inArray(r,a)>-1?(s[e](),o.preventDefault(),!1):void 0}))})),n.fn.mousewheel&&t.mouseWheel&&s.wrap.bind("mousewheel.fb",(function(e,i,o,r){for(var a,l=e.target||null,c=n(l),u=!1;c.length&&!(u||c.is(".fancybox-skin")||c.is(".fancybox-wrap"));)u=(a=c[0])&&!(a.style.overflow&&"hidden"===a.style.overflow)&&(a.clientWidth&&a.scrollWidth>a.clientWidth||a.clientHeight&&a.scrollHeight>a.clientHeight),c=n(c).parent();0===i||u||s.group.length>1&&!t.canShrink&&(r>0||o>0?s.prev(r>0?"down":"left"):(r<0||o<0)&&s.next(r<0?"up":"right"),e.preventDefault())})))},trigger:function(e,t){var i,o=t||s.coming||s.current;if(o){if(n.isFunction(o[e])&&(i=o[e].apply(o,Array.prototype.slice.call(arguments,1))),!1===i)return!1;o.helpers&&n.each(o.helpers,(function(t,i){i&&s.helpers[t]&&n.isFunction(s.helpers[t][e])&&s.helpers[t][e](n.extend(!0,{},s.helpers[t].defaults,i),o)}))}a.trigger(e)},isImage:function(e){return p(e)&&e.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)},isSWF:function(e){return p(e)&&e.match(/\.(swf)((\?|#).*)?$/i)},_start:function(e){var t,i,o,r,a,l={};if(e=h(e),!(t=s.group[e]||null))return!1;if(r=(l=n.extend(!0,{},s.opts,t)).margin,a=l.padding,"number"===n.type(r)&&(l.margin=[r,r,r,r]),"number"===n.type(a)&&(l.padding=[a,a,a,a]),l.modal&&n.extend(!0,l,{closeBtn:!1,closeClick:!1,nextClick:!1,arrows:!1,mouseWheel:!1,keys:null,helpers:{overlay:{closeClick:!1}}}),l.autoSize&&(l.autoWidth=l.autoHeight=!0),"auto"===l.width&&(l.autoWidth=!0),"auto"===l.height&&(l.autoHeight=!0),l.group=s.group,l.index=e,s.coming=l,!1!==s.trigger("beforeLoad")){if(o=l.type,i=l.href,!o)return s.coming=null,!(!s.current||!s.router||"jumpto"===s.router)&&(s.current.index=e,s[s.router](s.direction));if(s.isActive=!0,"image"!==o&&"swf"!==o||(l.autoHeight=l.autoWidth=!1,l.scrolling="visible"),"image"===o&&(l.aspectRatio=!0),"iframe"===o&&u&&(l.scrolling="scroll"),l.wrap=n(l.tpl.wrap).addClass("fancybox-"+(u?"mobile":"desktop")+" fancybox-type-"+o+" fancybox-tmp "+l.wrapCSS).appendTo(l.parent||"body"),n.extend(l,{skin:n(".fancybox-skin",l.wrap),outer:n(".fancybox-outer",l.wrap),inner:n(".fancybox-inner",l.wrap)}),n.each(["Top","Right","Bottom","Left"],(function(e,t){l.skin.css("padding"+t,g(l.padding[e]))})),s.trigger("onReady"),"inline"===o||"html"===o){if(!l.content||!l.content.length)return s._error("content")}else if(!i)return s._error("href");"image"===o?s._loadImage():"ajax"===o?s._loadAjax():"iframe"===o?s._loadIframe():s._afterLoad()}else s.coming=null},_error:function(e){n.extend(s.coming,{type:"html",autoWidth:!0,autoHeight:!0,minWidth:0,minHeight:0,scrolling:"no",hasError:e,content:s.coming.tpl.error}),s._afterLoad()},_loadImage:function(){var e=s.imgPreload=new Image;e.onload=function(){this.onload=this.onerror=null,s.coming.width=this.width/s.opts.pixelRatio,s.coming.height=this.height/s.opts.pixelRatio,s._afterLoad()},e.onerror=function(){this.onload=this.onerror=null,s._error("image")},e.src=s.coming.href,!0!==e.complete&&s.showLoading()},_loadAjax:function(){var e=s.coming;s.showLoading(),s.ajaxLoad=n.ajax(n.extend({},e.ajax,{url:e.href,error:function(e,t){s.coming&&"abort"!==t?s._error("ajax",e):s.hideLoading()},success:function(t,n){"success"===n&&(e.content=t,s._afterLoad())}}))},_loadIframe:function(){var e=s.coming,t=n(e.tpl.iframe.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",u?"auto":e.iframe.scrolling).attr("src",e.href);n(e.wrap).bind("onReset",(function(){try{n(this).find("iframe").hide().attr("src","//about:blank").end().empty()}catch(e){}})),e.iframe.preload&&(s.showLoading(),t.one("load",(function(){n(this).data("ready",1),u||n(this).bind("load.fb",s.update),n(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show(),s._afterLoad()}))),e.content=t.appendTo(e.inner),e.iframe.preload||s._afterLoad()},_preloadImages:function(){var e,t,n=s.group,i=s.current,o=n.length,r=i.preload?Math.min(i.preload,o-1):0;for(t=1;t<=r;t+=1)"image"===(e=n[(i.index+t)%o]).type&&e.href&&((new Image).src=e.href)},_afterLoad:function(){var e,t,i,o,r,a,l=s.coming,c=s.current,u="fancybox-placeholder";if(s.hideLoading(),l&&!1!==s.isActive){if(!1===s.trigger("afterLoad",l,c))return l.wrap.stop(!0).trigger("onReset").remove(),void(s.coming=null);switch(c&&(s.trigger("beforeChange",c),c.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove()),s.unbindEvents(),e=l,t=l.content,i=l.type,o=l.scrolling,n.extend(s,{wrap:e.wrap,skin:e.skin,outer:e.outer,inner:e.inner,current:e,previous:c}),r=e.href,i){case"inline":case"ajax":case"html":e.selector?t=n("<div>").html(t).find(e.selector):d(t)&&(t.data(u)||t.data(u,n('<div class="'+u+'"></div>').insertAfter(t).hide()),t=t.show().detach(),e.wrap.bind("onReset",(function(){n(this).find(t).length&&t.hide().replaceAll(t.data(u)).data(u,!1)})));break;case"image":t=e.tpl.image.replace(/\{href\}/g,r);break;case"swf":t='<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="'+r+'"></param>',a="",n.each(e.swf,(function(e,n){t+='<param name="'+e+'" value="'+n+'"></param>',a+=" "+e+'="'+n+'"'})),t+='<embed src="'+r+'" type="application/x-shockwave-flash" width="100%" height="100%"'+a+"></embed></object>"}d(t)&&t.parent().is(e.inner)||e.inner.append(t),s.trigger("beforeShow"),e.inner.css("overflow","yes"===o?"scroll":"no"===o?"hidden":o),s._setDimension(),s.reposition(),s.isOpen=!1,s.coming=null,s.bindEvents(),s.isOpened?c.prevMethod&&s.transitions[c.prevMethod]():n(".fancybox-wrap").not(e.wrap).stop(!0).trigger("onReset").remove(),s.transitions[s.isOpened?e.nextMethod:e.openMethod](),s._preloadImages()}},_setDimension:function(){var e,t,i,o,r,a,l,c,u,d,p,T,m,v,b,S,y,x=s.getViewport(),P=0,A=s.wrap,M=s.skin,w=s.inner,C=s.current,G=C.width,E=C.height,H=C.minWidth,B=C.minHeight,D=C.maxWidth,I=C.maxHeight,k=C.scrolling,L=C.scrollOutside?C.scrollbarWidth:0,N=C.margin,O=h(N[1]+N[3]),R=h(N[0]+N[2]);if(A.add(M).add(w).width("auto").height("auto").removeClass("fancybox-tmp"),r=O+(i=h(M.outerWidth(!0)-M.width())),a=R+(o=h(M.outerHeight(!0)-M.height())),l=f(G)?(x.w-r)*h(G)/100:G,c=f(E)?(x.h-a)*h(E)/100:E,"iframe"===C.type){if(S=C.content,C.autoHeight&&S&&1===S.data("ready"))try{S[0].contentWindow.document.location&&(w.width(l).height(9999),y=S.contents().find("body"),L&&y.css("overflow-x","hidden"),c=y.outerHeight(!0))}catch(e){}}else(C.autoWidth||C.autoHeight)&&(w.addClass("fancybox-tmp"),C.autoWidth||w.width(l),C.autoHeight||w.height(c),C.autoWidth&&(l=w.width()),C.autoHeight&&(c=w.height()),w.removeClass("fancybox-tmp"));if(G=h(l),E=h(c),p=l/c,H=h(f(H)?h(H,"w")-r:H),D=h(f(D)?h(D,"w")-r:D),B=h(f(B)?h(B,"h")-a:B),u=D,d=I=h(f(I)?h(I,"h")-a:I),C.fitToView&&(D=Math.min(x.w-r,D),I=Math.min(x.h-a,I)),v=x.w-O,b=x.h-R,C.aspectRatio?(G>D&&(E=h((G=D)/p)),E>I&&(G=h((E=I)*p)),G<H&&(E=h((G=H)/p)),E<B&&(G=h((E=B)*p))):(G=Math.max(H,Math.min(G,D)),C.autoHeight&&"iframe"!==C.type&&(w.width(G),E=w.height()),E=Math.max(B,Math.min(E,I))),C.fitToView)if(w.width(G).height(E),A.width(G+i),T=A.width(),m=A.height(),C.aspectRatio)for(;(T>v||m>b)&&G>H&&E>B&&!(P++>19);)E=Math.max(B,Math.min(I,E-10)),(G=h(E*p))<H&&(E=h((G=H)/p)),G>D&&(E=h((G=D)/p)),w.width(G).height(E),A.width(G+i),T=A.width(),m=A.height();else G=Math.max(H,Math.min(G,G-(T-v))),E=Math.max(B,Math.min(E,E-(m-b)));L&&"auto"===k&&E<c&&G+i+L<v&&(G+=L),w.width(G).height(E),A.width(G+i),T=A.width(),m=A.height(),e=(T>v||m>b)&&G>H&&E>B,t=C.aspectRatio?G<u&&E<d&&G<l&&E<c:(G<u||E<d)&&(G<l||E<c),n.extend(C,{dim:{width:g(T),height:g(m)},origWidth:l,origHeight:c,canShrink:e,canExpand:t,wPadding:i,hPadding:o,wrapSpace:m-M.outerHeight(!0),skinSpace:M.height()-E}),!S&&C.autoHeight&&E>B&&E<I&&!t&&w.height("auto")},_getPosition:function(e){var t=s.current,n=s.getViewport(),i=t.margin,o=s.wrap.width()+i[1]+i[3],r=s.wrap.height()+i[0]+i[2],a={position:"absolute",top:i[0],left:i[3]};return t.autoCenter&&t.fixed&&!e&&r<=n.h&&o<=n.w?a.position="fixed":t.locked||(a.top+=n.y,a.left+=n.x),a.top=g(Math.max(a.top,a.top+(n.h-r)*t.topRatio)),a.left=g(Math.max(a.left,a.left+(n.w-o)*t.leftRatio)),a},_afterZoomIn:function(){var e=s.current;e&&(s.isOpen=s.isOpened=!0,s.wrap.css("overflow","visible").addClass("fancybox-opened").hide().show(0),s.update(),(e.closeClick||e.nextClick&&s.group.length>1)&&s.inner.css("cursor","pointer").bind("click.fb",(function(t){n(t.target).is("a")||n(t.target).parent().is("a")||(t.preventDefault(),s[e.closeClick?"close":"next"]())})),e.closeBtn&&n(e.tpl.closeBtn).appendTo(s.skin).bind("click.fb",(function(e){e.preventDefault(),s.close()})),e.arrows&&s.group.length>1&&((e.loop||e.index>0)&&n(e.tpl.prev).appendTo(s.outer).bind("click.fb",s.prev),(e.loop||e.index<s.group.length-1)&&n(e.tpl.next).appendTo(s.outer).bind("click.fb",s.next)),s.trigger("afterShow"),e.loop||e.index!==e.group.length-1?s.opts.autoPlay&&!s.player.isActive&&(s.opts.autoPlay=!1,s.play(!0)):s.play(!1))},_afterZoomOut:function(e){e=e||s.current,n(".fancybox-wrap").trigger("onReset").remove(),n.extend(s,{group:{},opts:{},router:!1,current:null,isActive:!1,isOpened:!1,isOpen:!1,isClosing:!1,wrap:null,skin:null,outer:null,inner:null}),s.trigger("afterClose",e)}}),s.transitions={getOrigPosition:function(){var e=s.current,t=e.element,n=e.orig,i={},o=50,r=50,a=e.hPadding,l=e.wPadding,c=s.getViewport();return!n&&e.isDom&&t.is(":visible")&&((n=t.find("img:first")).length||(n=t)),d(n)?(i=n.offset(),n.is("img")&&(o=n.outerWidth(),r=n.outerHeight())):(i.top=c.y+(c.h-r)*e.topRatio,i.left=c.x+(c.w-o)*e.leftRatio),("fixed"===s.wrap.css("position")||e.locked)&&(i.top-=c.y,i.left-=c.x),i={top:g(i.top-a*e.topRatio),left:g(i.left-l*e.leftRatio),width:g(o+l),height:g(r+a)}},step:function(e,t){var n,i,o=t.prop,r=s.current,a=r.wrapSpace,l=r.skinSpace;"width"!==o&&"height"!==o||(n=t.end===t.start?1:(e-t.start)/(t.end-t.start),s.isClosing&&(n=1-n),i=e-("width"===o?r.wPadding:r.hPadding),s.skin[o](h("width"===o?i:i-a*n)),s.inner[o](h("width"===o?i:i-a*n-l*n)))},zoomIn:function(){var e=s.current,t=e.pos,i=e.openEffect,o="elastic"===i,r=n.extend({opacity:1},t);delete r.position,o?(t=this.getOrigPosition(),e.openOpacity&&(t.opacity=.1)):"fade"===i&&(t.opacity=.1),s.wrap.css(t).animate(r,{duration:"none"===i?0:e.openSpeed,easing:e.openEasing,step:o?this.step:null,complete:s._afterZoomIn})},zoomOut:function(){var e=s.current,t=e.closeEffect,n="elastic"===t,i={opacity:.1};n&&(i=this.getOrigPosition(),e.closeOpacity&&(i.opacity=.1)),s.wrap.animate(i,{duration:"none"===t?0:e.closeSpeed,easing:e.closeEasing,step:n?this.step:null,complete:s._afterZoomOut})},changeIn:function(){var e,t=s.current,n=t.nextEffect,i=t.pos,o={opacity:1},r=s.direction,a=200;i.opacity=.1,"elastic"===n&&(e="down"===r||"up"===r?"top":"left","down"===r||"right"===r?(i[e]=g(h(i[e])-a),o[e]="+=200px"):(i[e]=g(h(i[e])+a),o[e]="-=200px")),"none"===n?s._afterZoomIn():s.wrap.css(i).animate(o,{duration:t.nextSpeed,easing:t.nextEasing,complete:s._afterZoomIn})},changeOut:function(){var e=s.previous,t=e.prevEffect,i={opacity:.1},o=s.direction;"elastic"===t&&(i["down"===o||"up"===o?"top":"left"]=("up"===o||"left"===o?"-":"+")+"=200px"),e.wrap.animate(i,{duration:"none"===t?0:e.prevSpeed,easing:e.prevEasing,complete:function(){n(this).trigger("onReset").remove()}})}},s.helpers.overlay={defaults:{closeClick:!0,speedOut:200,showEarly:!0,css:{},locked:!u,fixed:!0},overlay:null,fixed:!1,el:n("html"),create:function(e){var t;e=n.extend({},this.defaults,e),this.overlay&&this.close(),t=s.coming?s.coming.parent:e.parent,this.overlay=n('<div class="fancybox-overlay"></div>').appendTo(t&&t.length?t:"body"),this.fixed=!1,e.fixed&&s.defaults.fixed&&(this.overlay.addClass("fancybox-overlay-fixed"),this.fixed=!0)},open:function(e){var t=this;e=n.extend({},this.defaults,e),this.overlay?this.overlay.unbind(".overlay").width("auto").height("auto"):this.create(e),this.fixed||(r.bind("resize.overlay",n.proxy(this.update,this)),this.update()),e.closeClick&&this.overlay.bind("click.overlay",(function(e){if(n(e.target).hasClass("fancybox-overlay"))return s.isActive?s.close():t.close(),!1})),this.overlay.css(e.css).show()},close:function(){r.unbind("resize.overlay"),this.el.hasClass("fancybox-lock")&&(n(".fancybox-margin").removeClass("fancybox-margin"),this.el.removeClass("fancybox-lock"),r.scrollTop(this.scrollV).scrollLeft(this.scrollH)),n(".fancybox-overlay").remove().hide(),n.extend(this,{overlay:null,fixed:!1})},update:function(){var e,n="100%";this.overlay.width(n).height("100%"),l?(e=Math.max(t.documentElement.offsetWidth,t.body.offsetWidth),a.width()>e&&(n=a.width())):a.width()>r.width()&&(n=a.width()),this.overlay.width(n).height(a.height())},onReady:function(e,t){var i=this.overlay;n(".fancybox-overlay").stop(!0,!0),i||this.create(e),e.locked&&this.fixed&&t.fixed&&(t.locked=this.overlay.append(t.wrap),t.fixed=!1),!0===e.showEarly&&this.beforeShow.apply(this,arguments)},beforeShow:function(e,t){t.locked&&!this.el.hasClass("fancybox-lock")&&(!1!==this.fixPosition&&n("*:not(object)").filter((function(){return"fixed"===n(this).css("position")&&!n(this).hasClass("fancybox-overlay")&&!n(this).hasClass("fancybox-wrap")})).addClass("fancybox-margin"),this.el.addClass("fancybox-margin"),this.scrollV=r.scrollTop(),this.scrollH=r.scrollLeft(),this.el.addClass("fancybox-lock"),r.scrollTop(this.scrollV).scrollLeft(this.scrollH)),this.open(e)},onUpdate:function(){this.fixed||this.update()},afterClose:function(e){this.overlay&&!s.coming&&this.overlay.fadeOut(e.speedOut,n.proxy(this.close,this))}},s.helpers.title={defaults:{type:"float",position:"bottom"},beforeShow:function(e){var t,i,o=s.current,r=o.title,a=e.type;if(n.isFunction(r)&&(r=r.call(o.element,o)),p(r)&&""!==n.trim(r)){switch(t=n('<div class="fancybox-title fancybox-title-'+a+'-wrap">'+r+"</div>"),a){case"inside":i=s.skin;break;case"outside":i=s.wrap;break;case"over":i=s.inner;break;default:i=s.skin,t.appendTo("body"),l&&t.width(t.width()),t.wrapInner('<span class="child"></span>'),s.current.margin[2]+=Math.abs(h(t.css("margin-bottom")))}t["top"===e.position?"prependTo":"appendTo"](i)}}},n.fn.fancybox=function(e){var t,i=n(this),o=this.selector||"",r=function(r){var a,l,c=n(this).blur(),u=t;r.ctrlKey||r.altKey||r.shiftKey||r.metaKey||c.is(".fancybox-wrap")||(a=e.groupAttr||"data-fancybox-group",(l=c.attr(a))||(a="rel",l=c.get(0)[a]),l&&""!==l&&"nofollow"!==l&&(u=(c=(c=o.length?n(o):i).filter("["+a+'="'+l+'"]')).index(this)),e.index=u,!1!==s.open(c,e)&&r.preventDefault())};return t=(e=e||{}).index||0,o&&!1!==e.live?a.undelegate(o,"click.fb-start").delegate(o+":not('.fancybox-item, .fancybox-nav')","click.fb-start",r):i.unbind("click.fb-start").bind("click.fb-start",r),this.filter("[data-fancybox-start=1]").trigger("click"),this},a.ready((function(){var t,r,a,l;n.scrollbarWidth===i&&(n.scrollbarWidth=function(){var e=n('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),t=e.children(),i=t.innerWidth()-t.height(99).innerWidth();return e.remove(),i}),n.support.fixedPosition===i&&(n.support.fixedPosition=(a=n('<div style="position:fixed;top:20px;"></div>').appendTo("body"),l=20===a[0].offsetTop||15===a[0].offsetTop,a.remove(),l)),n.extend(s.defaults,{scrollbarWidth:n.scrollbarWidth(),fixed:n.support.fixedPosition,parent:n("body")}),t=n(e).width(),o.addClass("fancybox-lock-test"),r=n(e).width(),o.removeClass("fancybox-lock-test"),n("<style type='text/css'>.fancybox-margin{margin-right:"+(r-t)+"px;}</style>").appendTo("head")}))}(window,document,jQuery);const validateFields=(e,t)=>{t.forEach((e=>{e.removeClass("input-error"),""===e.val().trim()&&e.addClass("input-error")}));return 0===e.find(".input-error").length};$(".form").submit((e=>{e.preventDefault();const t=$(e.currentTarget),n=t.find("[name='name']"),i=t.find("[name='phone']"),o=t.find("[name='comment']"),r=t.find("[name='to']"),a=$("#modal"),s=a.find(".modal__content");a.removeClass("error-modal");if(validateFields(t,[n,i,o,r])){const e=$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:n.val(),phone:i.val(),comment:o.val(),to:r.val()},error:e=>{}});e.done((e=>{s.text(e.message),$(".form")[0].reset()})),e.fail((e=>{const t=e.responseJSON.message;s.text(t),a.addClass("error-modal")})),e.always((()=>{$.fancybox.open({src:"#modal",type:"inline"})}))}})),$(".app-submit-btn").click((e=>{e.preventDefault(),$.fancybox.close()}));let burger=document.querySelector(".hamburger"),overlay=document.querySelector(".overlay"),body=document.querySelector("body"),links=document.querySelectorAll(".menu-mobile__link");function toggleMenu(){burger.classList.toggle("hamburger--active"),overlay.classList.toggle("overlay--active"),body.classList.toggle("body--active-menu")}links.forEach((function(e){e.addEventListener("click",toggleMenu)})),burger.addEventListener("click",toggleMenu);const mesureWidth=e=>{let t=0;const n=$(window).width(),i=e.closest(".products-menu").find(".products-menu__title"),o=i.width()*i.length,r=e.find(".products-menu__container"),a=parseInt(r.css("padding-left")),s=parseInt(r.css("padding-right"));return t=window.matchMedia("(max-width: 768px)").matches?n-o:500,{container:t,textContainer:t-s-a}},closeEveryItemInContainer=e=>{const t=e.find(".products-menu__item"),n=e.find(".products-menu__content");t.removeClass("active"),n.width(0)},openItemNeu=e=>{const t=e.find(".products-menu__content"),n=mesureWidth(e),i=e.find(".products-menu__container");e.addClass("active"),t.width(n.container),i.width(n.textContainer)};let myMap;$(".products-menu__title").on("click",(e=>{e.preventDefault();const t=$(e.currentTarget),n=t.closest(".products-menu__item"),i=n.hasClass("active"),o=t.closest(".products-menu");i?closeEveryItemInContainer(o):(closeEveryItemInContainer(o),openItemNeu(n))})),$(".products-menu__close").on("click",(e=>{e.preventDefault(),closeEveryItemInContainer($(".products-menu"))}));const init=()=>{myMap=new ymaps.Map("map",{center:[59.93916998692174,30.309015096732622],zoom:11,controls:[]});let e=[[59.94554327989287,30.38935262114668],[59.91142323563909,30.50024587065841],[59.88693161784606,30.319658102103713],[59.97033574821672,30.315194906302924]],t=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"./img/icons/marker.svg",iconImageSize:[46,57],iconImageOffset:[-35,-52]});for(let n=0;n<e.length;n++)t.add(new ymaps.Placemark(e[n]));myMap.geoObjects.add(t),myMap.behaviors.disable("scrollZoom")};let player;ymaps.ready(init);const playerContainer=$(".player");let eventsInit=()=>{$(".player__start").click((e=>{e.preventDefault(),playerContainer.hasClass("paused")?player.pauseVideo():player.playVideo()})),$(".player__playback").click((e=>{const t=$(e.currentTarget),n=e.originalEvent.layerX/t.width()*100,i=player.getDuration()/100*n;$(".player__playback-button").css({left:`${n}%`}),player.seekTo(i)})),$(".player__splash").click((e=>{player.playVideo()}))};const formatTime=e=>{const t=Math.round(e),n=i(Math.floor(t/60));function i(e){return e<10?`0${e}`:e}return`${n} : ${i(t-60*n)}`},onPlayerReady=()=>{let e;const t=player.getDuration();$(".player__duration-estimate").text(formatTime(t)),void 0!==e&&clearInterval(e),e=setInterval((()=>{const e=player.getCurrentTime(),n=e/t*100;$(".player__playback-button").css({left:`${n}%`}),$(".player__duration-completed").text(formatTime(e))}),1e3)},onPlayerStateChange=e=>{switch(e.data){case 1:playerContainer.addClass("active"),playerContainer.addClass("paused");break;case 2:playerContainer.removeClass("active"),playerContainer.removeClass("paused")}};function onYouTubeIframeAPIReady(){player=new YT.Player("yt-player",{height:"405",width:"660",videoId:"gd-P9FH2WQ4",events:{onReady:onPlayerReady,onStateChange:onPlayerStateChange},playerVars:{controls:0,disablekb:0,showinfo:0,rel:0,autoplay:0,modestbranding:0}})}eventsInit();class SlideShow{constructor(e,t={}){this.target=document.querySelector(e),this.content=this.target.querySelector("[data-show-content]"),this.items=Array.from(this.content.children),this.nav=this.target.querySelector("[data-show-nav]"),this.setPositionItems(),this.setAnimation(t.animate),this.setActiveSlide(t.active),this.nav.addEventListener("click",(e=>{e.preventDefault();const t=e.target.closest("[data-show-link]");t&&this.setActiveSlide(parseInt(t.dataset.showLink))}))}setAnimation(e={}){this.items.forEach((t=>{t.style.transition=`opacity ${e.time||1}s ${e.mode||"ease"}`}))}setPositionItems(){this.content.style.position="relative";for(const e of this.items)e.style.position="absolute",e.style.top=0,e.style.opacity=0}setActiveSlide(e=1){this.items.forEach(((t,n)=>{e===n+1?(t.style.position="relative",t.style.opacity=1,t.style.zIndex=20):(t.style.position="absolute",t.style.opacity=0,t.style.zIndex=0)})),this.setActiveNav(e)}setActiveNav(e){for(const t of this.nav.children)t===this.nav.children[e-1]?t.classList.add(`${t.classList[0]}--active`):t.classList.remove(`${t.classList[0]}--active`)}}const slide=new SlideShow(".slide-show",{active:1,animate:{time:2,mode:"ease-in"}}),sections=$("section"),display=$(".maincontent"),sideMenu=$(".fixed-menu"),menuItems=sideMenu.find(".fixed-menu__item"),mobileDetect=new MobileDetect(window.navigator.userAgent),isMobile=mobileDetect.mobile();let inScroll=!1;sections.first().addClass("active");const countSectionPosition=e=>{const t=-100*e;return isNaN(t)?(console.error("Ð¿ÐµÑÐµÐ´Ð°Ð½Ð¾ Ð½Ðµ Ð²ÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ Ð² countSectionPosition"),0):t},changeMenuThemeForSection=e=>{const t="fixed-menu--shadowed";"black"===sections.eq(e).attr("data-sidemenu-theme")?sideMenu.addClass(t):sideMenu.removeClass(t)},resetActiveClassForItem=(e,t,n)=>{e.eq(t).addClass(n).siblings().removeClass(n)},perfomTransition=e=>{if(inScroll)return;inScroll=!0;const t=countSectionPosition(e);changeMenuThemeForSection(e),display.css({transform:`translateY(${t}%)`}),resetActiveClassForItem(sections,e,"active"),setTimeout((()=>{inScroll=!1,resetActiveClassForItem(menuItems,e,"fixed-menu__item--active")}),1300)},viewportScroller=()=>{const e=sections.filter(".active"),t=e.next(),n=e.prev();return{next(){t.length&&perfomTransition(t.index())},prev(){n.length&&perfomTransition(n.index())}}};$(window).on("wheel",(e=>{const t=e.originalEvent.deltaY,n=viewportScroller();t>0&&n.next(),t<0&&n.prev()})),$(window).on("keydown",(e=>{const t=e.target.tagName.toLowerCase(),n="input"===t||"textarea"===t,i=viewportScroller();if(!n)switch(e.keyCode){case 38:i.prev();break;case 40:i.next()}})),$(".wrapper").on("touchmove",(e=>e.preventDefault())),$("[data-scroll-to]").click((e=>{e.preventDefault();const t=$(e.currentTarget).attr("data-scroll-to"),n=$(`[data-section-id=${t}]`);perfomTransition(n.index())})),isMobile&&$("body").swipe({swipe:function(e,t){let n="";"up"===t&&(n="next"),"down"===t&&(n="prev"),viewportScroller()[n]()}});const slider=$(".products").bxSlider({pager:!1,controls:!1,speed:800});$(".product-slider__arrow--direction--prev").click((e=>{e.preventDefault(),slider.goToPrevSlide()})),$(".product-slider__arrow--direction--next").click((e=>{e.preventDefault(),slider.goToNextSlide()}));const openItem=e=>{const t=e.closest(".team__item"),n=t.find(".team__content"),i=n.find(".team__content-block").height();t.addClass("active-team"),n.height(i)},closeEveryItem=e=>{const t=e.find(".team__content");e.find(".team__item").removeClass("active-team"),t.height(0)};$(".team__title").click((e=>{const t=$(e.currentTarget),n=t.closest(".team");t.closest(".team__item").hasClass("active-team")?closeEveryItem(n):(closeEveryItem(n),openItem(t))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIm1vYmlsZS1kZXRlY3QuanMiLCJqcXVlcnkudG91Y2hTd2lwZS5qcyIsImpxdWVyeS5ieHNsaWRlci5qcyIsImpxdWVyeS5mYW5jeWJveC5qcyIsImZvcm0uanMiLCJoYW1idXJnZXIuanMiLCJob3Jpei1hY2NvcmRpb24uanMiLCJtYXAuanMiLCJwbGF5ZXIuanMiLCJyZXZpZXdzLmpzIiwic2VjdGlvbi5qcyIsInNsaWRlci5qcyIsInRlYW0uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNhbGwiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJpIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwiaXNBcnJheUxpa2UiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIl9pIiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0Iiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwiYXJncyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJfbWF0Y2hJbmRleGVzIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIm9iamVjdCIsIl8iLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJncmlkQXJlYSIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblN0YXJ0IiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3RhcnQiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGV4dCBzY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJkZWZpbmUiLCJhbWQiLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsImltcGwiLCJtb2JpbGVEZXRlY3RSdWxlcyIsInBob25lcyIsImlQaG9uZSIsIkJsYWNrQmVycnkiLCJIVEMiLCJOZXh1cyIsIkRlbGwiLCJNb3Rvcm9sYSIsIlNhbXN1bmciLCJMRyIsIlNvbnkiLCJBc3VzIiwiTm9raWFMdW1pYSIsIk1pY3JvbWF4IiwiUGFsbSIsIlZlcnR1IiwiUGFudGVjaCIsIkZseSIsIldpa28iLCJpTW9iaWxlIiwiU2ltVmFsbGV5IiwiV29sZmdhbmciLCJBbGNhdGVsIiwiTmludGVuZG8iLCJBbW9pIiwiSU5RIiwiT25lUGx1cyIsIkdlbmVyaWNQaG9uZSIsInRhYmxldHMiLCJpUGFkIiwiTmV4dXNUYWJsZXQiLCJHb29nbGVUYWJsZXQiLCJTYW1zdW5nVGFibGV0IiwiS2luZGxlIiwiU3VyZmFjZVRhYmxldCIsIkhQVGFibGV0IiwiQXN1c1RhYmxldCIsIkJsYWNrQmVycnlUYWJsZXQiLCJIVEN0YWJsZXQiLCJNb3Rvcm9sYVRhYmxldCIsIk5vb2tUYWJsZXQiLCJBY2VyVGFibGV0IiwiVG9zaGliYVRhYmxldCIsIkxHVGFibGV0IiwiRnVqaXRzdVRhYmxldCIsIlByZXN0aWdpb1RhYmxldCIsIkxlbm92b1RhYmxldCIsIkRlbGxUYWJsZXQiLCJZYXJ2aWtUYWJsZXQiLCJNZWRpb25UYWJsZXQiLCJBcm5vdmFUYWJsZXQiLCJJbnRlbnNvVGFibGV0IiwiSVJVVGFibGV0IiwiTWVnYWZvblRhYmxldCIsIkVib2RhVGFibGV0IiwiQWxsVmlld1RhYmxldCIsIkFyY2hvc1RhYmxldCIsIkFpbm9sVGFibGV0IiwiTm9raWFMdW1pYVRhYmxldCIsIlNvbnlUYWJsZXQiLCJQaGlsaXBzVGFibGV0IiwiQ3ViZVRhYmxldCIsIkNvYnlUYWJsZXQiLCJNSURUYWJsZXQiLCJNU0lUYWJsZXQiLCJTTWlUVGFibGV0IiwiUm9ja0NoaXBUYWJsZXQiLCJGbHlUYWJsZXQiLCJicVRhYmxldCIsIkh1YXdlaVRhYmxldCIsIk5lY1RhYmxldCIsIlBhbnRlY2hUYWJsZXQiLCJCcm9uY2hvVGFibGV0IiwiVmVyc3VzVGFibGV0IiwiWnluY1RhYmxldCIsIlBvc2l0aXZvVGFibGV0IiwiTmFiaVRhYmxldCIsIktvYm9UYWJsZXQiLCJEYW5ld1RhYmxldCIsIlRleGV0VGFibGV0IiwiUGxheXN0YXRpb25UYWJsZXQiLCJUcmVrc3RvclRhYmxldCIsIlB5bGVBdWRpb1RhYmxldCIsIkFkdmFuVGFibGV0IiwiRGFueVRlY2hUYWJsZXQiLCJHYWxhcGFkVGFibGV0IiwiTWljcm9tYXhUYWJsZXQiLCJLYXJib25uVGFibGV0IiwiQWxsRmluZVRhYmxldCIsIlBST1NDQU5UYWJsZXQiLCJZT05FU1RhYmxldCIsIkNoYW5nSmlhVGFibGV0IiwiR1VUYWJsZXQiLCJQb2ludE9mVmlld1RhYmxldCIsIk92ZXJtYXhUYWJsZXQiLCJIQ0xUYWJsZXQiLCJEUFNUYWJsZXQiLCJWaXN0dXJlVGFibGV0IiwiQ3Jlc3RhVGFibGV0IiwiTWVkaWF0ZWtUYWJsZXQiLCJDb25jb3JkZVRhYmxldCIsIkdvQ2xldmVyVGFibGV0IiwiTW9kZWNvbVRhYmxldCIsIlZvbmlub1RhYmxldCIsIkVDU1RhYmxldCIsIlN0b3JleFRhYmxldCIsIlZvZGFmb25lVGFibGV0IiwiRXNzZW50aWVsQlRhYmxldCIsIlJvc3NNb29yVGFibGV0IiwiaU1vYmlsZVRhYmxldCIsIlRvbGlub1RhYmxldCIsIkF1ZGlvU29uaWNUYWJsZXQiLCJBTVBFVGFibGV0IiwiU2trVGFibGV0IiwiVGVjbm9UYWJsZXQiLCJKWERUYWJsZXQiLCJpSm95VGFibGV0IiwiRlgyVGFibGV0IiwiWG9yb1RhYmxldCIsIlZpZXdzb25pY1RhYmxldCIsIlZlcml6b25UYWJsZXQiLCJPZHlzVGFibGV0IiwiQ2FwdGl2YVRhYmxldCIsIkljb25iaXRUYWJsZXQiLCJUZWNsYXN0VGFibGV0IiwiT25kYVRhYmxldCIsIkpheXRlY2hUYWJsZXQiLCJCbGF1cHVua3RUYWJsZXQiLCJEaWdtYVRhYmxldCIsIkV2b2xpb1RhYmxldCIsIkxhdmFUYWJsZXQiLCJBb2NUYWJsZXQiLCJNcG1hblRhYmxldCIsIkNlbGtvblRhYmxldCIsIldvbGRlclRhYmxldCIsIk1lZGlhY29tVGFibGV0IiwiTWlUYWJsZXQiLCJOaWJpcnVUYWJsZXQiLCJOZXhvVGFibGV0IiwiTGVhZGVyVGFibGV0IiwiVWJpc2xhdGVUYWJsZXQiLCJQb2NrZXRCb29rVGFibGV0IiwiS29jYXNvVGFibGV0IiwiSGlzZW5zZVRhYmxldCIsIkh1ZGwiLCJUZWxzdHJhVGFibGV0IiwiR2VuZXJpY1RhYmxldCIsIm9zcyIsIkFuZHJvaWRPUyIsIkJsYWNrQmVycnlPUyIsIlBhbG1PUyIsIlN5bWJpYW5PUyIsIldpbmRvd3NNb2JpbGVPUyIsIldpbmRvd3NQaG9uZU9TIiwiaU9TIiwiaVBhZE9TIiwiTWVlR29PUyIsIk1hZW1vT1MiLCJKYXZhT1MiLCJ3ZWJPUyIsImJhZGFPUyIsIkJSRVdPUyIsInVhcyIsIkNocm9tZSIsIkRvbGZpbiIsIk9wZXJhIiwiU2t5ZmlyZSIsIkVkZ2UiLCJJRSIsIkZpcmVmb3giLCJCb2x0IiwiVGVhU2hhcmsiLCJCbGF6ZXIiLCJTYWZhcmkiLCJXZUNoYXQiLCJVQ0Jyb3dzZXIiLCJiYWlkdWJveGFwcCIsImJhaWR1YnJvd3NlciIsIkRpaWdvQnJvd3NlciIsIk1lcmN1cnkiLCJPYmlnb0Jyb3dzZXIiLCJOZXRGcm9udCIsIkdlbmVyaWNCcm93c2VyIiwiUGFsZU1vb24iLCJNb2JpbGUiLCJCdWlsZCIsIlZlcnNpb24iLCJWZW5kb3JJRCIsImlQb2QiLCJDb2FzdCIsIkZlbm5lYyIsIk5va2lhQnJvd3NlciIsIk9wZXJhIE1pbmkiLCJPcGVyYSBNb2JpIiwiTVFRQnJvd3NlciIsIk1pY3JvTWVzc2VuZ2VyIiwiU2Ftc3VuZ0Jyb3dzZXIiLCJJcm9uIiwiVGl6ZW4iLCJXZWJraXQiLCJHZWNrbyIsIlRyaWRlbnQiLCJQcmVzdG8iLCJHb2FubmEiLCJBbmRyb2lkIiwiQlJFVyIsIkphdmEiLCJXaW5kb3dzIFBob25lIE9TIiwiV2luZG93cyBQaG9uZSIsIldpbmRvd3MgQ0UiLCJXaW5kb3dzIE5UIiwiU3ltYmlhbiIsInV0aWxzIiwiQm90IiwiTW9iaWxlQm90IiwiRGVza3RvcE1vZGUiLCJUViIsIldlYktpdCIsIkNvbnNvbGUiLCJXYXRjaCIsImRldGVjdE1vYmlsZUJyb3dzZXJzIiwiZnVsbFBhdHRlcm4iLCJzaG9ydFBhdHRlcm4iLCJ0YWJsZXRQYXR0ZXJuIiwiaGFzT3duUHJvcCIsImVxdWFsSUMiLCJjb250YWluc0lDIiwidmFsdWVMQyIsImNvbnZlcnRQcm9wc1RvUmVnRXhwIiwiTW9iaWxlRGV0ZWN0IiwidXNlckFnZW50IiwibWF4UGhvbmVXaWR0aCIsInVhIiwic3Vic3RyIiwicHJlcGFyZVVzZXJBZ2VudCIsIl9jYWNoZSIsIkZBTExCQUNLX1BIT05FIiwiRkFMTEJBQ0tfVEFCTEVUIiwiRkFMTEJBQ0tfTU9CSUxFIiwidmVyUG9zIiwic3Vic3RyaW5nIiwib3NzMCIsImZpbmRNYXRjaCIsInJ1bGVzIiwiZmluZE1hdGNoZXMiLCJnZXRWZXJzaW9uU3RyIiwicHJvcGVydHlOYW1lIiwicGF0dGVybnMiLCJnZXRWZXJzaW9uIiwicHJlcGFyZVZlcnNpb25ObyIsIk5hTiIsIm51bWJlcnMiLCJOdW1iZXIiLCJpc01vYmlsZUZhbGxiYWNrIiwiaXNUYWJsZXRGYWxsYmFjayIsInByZXBhcmVEZXRlY3Rpb25DYWNoZSIsIm1vYmlsZSIsInBob25lIiwidGFibGV0IiwicGhvbmVTaXplZCIsImlzUGhvbmVTaXplZCIsIm1vYmlsZUdyYWRlIiwiJGlzTW9iaWxlIiwib3MiLCJkZXRlY3RPUyIsImdldERldmljZVNtYWxsZXJTaWRlIiwic2NyZWVuIiwidXNlckFnZW50cyIsInZlcnNpb25TdHIiLCJncmFkZSIsIl9pbXBsIiwicmVxdWlyZSIsIkxFRlQiLCJSSUdIVCIsIlVQIiwiRE9XTiIsIklOIiwiT1VUIiwiTk9ORSIsIkFVVE8iLCJTV0lQRSIsIlBJTkNIIiwiVEFQIiwiRE9VQkxFX1RBUCIsIkxPTkdfVEFQIiwiSE9SSVpPTlRBTCIsIlZFUlRJQ0FMIiwiQUxMX0ZJTkdFUlMiLCJQSEFTRV9TVEFSVCIsIlBIQVNFX01PVkUiLCJQSEFTRV9FTkQiLCJQSEFTRV9DQU5DRUwiLCJTVVBQT1JUU19UT1VDSCIsIlNVUFBPUlRTX1BPSU5URVJfSUUxMCIsIm5hdmlnYXRvciIsIm1zUG9pbnRlckVuYWJsZWQiLCJQb2ludGVyRXZlbnQiLCJTVVBQT1JUU19QT0lOVEVSIiwiUExVR0lOX05TIiwiYWxsb3dQYWdlU2Nyb2xsIiwic3dpcGUiLCJzd2lwZVN0YXR1cyIsInRhcCIsImRlZmF1bHRzIiwiJHRoaXMiLCJwbHVnaW4iLCJUb3VjaFN3aXBlIiwiZWxlbWVudCIsInVzZVRvdWNoRXZlbnRzIiwiZmFsbGJhY2tUb01vdXNlRXZlbnRzIiwiU1RBUlRfRVYiLCJNT1ZFX0VWIiwiRU5EX0VWIiwiTEVBVkVfRVYiLCJDQU5DRUxfRVYiLCJkaXN0YW5jZSIsImRpcmVjdGlvbiIsImN1cnJlbnREaXJlY3Rpb24iLCJzdGFydFRvdWNoZXNEaXN0YW5jZSIsImVuZFRvdWNoZXNEaXN0YW5jZSIsInBpbmNoWm9vbSIsInBpbmNoRGlzdGFuY2UiLCJwaW5jaERpcmVjdGlvbiIsIm1heGltdW1zTWFwIiwiJGVsZW1lbnQiLCJwaGFzZSIsImZpbmdlckNvdW50IiwiZmluZ2VyRGF0YSIsImVuZFRpbWUiLCJwcmV2aW91c1RvdWNoRW5kVGltZSIsImZpbmdlckNvdW50QXRSZWxlYXNlIiwiZG91YmxlVGFwU3RhcnRUaW1lIiwic2luZ2xlVGFwVGltZW91dCIsImhvbGRUaW1lb3V0IiwidG91Y2hTdGFydCIsInRvdWNoQ2FuY2VsIiwianFFdmVudCIsImV4Y2x1ZGVkRWxlbWVudHMiLCJtYXhEYXRhIiwicHJldmVudERlZmF1bHRFdmVudHMiLCJjcmVhdGVNYXhpbXVtVk8iLCJjYW5jZWxNdWx0aUZpbmdlclJlbGVhc2UiLCJjcmVhdGVGaW5nZXJEYXRhIiwiZmluZ2VycyIsImhhc1BpbmNoZXMiLCJnZXRUaW1lU3RhbXAiLCJjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UiLCJwaW5jaFN0YXR1cyIsImxvbmdUYXBUaHJlc2hvbGQiLCJzZXRUb3VjaEluUHJvZ3Jlc3MiLCJ0b3VjaE1vdmUiLCJpbk11bHRpRmluZ2VyUmVsZWFzZSIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImN1cnJlbnRGaW5nZXIiLCJ1cGRhdGVGaW5nZXJEYXRhIiwidG9GaXhlZCIsImFicyIsImNhbGN1bGF0ZURpcmVjdGlvbiIsImF1dG8iLCJzd2lwZUxlZnQiLCJzd2lwZVJpZ2h0Iiwic3dpcGVVcCIsInN3aXBlRG93biIsInZhbGlkYXRlRGVmYXVsdEV2ZW50Iiwic3FydCIsInBvdyIsIngiLCJ5IiwiY2FsY3VsYXRlRHVyYXRpb24iLCJnZXRNYXhEaXN0YW5jZSIsInNldE1heERpc3RhbmNlIiwidHJpZ2dlck9uVG91Y2hFbmQiLCJ0cmlnZ2VyT25Ub3VjaExlYXZlIiwiaW5Cb3VuZHMiLCJib3VuZHMiLCJvdXRlcldpZHRoIiwiYm90dG9tIiwib3V0ZXJIZWlnaHQiLCJwb2ludCIsImlzSW5Cb3VuZHMiLCJnZXROZXh0UGhhc2UiLCJ0b3VjaEVuZCIsInN0YXJ0TXVsdGlGaW5nZXJSZWxlYXNlIiwiZGlkU3dpcGVCYWNrVG9DYW5jZWwiLCJ2YWxpZGF0ZVN3aXBlRGlzdGFuY2UiLCJoYXNUYXAiLCJ0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUiLCJ0b3VjaExlYXZlIiwicmVtb3ZlTGlzdGVuZXJzIiwiY3VycmVudFBoYXNlIiwibmV4dFBoYXNlIiwidmFsaWRUaW1lIiwidmFsaWRhdGVTd2lwZVRpbWUiLCJ2YWxpZERpc3RhbmNlIiwiZGlkQ2FuY2VsIiwidmFsaWRhdGVTd2lwZSIsImhhc1N3aXBlcyIsInZhbGlkYXRlUGluY2giLCJ2YWxpZGF0ZURvdWJsZVRhcCIsImhhc0RvdWJsZVRhcCIsInRocmVzaG9sZCIsImdlc3R1cmUiLCJwaW5jaEluIiwicGluY2hPdXQiLCJkb3VibGVUYXBUaHJlc2hvbGQiLCJkb3VibGVUYXAiLCJsb25nVGFwIiwidmFsaWQiLCJjYW5jZWxsZWQiLCJjYW5jZWxUaHJlc2hvbGQiLCJtYXhUaW1lVGhyZXNob2xkIiwiaGFzQ29ycmVjdEZpbmdlckNvdW50IiwidmFsaWRhdGVGaW5nZXJzIiwiaGFzRW5kUG9pbnQiLCJ2YWxpZGF0ZUVuZFBvaW50IiwiaGFzQ29ycmVjdERpc3RhbmNlIiwicGluY2hUaHJlc2hvbGQiLCJoYXNWYWxpZFRpbWUiLCJoYXNWYWxpZERpc3RhbmNlIiwid2l0aGluVGhyZXNob2xkIiwiZmluZ2VyUmVsZWFzZVRocmVzaG9sZCIsImYiLCJnZXRGaW5nZXJEYXRhIiwiZGlmZlgiLCJkaWZmWSIsInBvaW50QiIsInBvaW50QSIsImFuZ2xlIiwiciIsImF0YW4yIiwiY2FsY3VsYXRlQW5nbGUiLCJnZXRUaW1lIiwiZW5hYmxlIiwiZGVzdHJveSIsInByb3BlcnR5IiwicGhhc2VzIiwiZGlyZWN0aW9ucyIsInBhZ2VTY3JvbGwiLCJPTkUiLCJUV08iLCJUSFJFRSIsIkZPVVIiLCJGSVZFIiwiQUxMIiwibW9kZSIsInNsaWRlU2VsZWN0b3IiLCJpbmZpbml0ZUxvb3AiLCJoaWRlQ29udHJvbE9uRW5kIiwic2xpZGVNYXJnaW4iLCJzdGFydFNsaWRlIiwicmFuZG9tU3RhcnQiLCJjYXB0aW9ucyIsInRpY2tlciIsInRpY2tlckhvdmVyIiwiYWRhcHRpdmVIZWlnaHQiLCJhZGFwdGl2ZUhlaWdodFNwZWVkIiwidmlkZW8iLCJ1c2VDU1MiLCJwcmVsb2FkSW1hZ2VzIiwicmVzcG9uc2l2ZSIsInNsaWRlWkluZGV4Iiwid3JhcHBlckNsYXNzIiwidG91Y2hFbmFibGVkIiwic3dpcGVUaHJlc2hvbGQiLCJvbmVUb09uZVRvdWNoIiwicHJldmVudERlZmF1bHRTd2lwZVgiLCJwcmV2ZW50RGVmYXVsdFN3aXBlWSIsImFyaWFMaXZlIiwiYXJpYUhpZGRlbiIsImtleWJvYXJkRW5hYmxlZCIsInBhZ2VyIiwicGFnZXJUeXBlIiwicGFnZXJTaG9ydFNlcGFyYXRvciIsInBhZ2VyU2VsZWN0b3IiLCJidWlsZFBhZ2VyIiwicGFnZXJDdXN0b20iLCJjb250cm9scyIsIm5leHRUZXh0IiwicHJldlRleHQiLCJuZXh0U2VsZWN0b3IiLCJwcmV2U2VsZWN0b3IiLCJhdXRvQ29udHJvbHMiLCJzdGFydFRleHQiLCJzdG9wVGV4dCIsImF1dG9Db250cm9sc0NvbWJpbmUiLCJhdXRvQ29udHJvbHNTZWxlY3RvciIsInBhdXNlIiwiYXV0b1N0YXJ0IiwiYXV0b0RpcmVjdGlvbiIsInN0b3BBdXRvT25DbGljayIsImF1dG9Ib3ZlciIsImF1dG9EZWxheSIsImF1dG9TbGlkZUZvck9uZVBhZ2UiLCJtaW5TbGlkZXMiLCJtYXhTbGlkZXMiLCJtb3ZlU2xpZGVzIiwic2xpZGVXaWR0aCIsInNocmlua0l0ZW1zIiwib25TbGlkZXJMb2FkIiwib25TbGlkZUJlZm9yZSIsIm9uU2xpZGVBZnRlciIsIm9uU2xpZGVOZXh0Iiwib25TbGlkZVByZXYiLCJvblNsaWRlclJlc2l6ZSIsIm9uQXV0b0NoYW5nZSIsImJ4U2xpZGVyIiwic2xpZGVyIiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJmbG9vciIsImNhcm91c2VsIiwibWluVGhyZXNob2xkIiwibWF4VGhyZXNob2xkIiwid29ya2luZyIsImFuaW1Qcm9wIiwidXNpbmdDU1MiLCJjc3NQcmVmaXgiLCJwcmVsb2FkU2VsZWN0b3IiLCJ2aWV3cG9ydCIsImxvYWRlciIsImdldFZpZXdwb3J0TWF4V2lkdGgiLCJmbG9hdCIsImxpc3RTdHlsZSIsImdldFNsaWRlV2lkdGgiLCJhcHBlbmRDYXB0aW9ucyIsImdldFBhZ2VyUXR5IiwiZml0VmlkcyIsImFwcGVuZENvbnRyb2xzIiwiYXBwZW5kQ29udHJvbHNBdXRvIiwiYXBwZW5kUGFnZXIiLCJsb2FkRWxlbWVudHMiLCJ0b3RhbCIsInNsaWNlQXBwZW5kIiwic2xpY2VQcmVwZW5kIiwic2V0U2xpZGVQb3NpdGlvbiIsImdldFZpZXdwb3J0SGVpZ2h0IiwicmVkcmF3U2xpZGVyIiwiaW5pdGlhbGl6ZWQiLCJyZXNpemVXaW5kb3ciLCJpbml0QXV0byIsImluaXRUaWNrZXIiLCJ1cGRhdGVQYWdlckFjdGl2ZSIsInVwZGF0ZURpcmVjdGlvbkNvbnRyb2xzIiwiaW5pdFRvdWNoIiwia2V5ZG93biIsImtleVByZXNzIiwiY3VycmVudEluZGV4IiwiZ2V0TW92ZUJ5IiwibmV3RWxXaWR0aCIsIndyYXBXaWR0aCIsImdldE51bWJlclNsaWRlc1Nob3dpbmciLCJzbGlkZXNTaG93aW5nIiwiY2hpbGRXaWR0aCIsInBhZ2VyUXR5IiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJsYXN0U2hvd2luZ0luZGV4Iiwic2V0UG9zaXRpb25Qcm9wZXJ0eSIsImFuaW1hdGVPYmoiLCJwcm9wVmFsdWUiLCJ1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbiIsInJlc2V0VmFsdWUiLCJ0aWNrZXJMb29wIiwicG9wdWxhdGVQYWdlciIsInBhZ2VySHRtbCIsImxpbmtDb250ZW50IiwicGFnZXJFbCIsImNsaWNrUGFnZXJCaW5kIiwiY2xpY2tOZXh0QmluZCIsImNsaWNrUHJldkJpbmQiLCJkaXJlY3Rpb25FbCIsImF1dG9FbCIsImNsaWNrU3RhcnRCaW5kIiwiY2xpY2tTdG9wQmluZCIsInVwZGF0ZUF1dG9Db250cm9scyIsInRpdGxlIiwic3RvcEF1dG8iLCJnb1RvTmV4dFNsaWRlIiwiZ29Ub1ByZXZTbGlkZSIsInN0YXJ0QXV0byIsInBhZ2VyTGluayIsInBhZ2VySW5kZXgiLCJnb1RvU2xpZGUiLCJzbGlkZUluZGV4Iiwib2xkSW5kZXgiLCJ3aW5kb3dGb2N1c0hhbmRsZXIiLCJ3aW5kb3dCbHVySGFuZGxlciIsImF1dG9QYXVzZWQiLCJ0cmFuc2Zvcm0iLCJyYXRpbyIsIm5ld1NwZWVkIiwidG90YWxEaW1lbnMiLCJzdGFydFBvc2l0aW9uIiwicmVzdW1lU3BlZWQiLCJhbmltYXRlUHJvcGVydHkiLCJhY3RpdmVFbGVtZW50VGFnIiwidGFnTmFtZSIsImlzT25TY3JlZW4iLCJ0b3VjaCIsIm9uVG91Y2hTdGFydCIsIm9yaWdpbmFsUG9zIiwidG91Y2hQb2ludHMiLCJzZXRQb2ludGVyQ2FwdHVyZSIsIm9yaWdpbmFsQ2xpY2tUYXJnZXQiLCJvcmlnaW5hbFRhcmdldCIsIm9yaWdpbmFsQ2xpY2tCdXR0b24iLCJvcmlnaW5hbENsaWNrQnV0dG9ucyIsIm9yaWdpbmFsRXZlbnRUeXBlIiwiaGFzTW92ZSIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIm9uUG9pbnRlckNhbmNlbCIsInJlbGVhc2VQb2ludGVyQ2FwdHVyZSIsInhNb3ZlbWVudCIsInlNb3ZlbWVudCIsImNoYW5nZSIsIndpbmRvd1dpZHRoTmV3Iiwid2luZG93SGVpZ2h0TmV3IiwiYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyIsInN0YXJ0VmlzaWJsZUluZGV4IiwibnVtYmVyT2ZTbGlkZXNTaG93aW5nIiwicmVxdWVzdEVsIiwicGVyZm9ybVRyYW5zaXRpb24iLCJtb3ZlQnkiLCJzZXRTbGlkZUluZGV4IiwicHJldmVudENvbnRyb2xVcGRhdGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJnZXRDdXJyZW50U2xpZGUiLCJnZXRDdXJyZW50U2xpZGVFbGVtZW50IiwiZ2V0U2xpZGVFbGVtZW50IiwiZ2V0U2xpZGVDb3VudCIsImlzV29ya2luZyIsImRlc3Ryb3lTbGlkZXIiLCJyZWxvYWRTbGlkZXIiLCJIIiwiVyIsIkQiLCJGIiwiZmFuY3lib3giLCJkaWRVcGRhdGUiLCJpc1RvdWNoIiwiY3JlYXRlVG91Y2giLCJpc1F1ZXJ5IiwiaXNTdHJpbmciLCJzdHIiLCJpc1BlcmNlbnRhZ2UiLCJnZXRTY2FsYXIiLCJkaW0iLCJnZXRWaWV3cG9ydCIsImdldFZhbHVlIiwibWluSGVpZ2h0IiwibWF4SGVpZ2h0IiwicGl4ZWxSYXRpbyIsImF1dG9TaXplIiwiYXV0b0hlaWdodCIsImF1dG9XaWR0aCIsImF1dG9SZXNpemUiLCJhdXRvQ2VudGVyIiwiZml0VG9WaWV3IiwiYXNwZWN0UmF0aW8iLCJ0b3BSYXRpbyIsImxlZnRSYXRpbyIsInNjcm9sbGluZyIsIndyYXBDU1MiLCJhcnJvd3MiLCJjbG9zZUJ0biIsImNsb3NlQ2xpY2siLCJuZXh0Q2xpY2siLCJtb3VzZVdoZWVsIiwiYXV0b1BsYXkiLCJwbGF5U3BlZWQiLCJwcmVsb2FkIiwibW9kYWwiLCJsb29wIiwiWC1mYW5jeUJveCIsImlmcmFtZSIsInN3ZiIsIndtb2RlIiwiYWxsb3dmdWxsc2NyZWVuIiwiYWxsb3dzY3JpcHRhY2Nlc3MiLCIxMyIsIjM0IiwiMzkiLCI0MCIsIjgiLCIzMyIsIjM3IiwiMzgiLCJjbG9zZSIsInBsYXkiLCJzY3JvbGxPdXRzaWRlIiwidHBsIiwibG9hZGluZyIsIm9wZW5FZmZlY3QiLCJvcGVuU3BlZWQiLCJvcGVuRWFzaW5nIiwib3Blbk9wYWNpdHkiLCJvcGVuTWV0aG9kIiwiY2xvc2VFZmZlY3QiLCJjbG9zZVNwZWVkIiwiY2xvc2VFYXNpbmciLCJjbG9zZU9wYWNpdHkiLCJjbG9zZU1ldGhvZCIsIm5leHRFZmZlY3QiLCJuZXh0U3BlZWQiLCJuZXh0RWFzaW5nIiwibmV4dE1ldGhvZCIsInByZXZFZmZlY3QiLCJwcmV2U3BlZWQiLCJwcmV2RWFzaW5nIiwicHJldk1ldGhvZCIsImhlbHBlcnMiLCJvdmVybGF5Iiwib25DYW5jZWwiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNoYW5nZSIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsImdyb3VwIiwicHJldmlvdXMiLCJjb21pbmciLCJpc0FjdGl2ZSIsImlzT3BlbiIsImlzT3BlbmVkIiwic2tpbiIsIm91dGVyIiwiaW5uZXIiLCJwbGF5ZXIiLCJhamF4TG9hZCIsImltZ1ByZWxvYWQiLCJ0cmFuc2l0aW9ucyIsInJleiIsImhyZWZQYXJ0cyIsImlzRG9tIiwibWV0YWRhdGEiLCJpc0ltYWdlIiwiaXNTV0YiLCJjaGFyQXQiLCJfc3RhcnQiLCJjYW5jZWwiLCJoaWRlTG9hZGluZyIsIl9hZnRlclpvb21PdXQiLCJ1bmJpbmRFdmVudHMiLCJpc0Nsb3NpbmciLCJhY3Rpb24iLCJjbGVhciIsIm9uQ2FuY2VsLnBsYXllciBiZWZvcmVDbG9zZS5wbGF5ZXIiLCJvblVwZGF0ZS5wbGF5ZXIiLCJiZWZvcmVMb2FkLnBsYXllciIsImp1bXB0byIsInJvdXRlciIsInJlcG9zaXRpb24iLCJvbmx5QWJzb2x1dGUiLCJfZ2V0UG9zaXRpb24iLCJ1cGRhdGUiLCJhbnl3YXkiLCJfc2V0RGltZW5zaW9uIiwiY2FuU2hyaW5rIiwic2hvd0xvYWRpbmciLCJmaXhlZCIsImgiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImJpbmRFdmVudHMiLCJzcmNFbGVtZW50IiwibW91c2V3aGVlbCIsImRlbHRhWCIsImRlbHRhWSIsImNhblNjcm9sbCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwibyIsImhlbHBlciIsIl9lcnJvciIsIl9sb2FkSW1hZ2UiLCJfbG9hZEFqYXgiLCJfbG9hZElmcmFtZSIsIl9hZnRlckxvYWQiLCJoYXNFcnJvciIsImltZyIsIkltYWdlIiwidGV4dFN0YXR1cyIsIl9wcmVsb2FkSW1hZ2VzIiwiaXRlbSIsImNudCIsIm1pbiIsImVtYmVkIiwicGxhY2Vob2xkZXIiLCJjYW5FeHBhbmQiLCJ3UGFkZGluZyIsImhQYWRkaW5nIiwid1NwYWNlIiwiaFNwYWNlIiwib3JpZ1dpZHRoIiwib3JpZ0hlaWdodCIsIm9yaWdNYXhXaWR0aCIsIm9yaWdNYXhIZWlnaHQiLCJ3aWR0aF8iLCJoZWlnaHRfIiwibWF4V2lkdGhfIiwibWF4SGVpZ2h0XyIsInN0ZXBzIiwic2Nyb2xsT3V0Iiwic2Nyb2xsYmFyV2lkdGgiLCJ3TWFyZ2luIiwiaE1hcmdpbiIsImNvbnRlbnRXaW5kb3ciLCJ3cmFwU3BhY2UiLCJza2luU3BhY2UiLCJfYWZ0ZXJab29tSW4iLCJnZXRPcmlnUG9zaXRpb24iLCJ6b29tSW4iLCJzdGFydFBvcyIsImVmZmVjdCIsImVsYXN0aWMiLCJlbmRQb3MiLCJ6b29tT3V0IiwiY2hhbmdlSW4iLCJmaWVsZCIsImNoYW5nZU91dCIsInNwZWVkT3V0Iiwic2hvd0Vhcmx5Iiwic2Nyb2xsViIsInNjcm9sbEgiLCJvblJlYWR5IiwiZml4UG9zaXRpb24iLCJvblVwZGF0ZSIsInJlbFR5cGUiLCJyZWxWYWwiLCJncm91cEF0dHIiLCJsaXZlIiwidzEiLCJ3MiIsImNoaWxkIiwiZml4ZWRQb3NpdGlvbiIsIm9mZnNldFRvcCIsInZhbGlkYXRlRmllbGRzIiwiZm9ybSIsImZpZWxkc0FycmF5IiwiZm9yRWFjaCIsImNvbW1lbnQiLCJyZXF1ZXN0IiwicmVzcG9uc2VKU09OIiwiYnVyZ2VyIiwicXVlcnlTZWxlY3RvciIsImxpbmtzIiwidG9nZ2xlTWVudSIsImNsYXNzTGlzdCIsIm1lc3VyZVdpZHRoIiwicmVxSXRlbVdpZHRoIiwic2NyZWVuV2lkdGgiLCJ0aXRsZXNCbG9ja3MiLCJ0aXRsZXNXaWR0aCIsInRleHRDb250YWluZXIiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIm1hdGNoTWVkaWEiLCJjbG9zZUV2ZXJ5SXRlbUluQ29udGFpbmVyIiwiaXRlbXMiLCJvcGVuSXRlbU5ldSIsImhpZGRlbkNvbnRlbnQiLCJyZXFXaWR0aCIsInRleHRCbG9jayIsIm15TWFwIiwiaXRlbU9wZW5lZCIsInltYXBzIiwiTWFwIiwiY2VudGVyIiwiY29vcmRzIiwibXlDb2xsZWN0aW9uIiwiR2VvT2JqZWN0Q29sbGVjdGlvbiIsImRyYWdnYWJsZSIsImljb25MYXlvdXQiLCJpY29uSW1hZ2VIcmVmIiwiaWNvbkltYWdlU2l6ZSIsImljb25JbWFnZU9mZnNldCIsIlBsYWNlbWFyayIsImdlb09iamVjdHMiLCJiZWhhdmlvcnMiLCJwbGF5ZXJDb250YWluZXIiLCJldmVudHNJbml0IiwicGF1c2VWaWRlbyIsInBsYXlWaWRlbyIsImJhciIsIm5ld0J1dHRvblBvc2l0aW9uUGVyY2VudCIsImxheWVyWCIsIm5ld1BsYXliYWNrUG9zaXRpb25TZWMiLCJnZXREdXJhdGlvbiIsInNlZWtUbyIsImZvcm1hdFRpbWUiLCJ0aW1lU2VjIiwicm91bmRUaW1lIiwibWludXRlcyIsImFkZFplcm8iLCJvblBsYXllclJlYWR5IiwiZHVyYXRpb25TZWMiLCJjb21wbGV0ZWRTZWMiLCJnZXRDdXJyZW50VGltZSIsImNvbXBsZXRlZFBlcmNlbnQiLCJvblBsYXllclN0YXRlQ2hhbmdlIiwib25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkiLCJZVCIsIlBsYXllciIsInZpZGVvSWQiLCJvblN0YXRlQ2hhbmdlIiwicGxheWVyVmFycyIsImRpc2FibGVrYiIsInNob3dpbmZvIiwicmVsIiwiYXV0b3BsYXkiLCJtb2Rlc3RicmFuZGluZyIsIlNsaWRlU2hvdyIsIltvYmplY3QgT2JqZWN0XSIsImNvbmZpZyIsImZyb20iLCJuYXYiLCJzZXRQb3NpdGlvbkl0ZW1zIiwic2V0QW5pbWF0aW9uIiwic2V0QWN0aXZlU2xpZGUiLCJjdXJyZW50TmF2IiwiZGF0YXNldCIsInNob3dMaW5rIiwidHJhbnNpdGlvbiIsInNldEFjdGl2ZU5hdiIsInNsaWRlIiwic2VjdGlvbnMiLCJzaWRlTWVudSIsIm1lbnVJdGVtcyIsIm1vYmlsZURldGVjdCIsImlzTW9iaWxlIiwiaW5TY3JvbGwiLCJjb3VudFNlY3Rpb25Qb3NpdGlvbiIsInNlY3Rpb25FcSIsImNoYW5nZU1lbnVUaGVtZUZvclNlY3Rpb24iLCJhY3RpdmVDbGFzcyIsInJlc2V0QWN0aXZlQ2xhc3NGb3JJdGVtIiwiaXRlbUVxIiwicGVyZm9tVHJhbnNpdGlvbiIsInRyYW5zaXRpb25PdmVyIiwidmlld3BvcnRTY3JvbGxlciIsImFjdGl2ZVNlY3Rpb24iLCJuZXh0U2VjdGlvbiIsInByZXZTZWN0aW9uIiwic2Nyb2xsZXIiLCJ1c2VyVHlwaW5nSW5JbnB1dHMiLCJyZXFTZWN0aW9uIiwic2Nyb2xsRGlyZWN0aW9uIiwib3Blbkl0ZW0iLCJjb250ZW50QmxvY2siLCJyZXFIZWlnaHQiLCJjbG9zZUV2ZXJ5SXRlbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7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QUEsQ0FDQW5DLE9BQUEsRUFDQU0sVUFBQSxFQUNBMXVCLE1BQUEsTUFHQTBRLEVBQUEsMkNBQUE1Z0IsT0FBQXhmLElBQ0FBLEVBQUE4YyxpQkFDQW9qQyxPQUFBd0UsbUJBR0F0a0IsRUFBQSwyQ0FBQTVnQixPQUFBeGYsSUFDQUEsRUFBQThjLGlCQUNBb2pDLE9BQUF1RSxtQkNiQSxNQUFBd1gsU0FBQXBLLElBQ0EsTUFBQS9yQyxFQUFBK3JDLEVBQUFoakQsUUFBQSxlQUNBcXRELEVBQUFwMkMsRUFBQS9oQixLQUFBLGtCQUVBbzRELEVBREFELEVBQUFuNEQsS0FBQSx3QkFDQTBqQixTQUVBM0IsRUFBQXdNLFNBQUEsZUFDQTRwQyxFQUFBejBDLE9BQUEwMEMsSUFHQUMsZUFBQXQyQyxJQUNBLE1BQUEwd0MsRUFBQTF3QyxFQUFBL2hCLEtBQUEsa0JBQ0EraEIsRUFBQS9oQixLQUFBLGVBRUE0dUIsWUFBQSxlQUNBNmpDLEVBQUEvdUMsT0FBQSxJQUdBMlksRUFBQSxnQkFBQTVnQixPQUFBeGYsSUFDQSxNQUFBdXpDLEVBQUFuVCxFQUFBcGdDLEVBQUEyZSxlQUNBbUgsRUFBQXl0QixFQUFBMWtDLFFBQUEsU0FDQTBrQyxFQUFBMWtDLFFBQUEsZUFFQW1rQixTQUFBLGVBQ0FvcEMsZUFBQXQyQyxJQUVBczJDLGVBQUF0MkMsR0FDQW0yQyxTQUFBMW9CIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDUtMDRUMjI6NDlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweFwiO1xuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9IHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCApID4gMztcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0XG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiYgalF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRvcCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMudG9wICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHByb3BzLmxlZnQgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyBUSElTIEZJTEUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIEVESVQhXG4vKiFtb2JpbGUtZGV0ZWN0IHYxLjQuNCAyMDE5LTA5LTIxKi9cbi8qZ2xvYmFsIG1vZHVsZTpmYWxzZSwgZGVmaW5lOmZhbHNlKi9cbi8qanNoaW50IGxhdGVkZWY6ZmFsc2UqL1xuLyohQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMTMsIEhlaW5yaWNoIEdvZWJsLCBMaWNlbnNlOiBNSVQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMqL1xuKGZ1bmN0aW9uIChkZWZpbmUsIHVuZGVmaW5lZCkge1xuZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaW1wbCA9IHt9O1xuXG4gICAgaW1wbC5tb2JpbGVEZXRlY3RSdWxlcyA9IHtcbiAgICBcInBob25lc1wiOiB7XG4gICAgICAgIFwiaVBob25lXCI6IFwiXFxcXGJpUGhvbmVcXFxcYnxcXFxcYmlQb2RcXFxcYlwiLFxuICAgICAgICBcIkJsYWNrQmVycnlcIjogXCJCbGFja0JlcnJ5fFxcXFxiQkIxMFxcXFxifHJpbVswLTldK3xcXFxcYihCQkExMDB8QkJCMTAwfEJCRDEwMHxCQkUxMDB8QkJGMTAwfFNUSDEwMClcXFxcYi1bMC05XStcIixcbiAgICAgICAgXCJIVENcIjogXCJIVEN8SFRDLiooU2Vuc2F0aW9ufEV2b3xWaXNpb258RXhwbG9yZXJ8NjgwMHw4MTAwfDg5MDB8QTcyNzJ8UzUxMGV8QzExMGV8TGVnZW5kfERlc2lyZXxUODI4Mil8QVBYNTE1Q0tUfFF0ZWs5MDkwfEFQQTkyOTJLVHxIRF9taW5pfFNlbnNhdGlvbi4qWjcxMGV8UEc4NjEwMHxaNzE1ZXxEZXNpcmUuKihBODE4MXxIRCl8QURSNjIwMHxBRFI2NDAwTHxBRFI2NDI1fDAwMUhUfEluc3BpcmUgNEd8QW5kcm9pZC4qXFxcXGJFVk9cXFxcYnxULU1vYmlsZSBHMXxaNTIwbXxBbmRyb2lkIFswLTkuXSs7IFBpeGVsXCIsXG4gICAgICAgIFwiTmV4dXNcIjogXCJOZXh1cyBPbmV8TmV4dXMgU3xHYWxheHkuKk5leHVzfEFuZHJvaWQuKk5leHVzLipNb2JpbGV8TmV4dXMgNHxOZXh1cyA1fE5leHVzIDZcIixcbiAgICAgICAgXCJEZWxsXCI6IFwiRGVsbFs7XT8gKFN0cmVha3xBZXJvfFZlbnVlfFZlbnVlIFByb3xGbGFzaHxTbW9rZXxNaW5pIDNpWCl8WENEMjh8WENEMzV8XFxcXGIwMDFETFxcXFxifFxcXFxiMTAxRExcXFxcYnxcXFxcYkdTMDFcXFxcYlwiLFxuICAgICAgICBcIk1vdG9yb2xhXCI6IFwiTW90b3JvbGF8RFJPSURYfERST0lEIEJJT05JQ3xcXFxcYkRyb2lkXFxcXGIuKkJ1aWxkfEFuZHJvaWQuKlhvb218SFJJMzl8TU9ULXxBMTI2MHxBMTY4MHxBNTU1fEE4NTN8QTg1NXxBOTUzfEE5NTV8QTk1NnxNb3Rvcm9sYS4qRUxFQ1RSSUZZfE1vdG9yb2xhLippMXxpODY3fGk5NDB8TUIyMDB8TUIzMDB8TUI1MDF8TUI1MDJ8TUI1MDh8TUI1MTF8TUI1MjB8TUI1MjV8TUI1MjZ8TUI2MTF8TUI2MTJ8TUI2MzJ8TUI4MTB8TUI4NTV8TUI4NjB8TUI4NjF8TUI4NjV8TUI4NzB8TUU1MDF8TUU1MDJ8TUU1MTF8TUU1MjV8TUU2MDB8TUU2MzJ8TUU3MjJ8TUU4MTF8TUU4NjB8TUU4NjN8TUU4NjV8TVQ2MjB8TVQ3MTB8TVQ3MTZ8TVQ3MjB8TVQ4MTB8TVQ4NzB8TVQ5MTd8TW90b3JvbGEuKlRJVEFOSVVNfFdYNDM1fFdYNDQ1fFhUMzAwfFhUMzAxfFhUMzExfFhUMzE2fFhUMzE3fFhUMzE5fFhUMzIwfFhUMzkwfFhUNTAyfFhUNTMwfFhUNTMxfFhUNTMyfFhUNTM1fFhUNjAzfFhUNjEwfFhUNjExfFhUNjE1fFhUNjgxfFhUNzAxfFhUNzAyfFhUNzExfFhUNzIwfFhUODAwfFhUODA2fFhUODYwfFhUODYyfFhUODc1fFhUODgyfFhUODgzfFhUODk0fFhUOTAxfFhUOTA3fFhUOTA5fFhUOTEwfFhUOTEyfFhUOTI4fFhUOTI2fFhUOTE1fFhUOTE5fFhUOTI1fFhUMTAyMXxcXFxcYk1vdG8gRVxcXFxifFhUMTA2OHxYVDEwOTJ8WFQxMDUyXCIsXG4gICAgICAgIFwiU2Ftc3VuZ1wiOiBcIlxcXFxiU2Ftc3VuZ1xcXFxifFNNLUc5NTBGfFNNLUc5NTVGfFNNLUc5MjUwfEdULTE5MzAwfFNHSC1JMzM3fEJHVC1TNTIzMHxHVC1CMjEwMHxHVC1CMjcwMHxHVC1CMjcxMHxHVC1CMzIxMHxHVC1CMzMxMHxHVC1CMzQxMHxHVC1CMzczMHxHVC1CMzc0MHxHVC1CNTUxMHxHVC1CNTUxMnxHVC1CNTcyMnxHVC1CNjUyMHxHVC1CNzMwMHxHVC1CNzMyMHxHVC1CNzMzMHxHVC1CNzM1MHxHVC1CNzUxMHxHVC1CNzcyMnxHVC1CNzgwMHxHVC1DMzAxMHxHVC1DMzAxMXxHVC1DMzA2MHxHVC1DMzIwMHxHVC1DMzIxMnxHVC1DMzIxMkl8R1QtQzMyNjJ8R1QtQzMyMjJ8R1QtQzMzMDB8R1QtQzMzMDBLfEdULUMzMzAzfEdULUMzMzAzS3xHVC1DMzMxMHxHVC1DMzMyMnxHVC1DMzMzMHxHVC1DMzM1MHxHVC1DMzUwMHxHVC1DMzUxMHxHVC1DMzUzMHxHVC1DMzYzMHxHVC1DMzc4MHxHVC1DNTAxMHxHVC1DNTIxMnxHVC1DNjYyMHxHVC1DNjYyNXxHVC1DNjcxMnxHVC1FMTA1MHxHVC1FMTA3MHxHVC1FMTA3NXxHVC1FMTA4MHxHVC1FMTA4MXxHVC1FMTA4NXxHVC1FMTA4N3xHVC1FMTEwMHxHVC1FMTEwN3xHVC1FMTExMHxHVC1FMTEyMHxHVC1FMTEyNXxHVC1FMTEzMHxHVC1FMTE2MHxHVC1FMTE3MHxHVC1FMTE3NXxHVC1FMTE4MHxHVC1FMTE4MnxHVC1FMTIwMHxHVC1FMTIxMHxHVC1FMTIyNXxHVC1FMTIzMHxHVC1FMTM5MHxHVC1FMjEwMHxHVC1FMjEyMHxHVC1FMjEyMXxHVC1FMjE1MnxHVC1FMjIyMHxHVC1FMjIyMnxHVC1FMjIzMHxHVC1FMjIzMnxHVC1FMjI1MHxHVC1FMjM3MHxHVC1FMjU1MHxHVC1FMjY1MnxHVC1FMzIxMHxHVC1FMzIxM3xHVC1JNTUwMHxHVC1JNTUwM3xHVC1JNTcwMHxHVC1JNTgwMHxHVC1JNTgwMXxHVC1JNjQxMHxHVC1JNjQyMHxHVC1JNzExMHxHVC1JNzQxMHxHVC1JNzUwMHxHVC1JODAwMHxHVC1JODE1MHxHVC1JODE2MHxHVC1JODE5MHxHVC1JODMyMHxHVC1JODMzMHxHVC1JODM1MHxHVC1JODUzMHxHVC1JODcwMHxHVC1JODcwM3xHVC1JODkxMHxHVC1JOTAwMHxHVC1JOTAwMXxHVC1JOTAwM3xHVC1JOTAxMHxHVC1JOTAyMHxHVC1JOTAyM3xHVC1JOTA3MHxHVC1JOTA4MnxHVC1JOTEwMHxHVC1JOTEwM3xHVC1JOTIyMHxHVC1JOTI1MHxHVC1JOTMwMHxHVC1JOTMwNXxHVC1JOTUwMHxHVC1JOTUwNXxHVC1NMzUxMHxHVC1NNTY1MHxHVC1NNzUwMHxHVC1NNzYwMHxHVC1NNzYwM3xHVC1NODgwMHxHVC1NODkxMHxHVC1ONzAwMHxHVC1TMzExMHxHVC1TMzMxMHxHVC1TMzM1MHxHVC1TMzM1M3xHVC1TMzM3MHxHVC1TMzY1MHxHVC1TMzY1M3xHVC1TMzc3MHxHVC1TMzg1MHxHVC1TNTIxMHxHVC1TNTIyMHxHVC1TNTIyOXxHVC1TNTIzMHxHVC1TNTIzM3xHVC1TNTI1MHxHVC1TNTI1M3xHVC1TNTI2MHxHVC1TNTI2M3xHVC1TNTI3MHxHVC1TNTMwMHxHVC1TNTMzMHxHVC1TNTM1MHxHVC1TNTM2MHxHVC1TNTM2M3xHVC1TNTM2OXxHVC1TNTM4MHxHVC1TNTM4MER8R1QtUzU1NjB8R1QtUzU1NzB8R1QtUzU2MDB8R1QtUzU2MDN8R1QtUzU2MTB8R1QtUzU2MjB8R1QtUzU2NjB8R1QtUzU2NzB8R1QtUzU2OTB8R1QtUzU3NTB8R1QtUzU3ODB8R1QtUzU4MzB8R1QtUzU4Mzl8R1QtUzYxMDJ8R1QtUzY1MDB8R1QtUzcwNzB8R1QtUzcyMDB8R1QtUzcyMjB8R1QtUzcyMzB8R1QtUzcyMzN8R1QtUzcyNTB8R1QtUzc1MDB8R1QtUzc1MzB8R1QtUzc1NTB8R1QtUzc1NjJ8R1QtUzc3MTB8R1QtUzgwMDB8R1QtUzgwMDN8R1QtUzg1MDB8R1QtUzg1MzB8R1QtUzg2MDB8U0NILUEzMTB8U0NILUE1MzB8U0NILUE1NzB8U0NILUE2MTB8U0NILUE2MzB8U0NILUE2NTB8U0NILUE3OTB8U0NILUE3OTV8U0NILUE4NTB8U0NILUE4NzB8U0NILUE4OTB8U0NILUE5MzB8U0NILUE5NTB8U0NILUE5NzB8U0NILUE5OTB8U0NILUkxMDB8U0NILUkxMTB8U0NILUk0MDB8U0NILUk0MDV8U0NILUk1MDB8U0NILUk1MTB8U0NILUk1MTV8U0NILUk2MDB8U0NILUk3MzB8U0NILUk3NjB8U0NILUk3NzB8U0NILUk4MzB8U0NILUk5MTB8U0NILUk5MjB8U0NILUk5NTl8U0NILUxDMTF8U0NILU4xNTB8U0NILU4zMDB8U0NILVIxMDB8U0NILVIzMDB8U0NILVIzNTF8U0NILVI0MDB8U0NILVI0MTB8U0NILVQzMDB8U0NILVUzMTB8U0NILVUzMjB8U0NILVUzNTB8U0NILVUzNjB8U0NILVUzNjV8U0NILVUzNzB8U0NILVUzODB8U0NILVU0MTB8U0NILVU0MzB8U0NILVU0NTB8U0NILVU0NjB8U0NILVU0NzB8U0NILVU0OTB8U0NILVU1NDB8U0NILVU1NTB8U0NILVU2MjB8U0NILVU2NDB8U0NILVU2NTB8U0NILVU2NjB8U0NILVU3MDB8U0NILVU3NDB8U0NILVU3NTB8U0NILVU4MTB8U0NILVU4MjB8U0NILVU5MDB8U0NILVU5NDB8U0NILVU5NjB8U0NTLTI2VUN8U0dILUExMDd8U0dILUExMTd8U0dILUExMjd8U0dILUExMzd8U0dILUExNTd8U0dILUExNjd8U0dILUExNzd8U0dILUExODd8U0dILUExOTd8U0dILUEyMjd8U0dILUEyMzd8U0dILUEyNTd8U0dILUE0Mzd8U0dILUE1MTd8U0dILUE1OTd8U0dILUE2Mzd8U0dILUE2NTd8U0dILUE2Njd8U0dILUE2ODd8U0dILUE2OTd8U0dILUE3MDd8U0dILUE3MTd8U0dILUE3Mjd8U0dILUE3Mzd8U0dILUE3NDd8U0dILUE3Njd8U0dILUE3Nzd8U0dILUE3OTd8U0dILUE4MTd8U0dILUE4Mjd8U0dILUE4Mzd8U0dILUE4NDd8U0dILUE4Njd8U0dILUE4Nzd8U0dILUE4ODd8U0dILUE4OTd8U0dILUE5Mjd8U0dILUIxMDB8U0dILUIxMzB8U0dILUIyMDB8U0dILUIyMjB8U0dILUMxMDB8U0dILUMxMTB8U0dILUMxMjB8U0dILUMxMzB8U0dILUMxNDB8U0dILUMxNjB8U0dILUMxNzB8U0dILUMxODB8U0dILUMyMDB8U0dILUMyMDd8U0dILUMyMTB8U0dILUMyMjV8U0dILUMyMzB8U0dILUM0MTd8U0dILUM0NTB8U0dILUQzMDd8U0dILUQzNDd8U0dILUQzNTd8U0dILUQ0MDd8U0dILUQ0MTV8U0dILUQ3ODB8U0dILUQ4MDd8U0dILUQ5ODB8U0dILUUxMDV8U0dILUUyMDB8U0dILUUzMTV8U0dILUUzMTZ8U0dILUUzMTd8U0dILUUzMzV8U0dILUU1OTB8U0dILUU2MzV8U0dILUU3MTV8U0dILUU4OTB8U0dILUYzMDB8U0dILUY0ODB8U0dILUkyMDB8U0dILUkzMDB8U0dILUkzMjB8U0dILUk1NTB8U0dILUk1Nzd8U0dILUk2MDB8U0dILUk2MDd8U0dILUk2MTd8U0dILUk2Mjd8U0dILUk2Mzd8U0dILUk2Nzd8U0dILUk3MDB8U0dILUk3MTd8U0dILUk3Mjd8U0dILWk3NDdNfFNHSC1JNzc3fFNHSC1JNzgwfFNHSC1JODI3fFNHSC1JODQ3fFNHSC1JODU3fFNHSC1JODk2fFNHSC1JODk3fFNHSC1JOTAwfFNHSC1JOTA3fFNHSC1JOTE3fFNHSC1JOTI3fFNHSC1JOTM3fFNHSC1JOTk3fFNHSC1KMTUwfFNHSC1KMjAwfFNHSC1MMTcwfFNHSC1MNzAwfFNHSC1NMTEwfFNHSC1NMTUwfFNHSC1NMjAwfFNHSC1OMTA1fFNHSC1ONTAwfFNHSC1ONjAwfFNHSC1ONjIwfFNHSC1ONjI1fFNHSC1ONzAwfFNHSC1ONzEwfFNHSC1QMTA3fFNHSC1QMjA3fFNHSC1QMzAwfFNHSC1QMzEwfFNHSC1QNTIwfFNHSC1QNzM1fFNHSC1QNzc3fFNHSC1RMTA1fFNHSC1SMjEwfFNHSC1SMjIwfFNHSC1SMjI1fFNHSC1TMTA1fFNHSC1TMzA3fFNHSC1UMTA5fFNHSC1UMTE5fFNHSC1UMTM5fFNHSC1UMjA5fFNHSC1UMjE5fFNHSC1UMjI5fFNHSC1UMjM5fFNHSC1UMjQ5fFNHSC1UMjU5fFNHSC1UMzA5fFNHSC1UMzE5fFNHSC1UMzI5fFNHSC1UMzM5fFNHSC1UMzQ5fFNHSC1UMzU5fFNHSC1UMzY5fFNHSC1UMzc5fFNHSC1UNDA5fFNHSC1UNDI5fFNHSC1UNDM5fFNHSC1UNDU5fFNHSC1UNDY5fFNHSC1UNDc5fFNHSC1UNDk5fFNHSC1UNTA5fFNHSC1UNTE5fFNHSC1UNTM5fFNHSC1UNTU5fFNHSC1UNTg5fFNHSC1UNjA5fFNHSC1UNjE5fFNHSC1UNjI5fFNHSC1UNjM5fFNHSC1UNjU5fFNHSC1UNjY5fFNHSC1UNjc5fFNHSC1UNzA5fFNHSC1UNzE5fFNHSC1UNzI5fFNHSC1UNzM5fFNHSC1UNzQ2fFNHSC1UNzQ5fFNHSC1UNzU5fFNHSC1UNzY5fFNHSC1UODA5fFNHSC1UODE5fFNHSC1UODM5fFNHSC1UOTE5fFNHSC1UOTI5fFNHSC1UOTM5fFNHSC1UOTU5fFNHSC1UOTg5fFNHSC1VMTAwfFNHSC1VMjAwfFNHSC1VODAwfFNHSC1WMjA1fFNHSC1WMjA2fFNHSC1YMTAwfFNHSC1YMTA1fFNHSC1YMTIwfFNHSC1YMTQwfFNHSC1YNDI2fFNHSC1YNDI3fFNHSC1YNDc1fFNHSC1YNDk1fFNHSC1YNDk3fFNHSC1YNTA3fFNHSC1YNjAwfFNHSC1YNjEwfFNHSC1YNjIwfFNHSC1YNjMwfFNHSC1YNzAwfFNHSC1YODIwfFNHSC1YODkwfFNHSC1aMTMwfFNHSC1aMTUwfFNHSC1aMTcwfFNHSC1aWDEwfFNHSC1aWDIwfFNIVy1NMTEwfFNQSC1BMTIwfFNQSC1BNDAwfFNQSC1BNDIwfFNQSC1BNDYwfFNQSC1BNTAwfFNQSC1BNTYwfFNQSC1BNjAwfFNQSC1BNjIwfFNQSC1BNjYwfFNQSC1BNzAwfFNQSC1BNzQwfFNQSC1BNzYwfFNQSC1BNzkwfFNQSC1BODAwfFNQSC1BODIwfFNQSC1BODQwfFNQSC1BODgwfFNQSC1BOTAwfFNQSC1BOTQwfFNQSC1BOTYwfFNQSC1ENjAwfFNQSC1ENzAwfFNQSC1ENzEwfFNQSC1ENzIwfFNQSC1JMzAwfFNQSC1JMzI1fFNQSC1JMzMwfFNQSC1JMzUwfFNQSC1JNTAwfFNQSC1JNjAwfFNQSC1JNzAwfFNQSC1MNzAwfFNQSC1NMTAwfFNQSC1NMjIwfFNQSC1NMjQwfFNQSC1NMzAwfFNQSC1NMzA1fFNQSC1NMzIwfFNQSC1NMzMwfFNQSC1NMzUwfFNQSC1NMzYwfFNQSC1NMzcwfFNQSC1NMzgwfFNQSC1NNTEwfFNQSC1NNTQwfFNQSC1NNTUwfFNQSC1NNTYwfFNQSC1NNTcwfFNQSC1NNTgwfFNQSC1NNjEwfFNQSC1NNjIwfFNQSC1NNjMwfFNQSC1NODAwfFNQSC1NODEwfFNQSC1NODUwfFNQSC1NOTAwfFNQSC1NOTEwfFNQSC1NOTIwfFNQSC1NOTMwfFNQSC1OMTAwfFNQSC1OMjAwfFNQSC1OMjQwfFNQSC1OMzAwfFNQSC1ONDAwfFNQSC1aNDAwfFNXQy1FMTAwfFNDSC1pOTA5fEdULU43MTAwfEdULU43MTA1fFNDSC1JNTM1fFNNLU45MDBBfFNHSC1JMzE3fFNHSC1UOTk5THxHVC1TNTM2MEJ8R1QtSTgyNjJ8R1QtUzY4MDJ8R1QtUzYzMTJ8R1QtUzYzMTB8R1QtUzUzMTJ8R1QtUzUzMTB8R1QtSTkxMDV8R1QtSTg1MTB8R1QtUzY3OTBOfFNNLUc3MTA1fFNNLU45MDA1fEdULVM1MzAxfEdULUk5Mjk1fEdULUk5MTk1fFNNLUMxMDF8R1QtUzczOTJ8R1QtUzc1NjB8R1QtQjc2MTB8R1QtSTU1MTB8R1QtUzc1ODJ8R1QtUzc1MzBFfEdULUk4NzUwfFNNLUc5MDA2VnxTTS1HOTAwOFZ8U00tRzkwMDlEfFNNLUc5MDBBfFNNLUc5MDBEfFNNLUc5MDBGfFNNLUc5MDBIfFNNLUc5MDBJfFNNLUc5MDBKfFNNLUc5MDBLfFNNLUc5MDBMfFNNLUc5MDBNfFNNLUc5MDBQfFNNLUc5MDBSNHxTTS1HOTAwU3xTTS1HOTAwVHxTTS1HOTAwVnxTTS1HOTAwVzh8U0hWLUUxNjBLfFNDSC1QNzA5fFNDSC1QNzI5fFNNLVQyNTU4fEdULUk5MjA1fFNNLUc5MzUwfFNNLUoxMjBGfFNNLUc5MjBGfFNNLUc5MjBWfFNNLUc5MzBGfFNNLU45MTBDfFNNLUEzMTBGfEdULUk5MTkwfFNNLUo1MDBGTnxTTS1HOTAzRnxTTS1KMzMwRlwiLFxuICAgICAgICBcIkxHXCI6IFwiXFxcXGJMR1xcXFxiO3xMR1stIF0/KEM4MDB8QzkwMHxFNDAwfEU2MTB8RTkwMHxFLTkwMHxGMTYwfEYxODBLfEYxODBMfEYxODBTfDczMHw4NTV8TDE2MHxMUzc0MHxMUzg0MHxMUzk3MHxMVTYyMDB8TVM2OTB8TVM2OTV8TVM3NzB8TVM4NDB8TVM4NzB8TVM5MTB8UDUwMHxQNzAwfFA3MDV8Vk02OTZ8QVM2ODB8QVM2OTV8QVg4NDB8QzcyOXxFOTcwfEdTNTA1fDI3MnxDMzk1fEU3MzlCS3xFOTYwfEw1NUN8TDc1Q3xMUzY5NnxMUzg2MHxQNzY5Qkt8UDM1MHxQNTAwfFA1MDl8UDg3MHxVTjI3MnxVUzczMHxWUzg0MHxWUzk1MHxMTjI3MnxMTjUxMHxMUzY3MHxMUzg1NXxMVzY5MHxNTjI3MHxNTjUxMHxQNTA5fFA3Njl8UDkzMHxVTjIwMHxVTjI3MHxVTjUxMHxVTjYxMHxVUzY3MHxVUzc0MHxVUzc2MHxVWDI2NXxVWDg0MHxWTjI3MXxWTjUzMHxWUzY2MHxWUzcwMHxWUzc0MHxWUzc1MHxWUzkxMHxWUzkyMHxWUzkzMHxWWDkyMDB8VlgxMTAwMHxBWDg0MEF8TFc3NzB8UDUwNnxQOTI1fFA5OTl8RTYxMnxEOTU1fEQ4MDJ8TVMzMjN8TTI1Nyl8TE0tRzcxMFwiLFxuICAgICAgICBcIlNvbnlcIjogXCJTb255U1R8U29ueUxUfFNvbnlFcmljc3NvbnxTb255RXJpY3Nzb25MVDE1aXZ8TFQxOGl8RTEwaXxMVDI4aHxMVDI2d3xTb255RXJpY3Nzb25NVDI3aXxDNTMwM3xDNjkwMnxDNjkwM3xDNjkwNnxDNjk0M3xEMjUzM1wiLFxuICAgICAgICBcIkFzdXNcIjogXCJBc3VzLipHYWxheHl8UGFkRm9uZS4qTW9iaWxlXCIsXG4gICAgICAgIFwiTm9raWFMdW1pYVwiOiBcIkx1bWlhIFswLTldezMsNH1cIixcbiAgICAgICAgXCJNaWNyb21heFwiOiBcIk1pY3JvbWF4LipcXFxcYihBMjEwfEE5MnxBODh8QTcyfEExMTF8QTExMFF8QTExNXxBMTE2fEExMTB8QTkwU3xBMjZ8QTUxfEEzNXxBNTR8QTI1fEEyN3xBODl8QTY4fEE2NXxBNTd8QTkwKVxcXFxiXCIsXG4gICAgICAgIFwiUGFsbVwiOiBcIlBhbG1Tb3VyY2V8UGFsbVwiLFxuICAgICAgICBcIlZlcnR1XCI6IFwiVmVydHV8VmVydHUuKkx0ZHxWZXJ0dS4qQXNjZW50fFZlcnR1LipBeXh0YXxWZXJ0dS4qQ29uc3RlbGxhdGlvbihGfFF1ZXN0KT98VmVydHUuKk1vbmlrYXxWZXJ0dS4qU2lnbmF0dXJlXCIsXG4gICAgICAgIFwiUGFudGVjaFwiOiBcIlBBTlRFQ0h8SU0tQTg1MFN8SU0tQTg0MFN8SU0tQTgzMEx8SU0tQTgzMEt8SU0tQTgzMFN8SU0tQTgyMEx8SU0tQTgxMEt8SU0tQTgxMFN8SU0tQTgwMFN8SU0tVDEwMEt8SU0tQTcyNUx8SU0tQTc4MEx8SU0tQTc3NUN8SU0tQTc3MEt8SU0tQTc2MFN8SU0tQTc1MEt8SU0tQTc0MFN8SU0tQTczMFN8SU0tQTcyMEx8SU0tQTcxMEt8SU0tQTY5MEx8SU0tQTY5MFN8SU0tQTY1MFN8SU0tQTYzMEt8SU0tQTYwMFN8VkVHQSBQVEwyMXxQVDAwM3xQODAxMHxBRFI5MTBMfFA2MDMwfFA2MDIwfFA5MDcwfFA0MTAwfFA5MDYwfFA1MDAwfENETTg5OTJ8VFhUODA0NXxBRFI4OTk1fElTMTFQVHxQMjAzMHxQNjAxMHxQODAwMHxQVDAwMnxJUzA2fENETTg5OTl8UDkwNTB8UFQwMDF8VFhUODA0MHxQMjAyMHxQOTAyMHxQMjAwMHxQNzA0MHxQNzAwMHxDNzkwXCIsXG4gICAgICAgIFwiRmx5XCI6IFwiSVEyMzB8SVE0NDR8SVE0NTB8SVE0NDB8SVE0NDJ8SVE0NDF8SVEyNDV8SVEyNTZ8SVEyMzZ8SVEyNTV8SVEyMzV8SVEyNDV8SVEyNzV8SVEyNDB8SVEyODV8SVEyODB8SVEyNzB8SVEyNjB8SVEyNTBcIixcbiAgICAgICAgXCJXaWtvXCI6IFwiS0lURSA0R3xISUdIV0FZfEdFVEFXQVl8U1RBSVJXQVl8REFSS1NJREV8REFSS0ZVTEx8REFSS05JR0hUfERBUktNT09OfFNMSURFfFdBWCA0R3xSQUlOQk9XfEJMT09NfFNVTlNFVHxHT0EoPyFubmEpfExFTk5ZfEJBUlJZfElHR1l8T1paWXxDSU5LIEZJVkV8Q0lOSyBQRUFYfENJTksgUEVBWCAyfENJTksgU0xJTXxDSU5LIFNMSU0gMnxDSU5LICt8Q0lOSyBLSU5HfENJTksgUEVBWHxDSU5LIFNMSU18U1VCTElNXCIsXG4gICAgICAgIFwiaU1vYmlsZVwiOiBcImktbW9iaWxlIChJUXxpLVNUWUxFfGlkZWF8WkFBfEhpdHopXCIsXG4gICAgICAgIFwiU2ltVmFsbGV5XCI6IFwiXFxcXGIoU1AtODB8WFQtOTMwfFNYLTM0MHxYVC05MzB8U1gtMzEwfFNQLTM2MHxTUDYwfFNQVC04MDB8U1AtMTIwfFNQVC04MDB8U1AtMTQwfFNQWC01fFNQWC04fFNQLTEwMHxTUFgtOHxTUFgtMTIpXFxcXGJcIixcbiAgICAgICAgXCJXb2xmZ2FuZ1wiOiBcIkFULUIyNER8QVQtQVM1MEhEfEFULUFTNDBXfEFULUFTNTVIRHxBVC1BUzQ1cTJ8QVQtQjI2RHxBVC1BUzUwUVwiLFxuICAgICAgICBcIkFsY2F0ZWxcIjogXCJBbGNhdGVsXCIsXG4gICAgICAgIFwiTmludGVuZG9cIjogXCJOaW50ZW5kbyAoM0RTfFN3aXRjaClcIixcbiAgICAgICAgXCJBbW9pXCI6IFwiQW1vaVwiLFxuICAgICAgICBcIklOUVwiOiBcIklOUVwiLFxuICAgICAgICBcIk9uZVBsdXNcIjogXCJPTkVQTFVTXCIsXG4gICAgICAgIFwiR2VuZXJpY1Bob25lXCI6IFwiVGFwYXRhbGt8UERBO3xTQUdFTXxcXFxcYm1tcFxcXFxifHBvY2tldHxcXFxcYnBzcFxcXFxifHN5bWJpYW58U21hcnRwaG9uZXxzbWFydGZvbnx0cmVvfHVwLmJyb3dzZXJ8dXAubGlua3x2b2RhZm9uZXxcXFxcYndhcFxcXFxifG5va2lhfFNlcmllczQwfFNlcmllczYwfFM2MHxTb255RXJpY3Nzb258TjkwMHxNQVVJLipXQVAuKkJyb3dzZXJcIlxuICAgIH0sXG4gICAgXCJ0YWJsZXRzXCI6IHtcbiAgICAgICAgXCJpUGFkXCI6IFwiaVBhZHxpUGFkLipNb2JpbGVcIixcbiAgICAgICAgXCJOZXh1c1RhYmxldFwiOiBcIkFuZHJvaWQuKk5leHVzW1xcXFxzXSsoN3w5fDEwKVwiLFxuICAgICAgICBcIkdvb2dsZVRhYmxldFwiOiBcIkFuZHJvaWQuKlBpeGVsIENcIixcbiAgICAgICAgXCJTYW1zdW5nVGFibGV0XCI6IFwiU0FNU1VORy4qVGFibGV0fEdhbGF4eS4qVGFifFNDLTAxQ3xHVC1QMTAwMHxHVC1QMTAwM3xHVC1QMTAxMHxHVC1QMzEwNXxHVC1QNjIxMHxHVC1QNjgwMHxHVC1QNjgxMHxHVC1QNzEwMHxHVC1QNzMwMHxHVC1QNzMxMHxHVC1QNzUwMHxHVC1QNzUxMHxTQ0gtSTgwMHxTQ0gtSTgxNXxTQ0gtSTkwNXxTR0gtSTk1N3xTR0gtSTk4N3xTR0gtVDg0OXxTR0gtVDg1OXxTR0gtVDg2OXxTUEgtUDEwMHxHVC1QMzEwMHxHVC1QMzEwOHxHVC1QMzExMHxHVC1QNTEwMHxHVC1QNTExMHxHVC1QNjIwMHxHVC1QNzMyMHxHVC1QNzUxMXxHVC1OODAwMHxHVC1QODUxMHxTR0gtSTQ5N3xTUEgtUDUwMHxTR0gtVDc3OXxTQ0gtSTcwNXxTQ0gtSTkxNXxHVC1OODAxM3xHVC1QMzExM3xHVC1QNTExM3xHVC1QODExMHxHVC1OODAxMHxHVC1OODAwNXxHVC1OODAyMHxHVC1QMTAxM3xHVC1QNjIwMXxHVC1QNzUwMXxHVC1ONTEwMHxHVC1ONTEwNXxHVC1ONTExMHxTSFYtRTE0MEt8U0hWLUUxNDBMfFNIVi1FMTQwU3xTSFYtRTE1MFN8U0hWLUUyMzBLfFNIVi1FMjMwTHxTSFYtRTIzMFN8U0hXLU0xODBLfFNIVy1NMTgwTHxTSFctTTE4MFN8U0hXLU0xODBXfFNIVy1NMzAwV3xTSFctTTMwNVd8U0hXLU0zODBLfFNIVy1NMzgwU3xTSFctTTM4MFd8U0hXLU00MzBXfFNIVy1NNDgwS3xTSFctTTQ4MFN8U0hXLU00ODBXfFNIVy1NNDg1V3xTSFctTTQ4Nld8U0hXLU01MDBXfEdULUk5MjI4fFNDSC1QNzM5fFNDSC1JOTI1fEdULUk5MjAwfEdULVA1MjAwfEdULVA1MjEwfEdULVA1MjEwWHxTTS1UMzExfFNNLVQzMTB8U00tVDMxMFh8U00tVDIxMHxTTS1UMjEwUnxTTS1UMjExfFNNLVA2MDB8U00tUDYwMXxTTS1QNjA1fFNNLVA5MDB8U00tUDkwMXxTTS1UMjE3fFNNLVQyMTdBfFNNLVQyMTdTfFNNLVA2MDAwfFNNLVQzMTAwfFNHSC1JNDY3fFhFNTAwfFNNLVQxMTB8R1QtUDUyMjB8R1QtSTkyMDBYfEdULU41MTEwWHxHVC1ONTEyMHxTTS1QOTA1fFNNLVQxMTF8U00tVDIxMDV8U00tVDMxNXxTTS1UMzIwfFNNLVQzMjBYfFNNLVQzMjF8U00tVDUyMHxTTS1UNTI1fFNNLVQ1MzBOVXxTTS1UMjMwTlV8U00tVDMzME5VfFNNLVQ5MDB8WEU1MDBUMUN8U00tUDYwNVZ8U00tUDkwNVZ8U00tVDMzN1Z8U00tVDUzN1Z8U00tVDcwN1Z8U00tVDgwN1Z8U00tUDYwMFh8U00tUDkwMFh8U00tVDIxMFh8U00tVDIzMHxTTS1UMjMwWHxTTS1UMzI1fEdULVA3NTAzfFNNLVQ1MzF8U00tVDMzMHxTTS1UNTMwfFNNLVQ3MDV8U00tVDcwNUN8U00tVDUzNXxTTS1UMzMxfFNNLVQ4MDB8U00tVDcwMHxTTS1UNTM3fFNNLVQ4MDd8U00tUDkwN0F8U00tVDMzN0F8U00tVDUzN0F8U00tVDcwN0F8U00tVDgwN0F8U00tVDIzN3xTTS1UODA3UHxTTS1QNjA3VHxTTS1UMjE3VHxTTS1UMzM3VHxTTS1UODA3VHxTTS1UMTE2TlF8U00tVDExNkJVfFNNLVA1NTB8U00tVDM1MHxTTS1UNTUwfFNNLVQ5MDAwfFNNLVA5MDAwfFNNLVQ3MDVZfFNNLVQ4MDV8R1QtUDMxMTN8U00tVDcxMHxTTS1UODEwfFNNLVQ4MTV8U00tVDM2MHxTTS1UNTMzfFNNLVQxMTN8U00tVDMzNXxTTS1UNzE1fFNNLVQ1NjB8U00tVDY3MHxTTS1UNjc3fFNNLVQzNzd8U00tVDU2N3xTTS1UMzU3VHxTTS1UNTU1fFNNLVQ1NjF8U00tVDcxM3xTTS1UNzE5fFNNLVQ4MTN8U00tVDgxOXxTTS1UNTgwfFNNLVQzNTVZP3xTTS1UMjgwfFNNLVQ4MTdBfFNNLVQ4MjB8U00tVzcwMHxTTS1QNTgwfFNNLVQ1ODd8U00tUDM1MHxTTS1QNTU1TXxTTS1QMzU1TXxTTS1UMTEzTlV8U00tVDgxNVl8U00tVDU4NXxTTS1UMjg1fFNNLVQ4MjV8U00tVzcwOHxTTS1UODM1fFNNLVQ4MzB8U00tVDgzN1Z8U00tVDcyMHxTTS1UNTEwfFNNLVQzODdWXCIsXG4gICAgICAgIFwiS2luZGxlXCI6IFwiS2luZGxlfFNpbGsuKkFjY2VsZXJhdGVkfEFuZHJvaWQuKlxcXFxiKEtGT1R8S0ZUVHxLRkpXSXxLRkpXQXxLRk9URXxLRlNPV0l8S0ZUSFdJfEtGVEhXQXxLRkFQV0l8S0ZBUFdBfFdGSldBRXxLRlNBV0F8S0ZTQVdJfEtGQVNXSXxLRkFSV0l8S0ZGT1dJfEtGR0lXSXxLRk1FV0kpXFxcXGJ8QW5kcm9pZC4qU2lsa1xcL1swLTkuXSsgbGlrZSBDaHJvbWVcXC9bMC05Ll0rICg/IU1vYmlsZSlcIixcbiAgICAgICAgXCJTdXJmYWNlVGFibGV0XCI6IFwiV2luZG93cyBOVCBbMC05Ll0rOyBBUk07LiooVGFibGV0fEFSTUJKUylcIixcbiAgICAgICAgXCJIUFRhYmxldFwiOiBcIkhQIFNsYXRlICg3fDh8MTApfEhQIEVsaXRlUGFkIDkwMHxocC10YWJsZXR8RWxpdGVCb29rLipUb3VjaHxIUCA4fFNsYXRlIDIxfEhQIFNsYXRlQm9vayAxMFwiLFxuICAgICAgICBcIkFzdXNUYWJsZXRcIjogXCJeLipQYWRGb25lKCg/IU1vYmlsZSkuKSokfFRyYW5zZm9ybWVyfFRGMTAxfFRGMTAxR3xURjMwMFR8VEYzMDBUR3xURjMwMFRMfFRGNzAwVHxURjcwMEtMfFRGNzAxVHxURjgxMEN8TUUxNzF8TUUzMDFUfE1FMzAyQ3xNRTM3MU1HfE1FMzcwVHxNRTM3Mk1HfE1FMTcyVnxNRTE3M1h8TUU0MDBDfFNsaWRlciBTTDEwMXxcXFxcYkswMEZcXFxcYnxcXFxcYkswMENcXFxcYnxcXFxcYkswMEVcXFxcYnxcXFxcYkswMExcXFxcYnxUWDIwMUxBfE1FMTc2Q3xNRTEwMkF8XFxcXGJNODBUQVxcXFxifE1FMzcyQ0x8TUU1NjBDR3xNRTM3MkNHfE1FMzAyS0x8IEswMTAgfCBLMDExIHwgSzAxNyB8IEswMUUgfE1FNTcyQ3xNRTEwM0t8TUUxNzBDfE1FMTcxQ3xcXFxcYk1FNzBDXFxcXGJ8TUU1ODFDfE1FNTgxQ0x8TUU4NTEwQ3xNRTE4MUN8UDAxWXxQTzFNQXxQMDFafFxcXFxiUDAyN1xcXFxifFxcXFxiUDAyNFxcXFxifFxcXFxiUDAwQ1xcXFxiXCIsXG4gICAgICAgIFwiQmxhY2tCZXJyeVRhYmxldFwiOiBcIlBsYXlCb29rfFJJTSBUYWJsZXRcIixcbiAgICAgICAgXCJIVEN0YWJsZXRcIjogXCJIVENfRmx5ZXJfUDUxMnxIVEMgRmx5ZXJ8SFRDIEpldHN0cmVhbXxIVEMtUDcxNWF8SFRDIEVWTyBWaWV3IDRHfFBHNDEyMDB8UEcwOTQxMFwiLFxuICAgICAgICBcIk1vdG9yb2xhVGFibGV0XCI6IFwieG9vbXxzaG9sZXN0fE1aNjE1fE1aNjA1fE1aNTA1fE1aNjAxfE1aNjAyfE1aNjAzfE1aNjA0fE1aNjA2fE1aNjA3fE1aNjA4fE1aNjA5fE1aNjE1fE1aNjE2fE1aNjE3XCIsXG4gICAgICAgIFwiTm9va1RhYmxldFwiOiBcIkFuZHJvaWQuKk5vb2t8Tm9va0NvbG9yfG5vb2sgYnJvd3NlcnxCTlJWMjAwfEJOUlYyMDBBfEJOVFYyNTB8Qk5UVjI1MEF8Qk5UVjQwMHxCTlRWNjAwfExvZ2ljUEQgWm9vbTJcIixcbiAgICAgICAgXCJBY2VyVGFibGV0XCI6IFwiQW5kcm9pZC4qOyBcXFxcYihBMTAwfEExMDF8QTExMHxBMjAwfEEyMTB8QTIxMXxBNTAwfEE1MDF8QTUxMHxBNTExfEE3MDB8QTcwMXxXNTAwfFc1MDBQfFc1MDF8VzUwMVB8VzUxMHxXNTExfFc3MDB8RzEwMHxHMTAwV3xCMS1BNzF8QjEtNzEwfEIxLTcxMXxBMS04MTB8QTEtODExfEExLTgzMClcXFxcYnxXMy04MTB8XFxcXGJBMy1BMTBcXFxcYnxcXFxcYkEzLUExMVxcXFxifFxcXFxiQTMtQTIwXFxcXGJ8XFxcXGJBMy1BMzBcIixcbiAgICAgICAgXCJUb3NoaWJhVGFibGV0XCI6IFwiQW5kcm9pZC4qKEFUMTAwfEFUMTA1fEFUMjAwfEFUMjA1fEFUMjcwfEFUMjc1fEFUMzAwfEFUMzA1fEFUMVM1fEFUNTAwfEFUNTcwfEFUNzAwfEFUODMwKXxUT1NISUJBLipGT0xJT1wiLFxuICAgICAgICBcIkxHVGFibGV0XCI6IFwiXFxcXGJMLTA2Q3xMRy1WOTA5fExHLVY5MDB8TEctVjcwMHxMRy1WNTEwfExHLVY1MDB8TEctVjQxMHxMRy1WNDAwfExHLVZLODEwXFxcXGJcIixcbiAgICAgICAgXCJGdWppdHN1VGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoRi0wMUR8Ri0wMkZ8Ri0wNUV8Ri0xMER8TTUzMnxRNTcyKVxcXFxiXCIsXG4gICAgICAgIFwiUHJlc3RpZ2lvVGFibGV0XCI6IFwiUE1QMzE3MEJ8UE1QMzI3MEJ8UE1QMzQ3MEJ8UE1QNzE3MEJ8UE1QMzM3MEJ8UE1QMzU3MEN8UE1QNTg3MEN8UE1QMzY3MEJ8UE1QNTU3MEN8UE1QNTc3MER8UE1QMzk3MEJ8UE1QMzg3MEN8UE1QNTU4MEN8UE1QNTg4MER8UE1QNTc4MER8UE1QNTU4OEN8UE1QNzI4MEN8UE1QNzI4MEMzR3xQTVA3MjgwfFBNUDc4ODBEfFBNUDU1OTdEfFBNUDU1OTd8UE1QNzEwMER8UEVSMzQ2NHxQRVIzMjc0fFBFUjM1NzR8UEVSMzg4NHxQRVI1Mjc0fFBFUjU0NzR8UE1QNTA5N0NQUk98UE1QNTA5N3xQTVA3MzgwRHxQTVA1Mjk3Q3xQTVA1Mjk3Q19RVUFEfFBNUDgxMkV8UE1QODEyRTNHfFBNUDgxMkZ8UE1QODEwRXxQTVA4ODBURHxQTVQzMDE3fFBNVDMwMzd8UE1UMzA0N3xQTVQzMDU3fFBNVDcwMDh8UE1UNTg4N3xQTVQ1MDAxfFBNVDUwMDJcIixcbiAgICAgICAgXCJMZW5vdm9UYWJsZXRcIjogXCJMZW5vdm8gVEFCfElkZWEoVGFifFBhZCkoIEExfEExMHwgSzF8KXxUaGlua1BhZChbIF0rKT9UYWJsZXR8WVQzLTg1ME18WVQzLVg5MEx8WVQzLVg5MEZ8WVQzLVg5MFh8TGVub3ZvLiooUzIxMDl8UzIxMTB8UzUwMDB8UzYwMDB8SzMwMTF8QTMwMDB8QTM1MDB8QTEwMDB8QTIxMDd8QTIxMDl8QTExMDd8QTU1MDB8QTc2MDB8QjYwMDB8QjgwMDB8QjgwODApKC18KShGTHxGfEhWfEh8KXxUQi1YMTAzRnxUQi1YMzA0WHxUQi1YMzA0RnxUQi1YMzA0THxUQi1YNTA1RnxUQi1YNTA1THxUQi1YNTA1WHxUQi1YNjA1RnxUQi1YNjA1THxUQi04NzAzRnxUQi04NzAzWHxUQi04NzAzTnxUQi04NzA0TnxUQi04NzA0RnxUQi04NzA0WHxUQi04NzA0VnxUQi03MzA0RnxUQi03MzA0SXxUQi03MzA0WHxUYWIyQTctMTBGfFRhYjJBNy0yMEZ8VEIyLVgzMEx8WVQzLVg1MEx8WVQzLVg1MEZ8WVQzLVg1ME18WVQtWDcwNUZ8WVQtWDcwM0Z8WVQtWDcwM0x8WVQtWDcwNUx8WVQtWDcwNVh8VEIyLVgzMEZ8VEIyLVgzMEx8VEIyLVgzME18QTIxMDdBLUZ8QTIxMDdBLUh8VEIzLTczMEZ8VEIzLTczME18VEIzLTczMFh8VEItNzUwNEZ8VEItNzUwNFhcIixcbiAgICAgICAgXCJEZWxsVGFibGV0XCI6IFwiVmVudWUgMTF8VmVudWUgOHxWZW51ZSA3fERlbGwgU3RyZWFrIDEwfERlbGwgU3RyZWFrIDdcIixcbiAgICAgICAgXCJZYXJ2aWtUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYihUQUIyMTB8VEFCMjExfFRBQjIyNHxUQUIyNTB8VEFCMjYwfFRBQjI2NHxUQUIzMTB8VEFCMzYwfFRBQjM2NHxUQUI0MTB8VEFCNDExfFRBQjQyMHxUQUI0MjR8VEFCNDUwfFRBQjQ2MHxUQUI0NjF8VEFCNDY0fFRBQjQ2NXxUQUI0Njd8VEFCNDY4fFRBQjA3LTEwMHxUQUIwNy0xMDF8VEFCMDctMTUwfFRBQjA3LTE1MXxUQUIwNy0xNTJ8VEFCMDctMjAwfFRBQjA3LTIwMS0zR3xUQUIwNy0yMTB8VEFCMDctMjExfFRBQjA3LTIxMnxUQUIwNy0yMTR8VEFCMDctMjIwfFRBQjA3LTQwMHxUQUIwNy00ODV8VEFCMDgtMTUwfFRBQjA4LTIwMHxUQUIwOC0yMDEtM0d8VEFCMDgtMjAxLTMwfFRBQjA5LTEwMHxUQUIwOS0yMTF8VEFCMDktNDEwfFRBQjEwLTE1MHxUQUIxMC0yMDF8VEFCMTAtMjExfFRBQjEwLTQwMHxUQUIxMC00MTB8VEFCMTMtMjAxfFRBQjI3NEVVS3xUQUIyNzVFVUt8VEFCMzc0RVVLfFRBQjQ2MkVVS3xUQUI0NzRFVUt8VEFCOS0yMDApXFxcXGJcIixcbiAgICAgICAgXCJNZWRpb25UYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYk9ZT1xcXFxifExJRkUuKihQOTIxMnxQOTUxNHxQOTUxNnxTOTUxMil8TElGRVRBQlwiLFxuICAgICAgICBcIkFybm92YVRhYmxldFwiOiBcIjk3RzR8QU4xMEcyfEFON2JHM3xBTjdmRzN8QU44RzN8QU44Y0czfEFON0czfEFOOUczfEFON2RHM3xBTjdkRzNTVHxBTjdkRzNDaGlsZFBhZHxBTjEwYkczfEFOMTBiRzNEVHxBTjlHMlwiLFxuICAgICAgICBcIkludGVuc29UYWJsZXRcIjogXCJJTk04MDAyS1B8SU5NMTAxMEZQfElOTTgwNU5EfEludGVuc28gVGFifFRBQjEwMDRcIixcbiAgICAgICAgXCJJUlVUYWJsZXRcIjogXCJNNzAycHJvXCIsXG4gICAgICAgIFwiTWVnYWZvblRhYmxldFwiOiBcIk1lZ2FGb24gVjl8XFxcXGJaVEUgVjlcXFxcYnxBbmRyb2lkLipcXFxcYk1UN0FcXFxcYlwiLFxuICAgICAgICBcIkVib2RhVGFibGV0XCI6IFwiRS1Cb2RhIChTdXByZW1lfEltcHJlc3NwZWVkfEl6enljb21tfEVzc2VudGlhbClcIixcbiAgICAgICAgXCJBbGxWaWV3VGFibGV0XCI6IFwiQWxsdmlldy4qKFZpdmF8QWxsZHJvfENpdHl8U3BlZWR8QWxsIFRWfEZyZW56eXxRdWFzYXJ8U2hpbmV8VFgxfEFYMXxBWDIpXCIsXG4gICAgICAgIFwiQXJjaG9zVGFibGV0XCI6IFwiXFxcXGIoMTAxRzl8ODBHOXxBMTAxSVQpXFxcXGJ8UWlsaXZlIDk3UnxBcmNob3M1fFxcXFxiQVJDSE9TICg3MHw3OXw4MHw5MHw5N3wxMDF8RkFNSUxZUEFEfCkoYnxjfCkoRzEwfCBDb2JhbHR8IFRJVEFOSVVNKEhEfCl8IFhlbm9ufCBOZW9ufFhTS3wgMnwgWFMgMnwgUExBVElOVU18IENBUkJPTnxHQU1FUEFEKVxcXFxiXCIsXG4gICAgICAgIFwiQWlub2xUYWJsZXRcIjogXCJOT1ZPN3xOT1ZPOHxOT1ZPMTB8Tm92bzdBdXJvcmF8Tm92bzdCYXNpY3xOT1ZPN1BBTEFESU58bm92bzktU3BhcmtcIixcbiAgICAgICAgXCJOb2tpYUx1bWlhVGFibGV0XCI6IFwiTHVtaWEgMjUyMFwiLFxuICAgICAgICBcIlNvbnlUYWJsZXRcIjogXCJTb255LipUYWJsZXR8WHBlcmlhIFRhYmxldHxTb255IFRhYmxldCBTfFNPLTAzRXxTR1BUMTJ8U0dQVDEzfFNHUFQxMTR8U0dQVDEyMXxTR1BUMTIyfFNHUFQxMjN8U0dQVDExMXxTR1BUMTEyfFNHUFQxMTN8U0dQVDEzMXxTR1BUMTMyfFNHUFQxMzN8U0dQVDIxMXxTR1BUMjEyfFNHUFQyMTN8U0dQMzExfFNHUDMxMnxTR1AzMjF8RUJSRDExMDF8RUJSRDExMDJ8RUJSRDEyMDF8U0dQMzUxfFNHUDM0MXxTR1A1MTF8U0dQNTEyfFNHUDUyMXxTR1A1NDF8U0dQNTUxfFNHUDYyMXxTR1A2NDF8U0dQNjEyfFNPVDMxfFNHUDc3MXxTR1A2MTF8U0dQNjEyfFNHUDcxMlwiLFxuICAgICAgICBcIlBoaWxpcHNUYWJsZXRcIjogXCJcXFxcYihQSTIwMTB8UEkzMDAwfFBJMzEwMHxQSTMxMDV8UEkzMTEwfFBJMzIwNXxQSTMyMTB8UEkzOTAwfFBJNDAxMHxQSTcwMDB8UEk3MTAwKVxcXFxiXCIsXG4gICAgICAgIFwiQ3ViZVRhYmxldFwiOiBcIkFuZHJvaWQuKihLOEdUfFU5R1R8VTEwR1R8VTE2R1R8VTE3R1R8VTE4R1R8VTE5R1R8VTIwR1R8VTIzR1R8VTMwR1QpfENVQkUgVThHVFwiLFxuICAgICAgICBcIkNvYnlUYWJsZXRcIjogXCJNSUQxMDQyfE1JRDEwNDV8TUlEMTEyNXxNSUQxMTI2fE1JRDcwMTJ8TUlENzAxNHxNSUQ3MDE1fE1JRDcwMzR8TUlENzAzNXxNSUQ3MDM2fE1JRDcwNDJ8TUlENzA0OHxNSUQ3MTI3fE1JRDgwNDJ8TUlEODA0OHxNSUQ4MTI3fE1JRDkwNDJ8TUlEOTc0MHxNSUQ5NzQyfE1JRDcwMjJ8TUlENzAxMFwiLFxuICAgICAgICBcIk1JRFRhYmxldFwiOiBcIk05NzAxfE05MDAwfE05MTAwfE04MDZ8TTEwNTJ8TTgwNnxUNzAzfE1JRDcwMXxNSUQ3MTN8TUlENzEwfE1JRDcyN3xNSUQ3NjB8TUlEODMwfE1JRDcyOHxNSUQ5MzN8TUlEMTI1fE1JRDgxMHxNSUQ3MzJ8TUlEMTIwfE1JRDkzMHxNSUQ4MDB8TUlENzMxfE1JRDkwMHxNSUQxMDB8TUlEODIwfE1JRDczNXxNSUQ5ODB8TUlEMTMwfE1JRDgzM3xNSUQ3Mzd8TUlEOTYwfE1JRDEzNXxNSUQ4NjB8TUlENzM2fE1JRDE0MHxNSUQ5MzB8TUlEODM1fE1JRDczM3xNSUQ0WDEwXCIsXG4gICAgICAgIFwiTVNJVGFibGV0XCI6IFwiTVNJIFxcXFxiKFByaW1vIDczS3xQcmltbyA3M0x8UHJpbW8gODFMfFByaW1vIDc3fFByaW1vIDkzfFByaW1vIDc1fFByaW1vIDc2fFByaW1vIDczfFByaW1vIDgxfFByaW1vIDkxfFByaW1vIDkwfEVuam95IDcxfEVuam95IDd8RW5qb3kgMTApXFxcXGJcIixcbiAgICAgICAgXCJTTWlUVGFibGV0XCI6IFwiQW5kcm9pZC4qKFxcXFxiTUlEXFxcXGJ8TUlELTU2MHxNVFYtVDEyMDB8TVRWLVBORDUzMXxNVFYtUDExMDF8TVRWLVBORDUzMClcIixcbiAgICAgICAgXCJSb2NrQ2hpcFRhYmxldFwiOiBcIkFuZHJvaWQuKihSSzI4MTh8UksyODA4QXxSSzI5MTh8UkszMDY2KXxSSzI3Mzh8UksyODA4QVwiLFxuICAgICAgICBcIkZseVRhYmxldFwiOiBcIklRMzEwfEZseSBWaXNpb25cIixcbiAgICAgICAgXCJicVRhYmxldFwiOiBcIkFuZHJvaWQuKihicSk/LipcXFxcYihFbGNhbm98Q3VyaWV8RWRpc29ufE1heHdlbGx8S2VwbGVyfFBhc2NhbHxUZXNsYXxIeXBhdGlhfFBsYXRvbnxOZXd0b258TGl2aW5nc3RvbmV8Q2VydmFudGVzfEF2YW50fEFxdWFyaXMgKFtFfE1dMTB8TTgpKVxcXFxifE1heHdlbGwuKkxpdGV8TWF4d2VsbC4qUGx1c1wiLFxuICAgICAgICBcIkh1YXdlaVRhYmxldFwiOiBcIk1lZGlhUGFkfE1lZGlhUGFkIDcgWW91dGh8SURFT1MgUzd8UzctMjAxY3xTNy0yMDJ1fFM3LTEwMXxTNy0xMDN8UzctMTA0fFM3LTEwNXxTNy0xMDZ8UzctMjAxfFM3LVNsaW18TTItQTAxTHxCQUgtTDA5fEJBSC1XMDl8QUdTLUwwOXxDTVItQUwxOVwiLFxuICAgICAgICBcIk5lY1RhYmxldFwiOiBcIlxcXFxiTi0wNkR8XFxcXGJOLTA4RFwiLFxuICAgICAgICBcIlBhbnRlY2hUYWJsZXRcIjogXCJQYW50ZWNoLipQNDEwMFwiLFxuICAgICAgICBcIkJyb25jaG9UYWJsZXRcIjogXCJCcm9uY2hvLiooTjcwMXxONzA4fE44MDJ8YTcxMClcIixcbiAgICAgICAgXCJWZXJzdXNUYWJsZXRcIjogXCJUT1VDSFBBRC4qWzc4OTEwXXxcXFxcYlRPVUNIVEFCXFxcXGJcIixcbiAgICAgICAgXCJaeW5jVGFibGV0XCI6IFwiejEwMDB8Wjk5IDJHfHo5MzB8ejk5MHx6OTA5fFo5MTl8ejkwMFwiLFxuICAgICAgICBcIlBvc2l0aXZvVGFibGV0XCI6IFwiVEIwN1NUQXxUQjEwU1RBfFRCMDdGVEF8VEIxMEZUQVwiLFxuICAgICAgICBcIk5hYmlUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYk5hYmlcIixcbiAgICAgICAgXCJLb2JvVGFibGV0XCI6IFwiS29ibyBUb3VjaHxcXFxcYkswODBcXFxcYnxcXFxcYlZveFxcXFxiIEJ1aWxkfFxcXFxiQXJjXFxcXGIgQnVpbGRcIixcbiAgICAgICAgXCJEYW5ld1RhYmxldFwiOiBcIkRTbGlkZS4qXFxcXGIoNzAwfDcwMVJ8NzAyfDcwM1J8NzA0fDgwMnw5NzB8OTcxfDk3Mnw5NzN8OTc0fDEwMTB8MTAxMilcXFxcYlwiLFxuICAgICAgICBcIlRleGV0VGFibGV0XCI6IFwiTmF2aVBhZHxUQi03NzJBfFRNLTcwNDV8VE0tNzA1NXxUTS05NzUwfFRNLTcwMTZ8VE0tNzAyNHxUTS03MDI2fFRNLTcwNDF8VE0tNzA0M3xUTS03MDQ3fFRNLTgwNDF8VE0tOTc0MXxUTS05NzQ3fFRNLTk3NDh8VE0tOTc1MXxUTS03MDIyfFRNLTcwMjF8VE0tNzAyMHxUTS03MDExfFRNLTcwMTB8VE0tNzAyM3xUTS03MDI1fFRNLTcwMzdXfFRNLTcwMzhXfFRNLTcwMjdXfFRNLTk3MjB8VE0tOTcyNXxUTS05NzM3V3xUTS0xMDIwfFRNLTk3MzhXfFRNLTk3NDB8VE0tOTc0M1d8VEItODA3QXxUQi03NzFBfFRCLTcyN0F8VEItNzI1QXxUQi03MTlBfFRCLTgyM0F8VEItODA1QXxUQi03MjNBfFRCLTcxNUF8VEItNzA3QXxUQi03MDVBfFRCLTcwOUF8VEItNzExQXxUQi04OTBIRHxUQi04ODBIRHxUQi03OTBIRHxUQi03ODBIRHxUQi03NzBIRHxUQi03MjFIRHxUQi03MTBIRHxUQi00MzRIRHxUQi04NjBIRHxUQi04NDBIRHxUQi03NjBIRHxUQi03NTBIRHxUQi03NDBIRHxUQi03MzBIRHxUQi03MjJIRHxUQi03MjBIRHxUQi03MDBIRHxUQi01MDBIRHxUQi00NzBIRHxUQi00MzFIRHxUQi00MzBIRHxUQi01MDZ8VEItNTA0fFRCLTQ0NnxUQi00MzZ8VEItNDE2fFRCLTE0NlNFfFRCLTEyNlNFXCIsXG4gICAgICAgIFwiUGxheXN0YXRpb25UYWJsZXRcIjogXCJQbGF5c3RhdGlvbi4qKFBvcnRhYmxlfFZpdGEpXCIsXG4gICAgICAgIFwiVHJla3N0b3JUYWJsZXRcIjogXCJTVDEwNDE2LTF8VlQxMDQxNi0xfFNUNzA0MDgtMXxTVDcwMnh4LTF8U1Q3MDJ4eC0yfFNUODAyMDh8U1Q5NzIxNnxTVDcwMTA0LTJ8VlQxMDQxNi0yfFNUMTAyMTYtMkF8U3VyZlRhYlwiLFxuICAgICAgICBcIlB5bGVBdWRpb1RhYmxldFwiOiBcIlxcXFxiKFBUQkwxMENFVXxQVEJMMTBDfFBUQkw3MkJDfFBUQkw3MkJDRVV8UFRCTDdDRVV8UFRCTDdDfFBUQkw5MkJDfFBUQkw5MkJDRVV8UFRCTDlDRVV8UFRCTDlDVUt8UFRCTDlDKVxcXFxiXCIsXG4gICAgICAgIFwiQWR2YW5UYWJsZXRcIjogXCJBbmRyb2lkLiogXFxcXGIoRTNBfFQzWHxUNUN8VDVCfFQzRXxUM0N8VDNCfFQxSnxUMUZ8VDJBfFQxSHxUMWl8RTFDfFQxLUV8VDUtQXxUNHxFMS1CfFQyQ2l8VDEtQnxUMS1EfE8xLUF8RTEtQXxUMS1BfFQzQXxUNGkpXFxcXGIgXCIsXG4gICAgICAgIFwiRGFueVRlY2hUYWJsZXRcIjogXCJHZW5pdXMgVGFiIEczfEdlbml1cyBUYWIgUzJ8R2VuaXVzIFRhYiBRM3xHZW5pdXMgVGFiIEc0fEdlbml1cyBUYWIgUTR8R2VuaXVzIFRhYiBHLUlJfEdlbml1cyBUQUIgR0lJfEdlbml1cyBUQUIgR0lJSXxHZW5pdXMgVGFiIFMxXCIsXG4gICAgICAgIFwiR2FsYXBhZFRhYmxldFwiOiBcIkFuZHJvaWQuKlxcXFxiRzFcXFxcYig/IVxcXFwpKVwiLFxuICAgICAgICBcIk1pY3JvbWF4VGFibGV0XCI6IFwiRnVuYm9va3xNaWNyb21heC4qXFxcXGIoUDI1MHxQNTYwfFAzNjB8UDM2MnxQNjAwfFAzMDB8UDM1MHxQNTAwfFAyNzUpXFxcXGJcIixcbiAgICAgICAgXCJLYXJib25uVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoQTM5fEEzN3xBMzR8U1Q4fFNUMTB8U1Q3fFNtYXJ0IFRhYjN8U21hcnQgVGFiMilcXFxcYlwiLFxuICAgICAgICBcIkFsbEZpbmVUYWJsZXRcIjogXCJGaW5lNyBHZW5pdXN8RmluZTcgU2hpbmV8RmluZTcgQWlyfEZpbmU4IFN0eWxlfEZpbmU5IE1vcmV8RmluZTEwIEpveXxGaW5lMTEgV2lkZVwiLFxuICAgICAgICBcIlBST1NDQU5UYWJsZXRcIjogXCJcXFxcYihQRU02M3xQTFQxMDIzR3xQTFQxMDQxfFBMVDEwNDR8UExUMTA0NEd8UExUMTA5MXxQTFQ0MzExfFBMVDQzMTFQTHxQTFQ0MzE1fFBMVDcwMzB8UExUNzAzM3xQTFQ3MDMzRHxQTFQ3MDM1fFBMVDcwMzVEfFBMVDcwNDRLfFBMVDcwNDVLfFBMVDcwNDVLQnxQTFQ3MDcxS0d8UExUNzA3MnxQTFQ3MjIzR3xQTFQ3MjI1R3xQTFQ3Nzc3R3xQTFQ3ODEwS3xQTFQ3ODQ5R3xQTFQ3ODUxR3xQTFQ3ODUyR3xQTFQ4MDE1fFBMVDgwMzF8UExUODAzNHxQTFQ4MDM2fFBMVDgwODBLfFBMVDgwODJ8UExUODA4OHxQTFQ4MjIzR3xQTFQ4MjM0R3xQTFQ4MjM1R3xQTFQ4ODE2S3xQTFQ5MDExfFBMVDkwNDVLfFBMVDkyMzNHfFBMVDk3MzV8UExUOTc2MEd8UExUOTc3MEcpXFxcXGJcIixcbiAgICAgICAgXCJZT05FU1RhYmxldFwiOiBcIkJRMTA3OHxCQzEwMDN8QkMxMDc3fFJLOTcwMnxCQzk3MzB8QkM5MDAxfElUOTAwMXxCQzcwMDh8QkM3MDEwfEJDNzA4fEJDNzI4fEJDNzAxMnxCQzcwMzB8QkM3MDI3fEJDNzAyNlwiLFxuICAgICAgICBcIkNoYW5nSmlhVGFibGV0XCI6IFwiVFBDNzEwMnxUUEM3MTAzfFRQQzcxMDV8VFBDNzEwNnxUUEM3MTA3fFRQQzcyMDF8VFBDNzIwM3xUUEM3MjA1fFRQQzcyMTB8VFBDNzcwOHxUUEM3NzA5fFRQQzc3MTJ8VFBDNzExMHxUUEM4MTAxfFRQQzgxMDN8VFBDODEwNXxUUEM4MTA2fFRQQzgyMDN8VFBDODIwNXxUUEM4NTAzfFRQQzkxMDZ8VFBDOTcwMXxUUEM5NzEwMXxUUEM5NzEwM3xUUEM5NzEwNXxUUEM5NzEwNnxUUEM5NzExMXxUUEM5NzExM3xUUEM5NzIwM3xUUEM5NzYwM3xUUEM5NzgwOXxUUEM5NzIwNXxUUEMxMDEwMXxUUEMxMDEwM3xUUEMxMDEwNnxUUEMxMDExMXxUUEMxMDIwM3xUUEMxMDIwNXxUUEMxMDUwM1wiLFxuICAgICAgICBcIkdVVGFibGV0XCI6IFwiVFgtQTEzMDF8VFgtTTkwMDJ8UTcwMnxrZjAyNlwiLFxuICAgICAgICBcIlBvaW50T2ZWaWV3VGFibGV0XCI6IFwiVEFCLVA1MDZ8VEFCLW5hdmktNy0zRy1NfFRBQi1QNTE3fFRBQi1QLTUyN3xUQUItUDcwMXxUQUItUDcwM3xUQUItUDcyMXxUQUItUDczMU58VEFCLVA3NDF8VEFCLVA4MjV8VEFCLVA5MDV8VEFCLVA5MjV8VEFCLVBSOTQ1fFRBQi1QTDEwMTV8VEFCLVAxMDI1fFRBQi1QSTEwNDV8VEFCLVAxMzI1fFRBQi1QUk9UQUJbMC05XSt8VEFCLVBST1RBQjI1fFRBQi1QUk9UQUIyNnxUQUItUFJPVEFCMjd8VEFCLVBST1RBQjI2WEx8VEFCLVBST1RBQjItSVBTOXxUQUItUFJPVEFCMzAtSVBTOXxUQUItUFJPVEFCMjVYWEx8VEFCLVBST1RBQjI2LUlQUzEwfFRBQi1QUk9UQUIzMC1JUFMxMFwiLFxuICAgICAgICBcIk92ZXJtYXhUYWJsZXRcIjogXCJPVi0oU3RlZWxDb3JlfE5ld0Jhc2V8QmFzZWNvcmV8QmFzZW9uZXxFeGVsbGVufFF1YXR0b3J8RWR1VGFifFNvbHV0aW9ufEFDVElPTnxCYXNpY1RhYnxUZWRkeVRhYnxNYWdpY1RhYnxTdHJlYW18VEItMDh8VEItMDkpfFF1YWxjb3JlIDEwMjdcIixcbiAgICAgICAgXCJIQ0xUYWJsZXRcIjogXCJIQ0wuKlRhYmxldHxDb25uZWN0LTNHLTIuMHxDb25uZWN0LTJHLTIuMHxNRSBUYWJsZXQgVTF8TUUgVGFibGV0IFUyfE1FIFRhYmxldCBHMXxNRSBUYWJsZXQgWDF8TUUgVGFibGV0IFkyfE1FIFRhYmxldCBTeW5jXCIsXG4gICAgICAgIFwiRFBTVGFibGV0XCI6IFwiRFBTIERyZWFtIDl8RFBTIER1YWwgN1wiLFxuICAgICAgICBcIlZpc3R1cmVUYWJsZXRcIjogXCJWOTcgSER8aTc1IDNHfFZpc3R1cmUgVjQoIEhEKT98VmlzdHVyZSBWNSggSEQpP3xWaXN0dXJlIFYxMFwiLFxuICAgICAgICBcIkNyZXN0YVRhYmxldFwiOiBcIkNUUCgtKT84MTB8Q1RQKC0pPzgxOHxDVFAoLSk/ODI4fENUUCgtKT84Mzh8Q1RQKC0pPzg4OHxDVFAoLSk/OTc4fENUUCgtKT85ODB8Q1RQKC0pPzk4N3xDVFAoLSk/OTg4fENUUCgtKT85ODlcIixcbiAgICAgICAgXCJNZWRpYXRla1RhYmxldFwiOiBcIlxcXFxiTVQ4MTI1fE1UODM4OXxNVDgxMzV8TVQ4Mzc3XFxcXGJcIixcbiAgICAgICAgXCJDb25jb3JkZVRhYmxldFwiOiBcIkNvbmNvcmRlKFsgXSspP1RhYnxDb25Db3JkZSBSZWFkTWFuXCIsXG4gICAgICAgIFwiR29DbGV2ZXJUYWJsZXRcIjogXCJHT0NMRVZFUiBUQUJ8QTdHT0NMRVZFUnxNMTA0MnxNNzg0MXxNNzQyfFIxMDQyQkt8UjEwNDF8VEFCIEE5NzV8VEFCIEE3ODQyfFRBQiBBNzQxfFRBQiBBNzQxTHxUQUIgTTcyM0d8VEFCIE03MjF8VEFCIEExMDIxfFRBQiBJOTIxfFRBQiBSNzIxfFRBQiBJNzIwfFRBQiBUNzZ8VEFCIFI3MHxUQUIgUjc2LjJ8VEFCIFIxMDZ8VEFCIFI4My4yfFRBQiBNODEzR3xUQUIgSTcyMXxHQ1RBNzIyfFRBQiBJNzB8VEFCIEk3MXxUQUIgUzczfFRBQiBSNzN8VEFCIFI3NHxUQUIgUjkzfFRBQiBSNzV8VEFCIFI3Ni4xfFRBQiBBNzN8VEFCIEE5M3xUQUIgQTkzLjJ8VEFCIFQ3MnxUQUIgUjgzfFRBQiBSOTc0fFRBQiBSOTczfFRBQiBBMTAxfFRBQiBBMTAzfFRBQiBBMTA0fFRBQiBBMTA0LjJ8UjEwNUJLfE03MTNHfEE5NzJCS3xUQUIgQTk3MXxUQUIgUjk3NC4yfFRBQiBSMTA0fFRBQiBSODMuM3xUQUIgQTEwNDJcIixcbiAgICAgICAgXCJNb2RlY29tVGFibGV0XCI6IFwiRnJlZVRBQiA5MDAwfEZyZWVUQUIgNy40fEZyZWVUQUIgNzAwNHxGcmVlVEFCIDc4MDB8RnJlZVRBQiAyMDk2fEZyZWVUQUIgNy41fEZyZWVUQUIgMTAxNHxGcmVlVEFCIDEwMDEgfEZyZWVUQUIgODAwMXxGcmVlVEFCIDk3MDZ8RnJlZVRBQiA5NzAyfEZyZWVUQUIgNzAwM3xGcmVlVEFCIDcwMDJ8RnJlZVRBQiAxMDAyfEZyZWVUQUIgNzgwMXxGcmVlVEFCIDEzMzF8RnJlZVRBQiAxMDA0fEZyZWVUQUIgODAwMnxGcmVlVEFCIDgwMTR8RnJlZVRBQiA5NzA0fEZyZWVUQUIgMTAwM1wiLFxuICAgICAgICBcIlZvbmlub1RhYmxldFwiOiBcIlxcXFxiKEFyZ3VzWyBfXT9TfERpYW1vbmRbIF9dPzc5SER8RW1lcmFsZFsgX10/NzhFfEx1bmFbIF9dPzcwQ3xPbnl4WyBfXT9TfE9ueXhbIF9dP1p8T3JpblsgX10/SER8T3JpblsgX10/U3xPdGlzWyBfXT9TfFNwZWVkU3RhclsgX10/U3xNYWduZXRbIF9dP005fFByaW11c1sgX10/OTRbIF9dPzNHfFByaW11c1sgX10/OTRIRHxQcmltdXNbIF9dP1FTfEFuZHJvaWQuKlxcXFxiUThcXFxcYnxTaXJpdXNbIF9dP0VWT1sgX10/UVN8U2lyaXVzWyBfXT9RU3xTcGlyaXRbIF9dP1MpXFxcXGJcIixcbiAgICAgICAgXCJFQ1NUYWJsZXRcIjogXCJWMDdPVDJ8VE0xMDVBfFMxME9UMXxUUjEwQ1MxXCIsXG4gICAgICAgIFwiU3RvcmV4VGFibGV0XCI6IFwiZVplZVtfJ10/KFRhYnxHbylbMC05XSt8VGFiTEM3fExvb25leSBUdW5lcyBUYWJcIixcbiAgICAgICAgXCJWb2RhZm9uZVRhYmxldFwiOiBcIlNtYXJ0VGFiKFsgXSspP1swLTldK3xTbWFydFRhYklJMTB8U21hcnRUYWJJSTd8VkYtMTQ5N3xWRkQgMTQwMFwiLFxuICAgICAgICBcIkVzc2VudGllbEJUYWJsZXRcIjogXCJTbWFydFsgJ10/VEFCWyBdKz9bMC05XSt8RmFtaWx5WyAnXT9UQUIyXCIsXG4gICAgICAgIFwiUm9zc01vb3JUYWJsZXRcIjogXCJSTS03OTB8Uk0tOTk3fFJNRC04NzhHfFJNRC05NzRSfFJNVC03MDVBfFJNVC03MDF8Uk1FLTYwMXxSTVQtNTAxfFJNVC03MTFcIixcbiAgICAgICAgXCJpTW9iaWxlVGFibGV0XCI6IFwiaS1tb2JpbGUgaS1ub3RlXCIsXG4gICAgICAgIFwiVG9saW5vVGFibGV0XCI6IFwidG9saW5vIHRhYiBbMC05Ll0rfHRvbGlubyBzaGluZVwiLFxuICAgICAgICBcIkF1ZGlvU29uaWNUYWJsZXRcIjogXCJcXFxcYkMtMjJRfFQ3LVFDfFQtMTdCfFQtMTdQXFxcXGJcIixcbiAgICAgICAgXCJBTVBFVGFibGV0XCI6IFwiQW5kcm9pZC4qIEE3OCBcIixcbiAgICAgICAgXCJTa2tUYWJsZXRcIjogXCJBbmRyb2lkLiogKFNLWVBBRHxQSE9FTklYfENZQ0xPUFMpXCIsXG4gICAgICAgIFwiVGVjbm9UYWJsZXRcIjogXCJURUNOTyBQOXxURUNOTyBEUDhEXCIsXG4gICAgICAgIFwiSlhEVGFibGV0XCI6IFwiQW5kcm9pZC4qIFxcXFxiKEYzMDAwfEEzMzAwfEpYRDUwMDB8SlhEMzAwMHxKWEQyMDAwfEpYRDMwMEJ8SlhEMzAwfFM1ODAwfFM3ODAwfFM2MDJifFM1MTEwYnxTNzMwMHxTNTMwMHxTNjAyfFM2MDN8UzUxMDB8UzUxMTB8UzYwMXxTNzEwMGF8UDMwMDBGfFAzMDAwc3xQMTAxfFAyMDBzfFAxMDAwbXxQMjAwbXxQOTEwMHxQMTAwMHN8UzY2MDBifFM5MDh8UDEwMDB8UDMwMHxTMTh8UzY2MDB8UzkxMDApXFxcXGJcIixcbiAgICAgICAgXCJpSm95VGFibGV0XCI6IFwiVGFibGV0IChTcGlyaXQgN3xFc3NlbnRpYXxHYWxhdGVhfEZ1c2lvbnxPbml4IDd8TGFuZGF8VGl0YW58U2Nvb2J5fERlb3h8U3RlbGxhfFRoZW1pc3xBcmdvbnxVbmlxdWUgN3xTeWdudXN8SGV4ZW58RmluaXR5IDd8Q3JlYW18Q3JlYW0gWDJ8SmFkZXxOZW9uIDd8TmVyb24gN3xLYW5keXxTY2FwZXxTYXBoeXIgN3xSZWJlbHxCaW94fFJlYmVsfFJlYmVsIDhHQnxNeXN0fERyYWNvIDd8TXlzdHxUYWI3LTAwNHxNeXN0fFRhZGVvIEpvbmVzfFRhYmxldCBCb2luZ3xBcnJvd3xEcmFjbyBEdWFsIENhbXxBdXJpeHxNaW50fEFtaXR5fFJldm9sdXRpb258RmluaXR5IDl8TmVvbiA5fFQ5d3xBbWl0eSA0R0IgRHVhbCBDYW18U3RvbmUgNEdCfFN0b25lIDhHQnxBbmRyb21lZGF8U2lsa2VufFgyfEFuZHJvbWVkYSBJSXxIYWxsZXl8RmxhbWV8U2FwaHlyIDksN3xUb3VjaCA4fFBsYW5ldHxUcml0b258VW5pcXVlIDEwfEhleGVuIDEwfE1lbXBoaXMgNEdCfE1lbXBoaXMgOEdCfE9uaXggMTApXCIsXG4gICAgICAgIFwiRlgyVGFibGV0XCI6IFwiRlgyIFBBRDd8RlgyIFBBRDEwXCIsXG4gICAgICAgIFwiWG9yb1RhYmxldFwiOiBcIktpZHNQQUQgNzAxfFBBRFsgXT83MTJ8UEFEWyBdPzcxNHxQQURbIF0/NzE2fFBBRFsgXT83MTd8UEFEWyBdPzcxOHxQQURbIF0/NzIwfFBBRFsgXT83MjF8UEFEWyBdPzcyMnxQQURbIF0/NzkwfFBBRFsgXT83OTJ8UEFEWyBdPzkwMHxQQURbIF0/OTcxNUR8UEFEWyBdPzk3MTZEUnxQQURbIF0/OTcxOERSfFBBRFsgXT85NzE5UVJ8UEFEWyBdPzk3MjBRUnxUZWxlUEFEMTAzMHxUZWxlcGFkMTAzMnxUZWxlUEFENzMwfFRlbGVQQUQ3MzF8VGVsZVBBRDczMnxUZWxlUEFENzM1UXxUZWxlUEFEODMwfFRlbGVQQUQ5NzMwfFRlbGVQQUQ3OTV8TWVnYVBBRCAxMzMxfE1lZ2FQQUQgMTg1MXxNZWdhUEFEIDIxNTFcIixcbiAgICAgICAgXCJWaWV3c29uaWNUYWJsZXRcIjogXCJWaWV3UGFkIDEwcGl8Vmlld1BhZCAxMGV8Vmlld1BhZCAxMHN8Vmlld1BhZCBFNzJ8Vmlld1BhZDd8Vmlld1BhZCBFMTAwfFZpZXdQYWQgN2V8Vmlld1NvbmljIFZCNzMzfFZCMTAwYVwiLFxuICAgICAgICBcIlZlcml6b25UYWJsZXRcIjogXCJRVEFRWjN8UVRBSVI3fFFUQVFUWjN8UVRBU1VOMXxRVEFTVU4yfFFUQVhJQTFcIixcbiAgICAgICAgXCJPZHlzVGFibGV0XCI6IFwiTE9PWHxYRU5PMTB8T0RZU1sgLV0oU3BhY2V8RVZPfFhwcmVzc3xOT09OKXxcXFxcYlhFTElPXFxcXGJ8WGVsaW8xMFByb3xYRUxJTzdQSE9ORVRBQnxYRUxJTzEwRVhUUkVNRXxYRUxJT1BUMnxORU9fUVVBRDEwXCIsXG4gICAgICAgIFwiQ2FwdGl2YVRhYmxldFwiOiBcIkNBUFRJVkEgUEFEXCIsXG4gICAgICAgIFwiSWNvbmJpdFRhYmxldFwiOiBcIk5ldFRBQnxOVC0zNzAyfE5ULTM3MDJTfE5ULTM3MDJTfE5ULTM2MDNQfE5ULTM2MDNQfE5ULTA3MDRTfE5ULTA3MDRTfE5ULTM4MDVDfE5ULTM4MDVDfE5ULTA4MDZDfE5ULTA4MDZDfE5ULTA5MDlUfE5ULTA5MDlUfE5ULTA5MDdTfE5ULTA5MDdTfE5ULTA5MDJTfE5ULTA5MDJTXCIsXG4gICAgICAgIFwiVGVjbGFzdFRhYmxldFwiOiBcIlQ5OCA0R3xcXFxcYlA4MFxcXFxifFxcXFxiWDkwSERcXFxcYnxYOTggQWlyfFg5OCBBaXIgM0d8XFxcXGJYODlcXFxcYnxQODAgM0d8XFxcXGJYODBoXFxcXGJ8UDk4IEFpcnxcXFxcYlg4OUhEXFxcXGJ8UDk4IDNHfFxcXFxiUDkwSERcXFxcYnxQODkgM0d8WDk4IDNHfFxcXFxiUDcwaFxcXFxifFA3OUhEIDNHfEcxOGQgM0d8XFxcXGJQNzlIRFxcXFxifFxcXFxiUDg5c1xcXFxifFxcXFxiQTg4XFxcXGJ8XFxcXGJQMTBIRFxcXFxifFxcXFxiUDE5SERcXFxcYnxHMTggM0d8XFxcXGJQNzhIRFxcXFxifFxcXFxiQTc4XFxcXGJ8XFxcXGJQNzVcXFxcYnxHMTdzIDNHfEcxN2ggM0d8XFxcXGJQODV0XFxcXGJ8XFxcXGJQOTBcXFxcYnxcXFxcYlAxMVxcXFxifFxcXFxiUDk4dFxcXFxifFxcXFxiUDk4SERcXFxcYnxcXFxcYkcxOGRcXFxcYnxcXFxcYlA4NXNcXFxcYnxcXFxcYlAxMUhEXFxcXGJ8XFxcXGJQODhzXFxcXGJ8XFxcXGJBODBIRFxcXFxifFxcXFxiQTgwc2VcXFxcYnxcXFxcYkExMGhcXFxcYnxcXFxcYlA4OVxcXFxifFxcXFxiUDc4c1xcXFxifFxcXFxiRzE4XFxcXGJ8XFxcXGJQODVcXFxcYnxcXFxcYkE3MGhcXFxcYnxcXFxcYkE3MFxcXFxifFxcXFxiRzE3XFxcXGJ8XFxcXGJQMThcXFxcYnxcXFxcYkE4MHNcXFxcYnxcXFxcYkExMXNcXFxcYnxcXFxcYlA4OEhEXFxcXGJ8XFxcXGJBODBoXFxcXGJ8XFxcXGJQNzZzXFxcXGJ8XFxcXGJQNzZoXFxcXGJ8XFxcXGJQOThcXFxcYnxcXFxcYkExMEhEXFxcXGJ8XFxcXGJQNzhcXFxcYnxcXFxcYlA4OFxcXFxifFxcXFxiQTExXFxcXGJ8XFxcXGJBMTB0XFxcXGJ8XFxcXGJQNzZhXFxcXGJ8XFxcXGJQNzZ0XFxcXGJ8XFxcXGJQNzZlXFxcXGJ8XFxcXGJQODVIRFxcXFxifFxcXFxiUDg1YVxcXFxifFxcXFxiUDg2XFxcXGJ8XFxcXGJQNzVIRFxcXFxifFxcXFxiUDc2dlxcXFxifFxcXFxiQTEyXFxcXGJ8XFxcXGJQNzVhXFxcXGJ8XFxcXGJBMTVcXFxcYnxcXFxcYlA3NlRpXFxcXGJ8XFxcXGJQODFIRFxcXFxifFxcXFxiQTEwXFxcXGJ8XFxcXGJUNzYwVkVcXFxcYnxcXFxcYlQ3MjBIRFxcXFxifFxcXFxiUDc2XFxcXGJ8XFxcXGJQNzNcXFxcYnxcXFxcYlA3MVxcXFxifFxcXFxiUDcyXFxcXGJ8XFxcXGJUNzIwU0VcXFxcYnxcXFxcYkM1MjBUaVxcXFxifFxcXFxiVDc2MFxcXFxifFxcXFxiVDcyMFZFXFxcXGJ8VDcyMC0zR0V8VDcyMC1XaUZpXCIsXG4gICAgICAgIFwiT25kYVRhYmxldFwiOiBcIlxcXFxiKFY5NzVpfFZpMzB8Vlg1MzB8VjcwMXxWaTYwfFY3MDFzfFZpNTB8VjgwMXN8VjcxOXxWeDYxMHd8Vlg2MTBXfFY4MTlpfFZpMTB8Vlg1ODBXfFZpMTB8VjcxMXN8VjgxM3xWODExfFY4MjB3fFY4MjB8VmkyMHxWNzExfFZJMzBXfFY3MTJ8Vjg5MXd8Vjk3MnxWODE5d3xWODIwd3xWaTYwfFY4MjB3fFY3MTF8VjgxM3N8VjgwMXxWODE5fFY5NzVzfFY4MDF8VjgxOXxWODE5fFY4MTh8VjgxMXxWNzEyfFY5NzVtfFYxMDF3fFY5NjF3fFY4MTJ8VjgxOHxWOTcxfFY5NzFzfFY5MTl8Vjk4OXxWMTE2d3xWMTAyd3xWOTczfFZpNDApXFxcXGJbXFxcXHNdK3xWMTAgXFxcXGI0R1xcXFxiXCIsXG4gICAgICAgIFwiSmF5dGVjaFRhYmxldFwiOiBcIlRQQy1QQTc2MlwiLFxuICAgICAgICBcIkJsYXVwdW5rdFRhYmxldFwiOiBcIkVuZGVhdm91ciA4MDBOR3xFbmRlYXZvdXIgMTAxMFwiLFxuICAgICAgICBcIkRpZ21hVGFibGV0XCI6IFwiXFxcXGIoaUR4MTB8aUR4OXxpRHg4fGlEeDd8aUR4RDd8aUR4RDh8aURzUTh8aURzUTd8aURzUTh8aURzRDEwfGlEbkQ3fDNUUzgwNEh8aURzUTExfGlEajd8aURzMTApXFxcXGJcIixcbiAgICAgICAgXCJFdm9saW9UYWJsZXRcIjogXCJBUklBX01pbmlfd2lmaXxBcmlhWyBfXU1pbml8RXZvbGlvIFgxMHxFdm9saW8gWDd8RXZvbGlvIFg4fFxcXFxiRXZvdGFiXFxcXGJ8XFxcXGJOZXVyYVxcXFxiXCIsXG4gICAgICAgIFwiTGF2YVRhYmxldFwiOiBcIlFQQUQgRTcwNHxcXFxcYkl2b3J5U1xcXFxifEUtVEFCIElWT1JZfFxcXFxiRS1UQUJcXFxcYlwiLFxuICAgICAgICBcIkFvY1RhYmxldFwiOiBcIk1XMDgxMXxNVzA4MTJ8TVcwOTIyfE1USzgzODJ8TVcxMDMxfE1XMDgzMXxNVzA4MjF8TVcwOTMxfE1XMDcxMlwiLFxuICAgICAgICBcIk1wbWFuVGFibGV0XCI6IFwiTVAxMSBPQ1RBfE1QMTAgT0NUQXxNUFFDMTExNHxNUFFDMTAwNHxNUFFDOTk0fE1QUUM5NzR8TVBRQzk3M3xNUFFDODA0fE1QUUM3ODR8TVBRQzc4MHxcXFxcYk1QRzdcXFxcYnxNUERDRzc1fE1QRENHNzF8TVBEQzEwMDZ8TVAxMDFEQ3xNUERDOTAwMHxNUERDOTA1fE1QREM3MDZIRHxNUERDNzA2fE1QREM3MDV8TVBEQzExMHxNUERDMTAwfE1QREM5OXxNUERDOTd8TVBEQzg4fE1QREM4fE1QREM3N3xNUDcwOXxNSUQ3MDF8TUlENzExfE1JRDE3MHxNUERDNzAzfE1QUUMxMDEwXCIsXG4gICAgICAgIFwiQ2Vsa29uVGFibGV0XCI6IFwiQ1Q2OTV8Q1Q4ODh8Q1RbXFxcXHNdPzkxMHxDVDcgVGFifENUOSBUYWJ8Q1QzIFRhYnxDVDIgVGFifENUMSBUYWJ8QzgyMHxDNzIwfFxcXFxiQ1QtMVxcXFxiXCIsXG4gICAgICAgIFwiV29sZGVyVGFibGV0XCI6IFwibWlUYWIgXFxcXGIoRElBTU9ORHxTUEFDRXxCUk9PS0xZTnxORU98RkxZfE1BTkhBVFRBTnxGVU5LfEVWT0xVVElPTnxTS1l8R09DQVJ8SVJPTnxHRU5JVVN8UE9QfE1JTlR8RVBTSUxPTnxCUk9BRFdBWXxKVU1QfEhPUHxMRUdFTkR8TkVXIEFHRXxMSU5FfEFEVkFOQ0V8RkVFTHxGT0xMT1d8TElLRXxMSU5LfExJVkV8VEhJTkt8RlJFRURPTXxDSElDQUdPfENMRVZFTEFORHxCQUxUSU1PUkUtR0h8SU9XQXxCT1NUT058U0VBVFRMRXxQSE9FTklYfERBTExBU3xJTiAxMDF8TWFzdGVyQ2hlZilcXFxcYlwiLFxuICAgICAgICBcIk1lZGlhY29tVGFibGV0XCI6IFwiTS1NUEkxMEMzR3xNLVNQMTBFR3xNLVNQMTBFR1B8TS1TUDEwSFhBSHxNLVNQN0hYQUh8TS1TUDEwSFhCSHxNLVNQOEhYQUh8TS1TUDhNWEFcIixcbiAgICAgICAgXCJNaVRhYmxldFwiOiBcIlxcXFxiTUkgUEFEXFxcXGJ8XFxcXGJITSBOT1RFIDFXXFxcXGJcIixcbiAgICAgICAgXCJOaWJpcnVUYWJsZXRcIjogXCJOaWJpcnUgTTF8TmliaXJ1IEp1cGl0ZXIgT25lXCIsXG4gICAgICAgIFwiTmV4b1RhYmxldFwiOiBcIk5FWE8gTk9WQXxORVhPIDEwfE5FWE8gQVZJT3xORVhPIEZSRUV8TkVYTyBHT3xORVhPIEVWT3xORVhPIDNHfE5FWE8gU01BUlR8TkVYTyBLSURET3xORVhPIE1PQklcIixcbiAgICAgICAgXCJMZWFkZXJUYWJsZXRcIjogXCJUQkxUMTBRfFRCTFQxMEl8VEJMLTEwV0RLQnxUQkwtMTBXREtCTzIwMTN8VEJMLVcyMzBWMnxUQkwtVzQ1MHxUQkwtVzUwMHxTVjU3MnxUQkxUN0l8VEJBLUFDNy04R3xUQkxUNzl8VEJMLThXMTZ8VEJMLTEwVzMyfFRCTC0xMFdLQnxUQkwtVzEwMFwiLFxuICAgICAgICBcIlViaXNsYXRlVGFibGV0XCI6IFwiVWJpU2xhdGVbXFxcXHNdPzdDXCIsXG4gICAgICAgIFwiUG9ja2V0Qm9va1RhYmxldFwiOiBcIlBvY2tldGJvb2tcIixcbiAgICAgICAgXCJLb2Nhc29UYWJsZXRcIjogXCJcXFxcYihUQi0xMjA3KVxcXFxiXCIsXG4gICAgICAgIFwiSGlzZW5zZVRhYmxldFwiOiBcIlxcXFxiKEY1MjgxfEUyMzcxKVxcXFxiXCIsXG4gICAgICAgIFwiSHVkbFwiOiBcIkh1ZGwgSFQ3UzN8SHVkbCAyXCIsXG4gICAgICAgIFwiVGVsc3RyYVRhYmxldFwiOiBcIlQtSHViMlwiLFxuICAgICAgICBcIkdlbmVyaWNUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYjk3RFxcXFxifFRhYmxldCg/IS4qUEMpfEJOVFYyNTBBfE1JRC1XQ0RNQXxMb2dpY1BEIFpvb20yfFxcXFxiQTdFQlxcXFxifENhdE5vdmE4fEExXzA3fENUNzA0fENUMTAwMnxcXFxcYk03MjFcXFxcYnxyazMwc2RrfFxcXFxiRVZPVEFCXFxcXGJ8TTc1OEF8RVQ5MDR8QUxVTUlVTTEwfFNtYXJ0ZnJlbiBUYWJ8RW5kZWF2b3VyIDEwMTB8VGFibGV0LVBDLTR8VGFnaSBUYWJ8XFxcXGJNNnByb1xcXFxifENUMTAyMFd8YXJjIDEwSER8XFxcXGJUUDc1MFxcXFxifFxcXFxiUVRBUVozXFxcXGJ8V1ZUMTAxfFRNMTA4OHxLVDEwN1wiXG4gICAgfSxcbiAgICBcIm9zc1wiOiB7XG4gICAgICAgIFwiQW5kcm9pZE9TXCI6IFwiQW5kcm9pZFwiLFxuICAgICAgICBcIkJsYWNrQmVycnlPU1wiOiBcImJsYWNrYmVycnl8XFxcXGJCQjEwXFxcXGJ8cmltIHRhYmxldCBvc1wiLFxuICAgICAgICBcIlBhbG1PU1wiOiBcIlBhbG1PU3xhdmFudGdvfGJsYXplcnxlbGFpbmV8aGlwdG9wfHBhbG18cGx1Y2tlcnx4aWlub1wiLFxuICAgICAgICBcIlN5bWJpYW5PU1wiOiBcIlN5bWJpYW58U3ltYk9TfFNlcmllczYwfFNlcmllczQwfFNZQi1bMC05XSt8XFxcXGJTNjBcXFxcYlwiLFxuICAgICAgICBcIldpbmRvd3NNb2JpbGVPU1wiOiBcIldpbmRvd3MgQ0UuKihQUEN8U21hcnRwaG9uZXxNb2JpbGV8WzAtOV17M314WzAtOV17M30pfFdpbmRvd3MgTW9iaWxlfFdpbmRvd3MgUGhvbmUgWzAtOS5dK3xXQ0U7XCIsXG4gICAgICAgIFwiV2luZG93c1Bob25lT1NcIjogXCJXaW5kb3dzIFBob25lIDEwLjB8V2luZG93cyBQaG9uZSA4LjF8V2luZG93cyBQaG9uZSA4LjB8V2luZG93cyBQaG9uZSBPU3xYQkxXUDd8WnVuZVdQN3xXaW5kb3dzIE5UIDYuWzIzXTsgQVJNO1wiLFxuICAgICAgICBcImlPU1wiOiBcIlxcXFxiaVBob25lLipNb2JpbGV8XFxcXGJpUG9kfFxcXFxiaVBhZHxBcHBsZUNvcmVNZWRpYVwiLFxuICAgICAgICBcImlQYWRPU1wiOiBcIkNQVSBPUyAxM1wiLFxuICAgICAgICBcIk1lZUdvT1NcIjogXCJNZWVHb1wiLFxuICAgICAgICBcIk1hZW1vT1NcIjogXCJNYWVtb1wiLFxuICAgICAgICBcIkphdmFPU1wiOiBcIkoyTUVcXC98XFxcXGJNSURQXFxcXGJ8XFxcXGJDTERDXFxcXGJcIixcbiAgICAgICAgXCJ3ZWJPU1wiOiBcIndlYk9TfGhwd09TXCIsXG4gICAgICAgIFwiYmFkYU9TXCI6IFwiXFxcXGJCYWRhXFxcXGJcIixcbiAgICAgICAgXCJCUkVXT1NcIjogXCJCUkVXXCJcbiAgICB9LFxuICAgIFwidWFzXCI6IHtcbiAgICAgICAgXCJDaHJvbWVcIjogXCJcXFxcYkNyTW9cXFxcYnxDcmlPU3xBbmRyb2lkLipDaHJvbWVcXC9bLjAtOV0qIChNb2JpbGUpP1wiLFxuICAgICAgICBcIkRvbGZpblwiOiBcIlxcXFxiRG9sZmluXFxcXGJcIixcbiAgICAgICAgXCJPcGVyYVwiOiBcIk9wZXJhLipNaW5pfE9wZXJhLipNb2JpfEFuZHJvaWQuKk9wZXJhfE1vYmlsZS4qT1BSXFwvWzAtOS5dKyR8Q29hc3RcXC9bMC05Ll0rXCIsXG4gICAgICAgIFwiU2t5ZmlyZVwiOiBcIlNreWZpcmVcIixcbiAgICAgICAgXCJFZGdlXCI6IFwiTW9iaWxlIFNhZmFyaVxcL1suMC05XSogRWRnZVwiLFxuICAgICAgICBcIklFXCI6IFwiSUVNb2JpbGV8TVNJRU1vYmlsZVwiLFxuICAgICAgICBcIkZpcmVmb3hcIjogXCJmZW5uZWN8ZmlyZWZveC4qbWFlbW98KE1vYmlsZXxUYWJsZXQpLipGaXJlZm94fEZpcmVmb3guKk1vYmlsZXxGeGlPU1wiLFxuICAgICAgICBcIkJvbHRcIjogXCJib2x0XCIsXG4gICAgICAgIFwiVGVhU2hhcmtcIjogXCJ0ZWFzaGFya1wiLFxuICAgICAgICBcIkJsYXplclwiOiBcIkJsYXplclwiLFxuICAgICAgICBcIlNhZmFyaVwiOiBcIlZlcnNpb24uKk1vYmlsZS4qU2FmYXJpfFNhZmFyaS4qTW9iaWxlfE1vYmlsZVNhZmFyaVwiLFxuICAgICAgICBcIldlQ2hhdFwiOiBcIlxcXFxiTWljcm9NZXNzZW5nZXJcXFxcYlwiLFxuICAgICAgICBcIlVDQnJvd3NlclwiOiBcIlVDLipCcm93c2VyfFVDV0VCXCIsXG4gICAgICAgIFwiYmFpZHVib3hhcHBcIjogXCJiYWlkdWJveGFwcFwiLFxuICAgICAgICBcImJhaWR1YnJvd3NlclwiOiBcImJhaWR1YnJvd3NlclwiLFxuICAgICAgICBcIkRpaWdvQnJvd3NlclwiOiBcIkRpaWdvQnJvd3NlclwiLFxuICAgICAgICBcIk1lcmN1cnlcIjogXCJcXFxcYk1lcmN1cnlcXFxcYlwiLFxuICAgICAgICBcIk9iaWdvQnJvd3NlclwiOiBcIk9iaWdvXCIsXG4gICAgICAgIFwiTmV0RnJvbnRcIjogXCJORi1Ccm93c2VyXCIsXG4gICAgICAgIFwiR2VuZXJpY0Jyb3dzZXJcIjogXCJOb2tpYUJyb3dzZXJ8T3ZpQnJvd3NlcnxPbmVCcm93c2VyfFR3b25reUJlYW1Ccm93c2VyfFNFTUMuKkJyb3dzZXJ8Rmx5Rmxvd3xNaW5pbW98TmV0RnJvbnR8Tm92YXJyYS1WaXNpb258TVFRQnJvd3NlcnxNaWNyb01lc3NlbmdlclwiLFxuICAgICAgICBcIlBhbGVNb29uXCI6IFwiQW5kcm9pZC4qUGFsZU1vb258TW9iaWxlLipQYWxlTW9vblwiXG4gICAgfSxcbiAgICBcInByb3BzXCI6IHtcbiAgICAgICAgXCJNb2JpbGVcIjogXCJNb2JpbGVcXC9bVkVSXVwiLFxuICAgICAgICBcIkJ1aWxkXCI6IFwiQnVpbGRcXC9bVkVSXVwiLFxuICAgICAgICBcIlZlcnNpb25cIjogXCJWZXJzaW9uXFwvW1ZFUl1cIixcbiAgICAgICAgXCJWZW5kb3JJRFwiOiBcIlZlbmRvcklEXFwvW1ZFUl1cIixcbiAgICAgICAgXCJpUGFkXCI6IFwiaVBhZC4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiaVBob25lXCI6IFwiaVBob25lLipDUFVbYS16IF0rW1ZFUl1cIixcbiAgICAgICAgXCJpUG9kXCI6IFwiaVBvZC4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiS2luZGxlXCI6IFwiS2luZGxlXFwvW1ZFUl1cIixcbiAgICAgICAgXCJDaHJvbWVcIjogW1xuICAgICAgICAgICAgXCJDaHJvbWVcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJDcmlPU1xcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIkNyTW9cXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiQ29hc3RcIjogW1xuICAgICAgICAgICAgXCJDb2FzdFxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJEb2xmaW5cIjogXCJEb2xmaW5cXC9bVkVSXVwiLFxuICAgICAgICBcIkZpcmVmb3hcIjogW1xuICAgICAgICAgICAgXCJGaXJlZm94XFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiRnhpT1NcXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiRmVubmVjXCI6IFwiRmVubmVjXFwvW1ZFUl1cIixcbiAgICAgICAgXCJFZGdlXCI6IFwiRWRnZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiSUVcIjogW1xuICAgICAgICAgICAgXCJJRU1vYmlsZVxcL1tWRVJdO1wiLFxuICAgICAgICAgICAgXCJJRU1vYmlsZSBbVkVSXVwiLFxuICAgICAgICAgICAgXCJNU0lFIFtWRVJdO1wiLFxuICAgICAgICAgICAgXCJUcmlkZW50XFwvWzAtOS5dKzsuKnJ2OltWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJOZXRGcm9udFwiOiBcIk5ldEZyb250XFwvW1ZFUl1cIixcbiAgICAgICAgXCJOb2tpYUJyb3dzZXJcIjogXCJOb2tpYUJyb3dzZXJcXC9bVkVSXVwiLFxuICAgICAgICBcIk9wZXJhXCI6IFtcbiAgICAgICAgICAgIFwiIE9QUlxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIk9wZXJhIE1pbmlcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJWZXJzaW9uXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIk9wZXJhIE1pbmlcIjogXCJPcGVyYSBNaW5pXFwvW1ZFUl1cIixcbiAgICAgICAgXCJPcGVyYSBNb2JpXCI6IFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiVUNCcm93c2VyXCI6IFtcbiAgICAgICAgICAgIFwiVUNXRUJbVkVSXVwiLFxuICAgICAgICAgICAgXCJVQy4qQnJvd3NlclxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJNUVFCcm93c2VyXCI6IFwiTVFRQnJvd3NlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiTWljcm9NZXNzZW5nZXJcIjogXCJNaWNyb01lc3NlbmdlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiYmFpZHVib3hhcHBcIjogXCJiYWlkdWJveGFwcFxcL1tWRVJdXCIsXG4gICAgICAgIFwiYmFpZHVicm93c2VyXCI6IFwiYmFpZHVicm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJTYW1zdW5nQnJvd3NlclwiOiBcIlNhbXN1bmdCcm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJJcm9uXCI6IFwiSXJvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiU2FmYXJpXCI6IFtcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIlNhZmFyaVxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJTa3lmaXJlXCI6IFwiU2t5ZmlyZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiVGl6ZW5cIjogXCJUaXplblxcL1tWRVJdXCIsXG4gICAgICAgIFwiV2Via2l0XCI6IFwid2Via2l0WyBcXC9dW1ZFUl1cIixcbiAgICAgICAgXCJQYWxlTW9vblwiOiBcIlBhbGVNb29uXFwvW1ZFUl1cIixcbiAgICAgICAgXCJHZWNrb1wiOiBcIkdlY2tvXFwvW1ZFUl1cIixcbiAgICAgICAgXCJUcmlkZW50XCI6IFwiVHJpZGVudFxcL1tWRVJdXCIsXG4gICAgICAgIFwiUHJlc3RvXCI6IFwiUHJlc3RvXFwvW1ZFUl1cIixcbiAgICAgICAgXCJHb2FubmFcIjogXCJHb2FubmFcXC9bVkVSXVwiLFxuICAgICAgICBcImlPU1wiOiBcIiBcXFxcYmk/T1NcXFxcYiBbVkVSXVsgO117MX1cIixcbiAgICAgICAgXCJBbmRyb2lkXCI6IFwiQW5kcm9pZCBbVkVSXVwiLFxuICAgICAgICBcIkJsYWNrQmVycnlcIjogW1xuICAgICAgICAgICAgXCJCbGFja0JlcnJ5W1xcXFx3XStcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJCbGFja0JlcnJ5LipWZXJzaW9uXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJCUkVXXCI6IFwiQlJFVyBbVkVSXVwiLFxuICAgICAgICBcIkphdmFcIjogXCJKYXZhXFwvW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIFBob25lIE9TXCI6IFtcbiAgICAgICAgICAgIFwiV2luZG93cyBQaG9uZSBPUyBbVkVSXVwiLFxuICAgICAgICAgICAgXCJXaW5kb3dzIFBob25lIFtWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJXaW5kb3dzIFBob25lXCI6IFwiV2luZG93cyBQaG9uZSBbVkVSXVwiLFxuICAgICAgICBcIldpbmRvd3MgQ0VcIjogXCJXaW5kb3dzIENFXFwvW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIE5UXCI6IFwiV2luZG93cyBOVCBbVkVSXVwiLFxuICAgICAgICBcIlN5bWJpYW5cIjogW1xuICAgICAgICAgICAgXCJTeW1iaWFuT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJTeW1iaWFuXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIndlYk9TXCI6IFtcbiAgICAgICAgICAgIFwid2ViT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJocHdPU1xcL1tWRVJdO1wiXG4gICAgICAgIF1cbiAgICB9LFxuICAgIFwidXRpbHNcIjoge1xuICAgICAgICBcIkJvdFwiOiBcIkdvb2dsZWJvdHxmYWNlYm9va2V4dGVybmFsaGl0fEdvb2dsZS1BTVBIVE1MfHN+YW1wLXZhbGlkYXRvcnxBZHNCb3QtR29vZ2xlfEdvb2dsZSBLZXl3b3JkIFN1Z2dlc3Rpb258RmFjZWJvdHxZYW5kZXhCb3R8WWFuZGV4TW9iaWxlQm90fGJpbmdib3R8aWFfYXJjaGl2ZXJ8QWhyZWZzQm90fEV6b29tc3xHU0xGYm90fFdCU2VhcmNoQm90fFR3aXR0ZXJib3R8VHdlZXRtZW1lQm90fFR3aWtsZXxQYXBlckxpQm90fFdvdGJveHxVbndpbmRGZXRjaG9yfEV4YWJvdHxNSjEyYm90fFlhbmRleEltYWdlc3xUdXJuaXRpbkJvdHxQaW5nZG9tfGNvbnRlbnRraW5nYXBwXCIsXG4gICAgICAgIFwiTW9iaWxlQm90XCI6IFwiR29vZ2xlYm90LU1vYmlsZXxBZHNCb3QtR29vZ2xlLU1vYmlsZXxZYWhvb1NlZWtlclxcL00xQTEtUjJEMlwiLFxuICAgICAgICBcIkRlc2t0b3BNb2RlXCI6IFwiV1BEZXNrdG9wXCIsXG4gICAgICAgIFwiVFZcIjogXCJTb255RFRWfEhiYlRWXCIsXG4gICAgICAgIFwiV2ViS2l0XCI6IFwiKHdlYmtpdClbIFxcL10oW1xcXFx3Ll0rKVwiLFxuICAgICAgICBcIkNvbnNvbGVcIjogXCJcXFxcYihOaW50ZW5kb3xOaW50ZW5kbyBXaWlVfE5pbnRlbmRvIDNEU3xOaW50ZW5kbyBTd2l0Y2h8UExBWVNUQVRJT058WGJveClcXFxcYlwiLFxuICAgICAgICBcIldhdGNoXCI6IFwiU00tVjcwMFwiXG4gICAgfVxufTtcblxuICAgIC8vIGZvbGxvd2luZyBwYXR0ZXJucyBjb21lIGZyb20gaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cbiAgICBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzID0ge1xuICAgICAgICBmdWxsUGF0dGVybjogLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLFxuICAgICAgICBzaG9ydFBhdHRlcm46IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLFxuICAgICAgICB0YWJsZXRQYXR0ZXJuOiAvYW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaVxuICAgIH07XG5cbiAgICB2YXIgaGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICAgIGlzQXJyYXk7XG5cbiAgICBpbXBsLkZBTExCQUNLX1BIT05FID0gJ1Vua25vd25QaG9uZSc7XG4gICAgaW1wbC5GQUxMQkFDS19UQUJMRVQgPSAnVW5rbm93blRhYmxldCc7XG4gICAgaW1wbC5GQUxMQkFDS19NT0JJTEUgPSAnVW5rbm93bk1vYmlsZSc7XG5cbiAgICBpc0FycmF5ID0gKCdpc0FycmF5JyBpbiBBcnJheSkgP1xuICAgICAgICBBcnJheS5pc0FycmF5IDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nOyB9O1xuXG4gICAgZnVuY3Rpb24gZXF1YWxJQyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBhICE9IG51bGwgJiYgYiAhPSBudWxsICYmIGEudG9Mb3dlckNhc2UoKSA9PT0gYi50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zSUMoYXJyYXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZUxDLCBpLCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIGlmICghbGVuIHx8ICF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlTEMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZUxDID09PSBhcnJheVtpXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG9iamVjdCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gbmV3IFJlZ0V4cChvYmplY3Rba2V5XSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVVc2VyQWdlbnQodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiAodXNlckFnZW50IHx8ICcnKS5zdWJzdHIoMCwgNTAwKTsgLy8gbWl0aWdhdGUgdnVsbmVyYWJsZSB0byBSZURvU1xuICAgIH1cblxuICAgIChmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIga2V5LCB2YWx1ZXMsIHZhbHVlLCBpLCBsZW4sIHZlclBvcywgbW9iaWxlRGV0ZWN0UnVsZXMgPSBpbXBsLm1vYmlsZURldGVjdFJ1bGVzO1xuICAgICAgICBmb3IgKGtleSBpbiBtb2JpbGVEZXRlY3RSdWxlcy5wcm9wcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChtb2JpbGVEZXRlY3RSdWxlcy5wcm9wcywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcyA9IG1vYmlsZURldGVjdFJ1bGVzLnByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW3ZhbHVlc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2ZXJQb3MgPSB2YWx1ZS5pbmRleE9mKCdbVkVSXScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVyUG9zID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZlclBvcykgKyAnKFtcXFxcdy5fXFxcXCtdKyknICsgdmFsdWUuc3Vic3RyaW5nKHZlclBvcyArIDUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IG5ldyBSZWdFeHAodmFsdWUsICdpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1vYmlsZURldGVjdFJ1bGVzLnByb3BzW2tleV0gPSB2YWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMub3NzKTtcbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMucGhvbmVzKTtcbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMudGFibGV0cyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnVhcyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnV0aWxzKTtcblxuICAgICAgICAvLyBjb3B5IHNvbWUgcGF0dGVybnMgdG8gb3NzMCB3aGljaCBhcmUgdGVzdGVkIGZpcnN0IChzZWUgaXNzdWUjMTUpXG4gICAgICAgIG1vYmlsZURldGVjdFJ1bGVzLm9zczAgPSB7XG4gICAgICAgICAgICBXaW5kb3dzUGhvbmVPUzogbW9iaWxlRGV0ZWN0UnVsZXMub3NzLldpbmRvd3NQaG9uZU9TLFxuICAgICAgICAgICAgV2luZG93c01vYmlsZU9TOiBtb2JpbGVEZXRlY3RSdWxlcy5vc3MuV2luZG93c01vYmlsZU9TXG4gICAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRlc3QgdXNlckFnZW50IHN0cmluZyBhZ2FpbnN0IGEgc2V0IG9mIHJ1bGVzIGFuZCBmaW5kIHRoZSBmaXJzdCBtYXRjaGVkIGtleS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcnVsZXMgKGtleSBpcyBTdHJpbmcsIHZhbHVlIGlzIFJlZ0V4cClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlckFnZW50IHRoZSBuYXZpZ2F0b3IudXNlckFnZW50IChvciBIVFRQLUhlYWRlciAnVXNlci1BZ2VudCcpLlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gdGhlIG1hdGNoZWQga2V5IGlmIGZvdW5kLCBvdGhlcndpc2UgPHR0Pm51bGw8L3R0PlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5maW5kTWF0Y2ggPSBmdW5jdGlvbihydWxlcywgdXNlckFnZW50KSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBydWxlcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChydWxlcywga2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChydWxlc1trZXldLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGVzdCB1c2VyQWdlbnQgc3RyaW5nIGFnYWluc3QgYSBzZXQgb2YgcnVsZXMgYW5kIHJldHVybiBhbiBhcnJheSBvZiBtYXRjaGVkIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJ1bGVzIChrZXkgaXMgU3RyaW5nLCB2YWx1ZSBpcyBSZWdFeHApXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudCB0aGUgbmF2aWdhdG9yLnVzZXJBZ2VudCAob3IgSFRUUC1IZWFkZXIgJ1VzZXItQWdlbnQnKS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGFuIGFycmF5IG9mIG1hdGNoZWQga2V5cywgbWF5IGJlIGVtcHR5IHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2gsIGJ1dCBub3QgPHR0Pm51bGw8L3R0PlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5maW5kTWF0Y2hlcyA9IGZ1bmN0aW9uKHJ1bGVzLCB1c2VyQWdlbnQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wLmNhbGwocnVsZXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocnVsZXNba2V5XS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGdpdmVuIHByb3BlcnR5IGluIHRoZSBVc2VyLUFnZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHZlcnNpb24gb3IgPHR0Pm51bGw8L3R0PiBpZiB2ZXJzaW9uIG5vdCBmb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5nZXRWZXJzaW9uU3RyID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSwgdXNlckFnZW50KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGltcGwubW9iaWxlRGV0ZWN0UnVsZXMucHJvcHMsIHBhdHRlcm5zLCBpLCBsZW4sIG1hdGNoO1xuICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKHByb3BzLCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBwYXR0ZXJucyA9IHByb3BzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBsZW4gPSBwYXR0ZXJucy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zW2ldLmV4ZWModXNlckFnZW50KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGdpdmVuIHByb3BlcnR5IGluIHRoZSBVc2VyLUFnZW50LlxuICAgICAqIFdpbGwgcmV0dXJuIGEgZmxvYXQgbnVtYmVyLiAoZWcuIDJfMCB3aWxsIHJldHVybiAyLjAsIDQuMy4xIHdpbGwgcmV0dXJuIDQuMzEpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gdmVyc2lvbiBvciA8dHQ+TmFOPC90dD4gaWYgdmVyc2lvbiBub3QgZm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCkge1xuICAgICAgICB2YXIgdmVyc2lvbiA9IGltcGwuZ2V0VmVyc2lvblN0cihwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCk7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uID8gaW1wbC5wcmVwYXJlVmVyc2lvbk5vKHZlcnNpb24pIDogTmFOO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2ZXJzaW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgdmVyc2lvbiBudW1iZXIgYXMgYSBmbG9hdGluZyBudW1iZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwucHJlcGFyZVZlcnNpb25ObyA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICAgIHZhciBudW1iZXJzO1xuXG4gICAgICAgIG51bWJlcnMgPSB2ZXJzaW9uLnNwbGl0KC9bYS16Ll8gXFwvXFwtXS9pKTtcbiAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbnVtYmVyc1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbnVtYmVyc1swXSArICcuJztcbiAgICAgICAgICAgIG51bWJlcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHZlcnNpb24gKz0gbnVtYmVycy5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyKHZlcnNpb24pO1xuICAgIH07XG5cbiAgICBpbXBsLmlzTW9iaWxlRmFsbGJhY2sgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzLmZ1bGxQYXR0ZXJuLnRlc3QodXNlckFnZW50KSB8fFxuICAgICAgICAgICAgaW1wbC5kZXRlY3RNb2JpbGVCcm93c2Vycy5zaG9ydFBhdHRlcm4udGVzdCh1c2VyQWdlbnQuc3Vic3RyKDAsNCkpO1xuICAgIH07XG5cbiAgICBpbXBsLmlzVGFibGV0RmFsbGJhY2sgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzLnRhYmxldFBhdHRlcm4udGVzdCh1c2VyQWdlbnQpO1xuICAgIH07XG5cbiAgICBpbXBsLnByZXBhcmVEZXRlY3Rpb25DYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSwgdXNlckFnZW50LCBtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgIGlmIChjYWNoZS5tb2JpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwaG9uZSwgdGFibGV0LCBwaG9uZVNpemVkO1xuXG4gICAgICAgIC8vIGZpcnN0IGNoZWNrIGZvciBzdHJvbmdlciB0YWJsZXQgcnVsZXMsIHRoZW4gcGhvbmUgKHNlZSBpc3N1ZSM1KVxuICAgICAgICB0YWJsZXQgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnRhYmxldHMsIHVzZXJBZ2VudCk7XG4gICAgICAgIGlmICh0YWJsZXQpIHtcbiAgICAgICAgICAgIGNhY2hlLm1vYmlsZSA9IGNhY2hlLnRhYmxldCA9IHRhYmxldDtcbiAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gdW5hbWJpZ3VvdXNseSBpZGVudGlmaWVkIGFzIHRhYmxldFxuICAgICAgICB9XG5cbiAgICAgICAgcGhvbmUgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnBob25lcywgdXNlckFnZW50KTtcbiAgICAgICAgaWYgKHBob25lKSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS5waG9uZSA9IHBob25lO1xuICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gdW5hbWJpZ3VvdXNseSBpZGVudGlmaWVkIGFzIHBob25lXG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdXIgcnVsZXMgaGF2ZW4ndCBmb3VuZCBhIG1hdGNoIC0+IHRyeSBtb3JlIGdlbmVyYWwgZmFsbGJhY2sgcnVsZXNcbiAgICAgICAgaWYgKGltcGwuaXNNb2JpbGVGYWxsYmFjayh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBwaG9uZVNpemVkID0gTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZChtYXhQaG9uZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChwaG9uZVNpemVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBpbXBsLkZBTExCQUNLX01PQklMRTtcbiAgICAgICAgICAgICAgICBjYWNoZS50YWJsZXQgPSBjYWNoZS5waG9uZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBob25lU2l6ZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS5waG9uZSA9IGltcGwuRkFMTEJBQ0tfUEhPTkU7XG4gICAgICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gaW1wbC5GQUxMQkFDS19UQUJMRVQ7XG4gICAgICAgICAgICAgICAgY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGltcGwuaXNUYWJsZXRGYWxsYmFjayh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS50YWJsZXQgPSBpbXBsLkZBTExCQUNLX1RBQkxFVDtcbiAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vdCBtb2JpbGUgYXQgYWxsIVxuICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHQgaXMgYSByZWZlcmVuY2UgdG8gYSBNb2JpbGVEZXRlY3QgaW5zdGFuY2VcbiAgICBpbXBsLm1vYmlsZUdyYWRlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgLy8gaW1wbCBub3RlOlxuICAgICAgICAvLyBUbyBrZWVwIGluIHN5bmMgdy8gTW9iaWxlX0RldGVjdC5waHAgZWFzaWx5LCB0aGUgZm9sbG93aW5nIGNvZGUgaXMgdGlnaHRseSBhbGlnbmVkIHRvIHRoZSBQSFAgdmVyc2lvbi5cbiAgICAgICAgLy8gV2hlbiBjaGFuZ2VzIGFyZSBtYWRlIGluIE1vYmlsZV9EZXRlY3QucGhwLCBjb3B5IHRoaXMgbWV0aG9kIGFuZCByZXBsYWNlOlxuICAgICAgICAvLyAgICAgJHRoaXMtPiAvIHQuXG4gICAgICAgIC8vICAgICBzZWxmOjpNT0JJTEVfR1JBREVfKC4pIC8gJyQxJ1xuICAgICAgICAvLyAgICAgLCBzZWxmOjpWRVJTSU9OX1RZUEVfRkxPQVQgLyAobm90aGluZylcbiAgICAgICAgLy8gICAgIGlzSU9TKCkgLyBvcygnaU9TJylcbiAgICAgICAgLy8gICAgIFtyZWddIC8gKG5vdGhpbmcpICAgPC0tIGpzZGVsaXZyIGNvbXBsYWluaW5nIGFib3V0IHVuZXNjYXBlZCB1bmljb2RlIGNoYXJhY3RlciBVKzAwQUVcbiAgICAgICAgdmFyICRpc01vYmlsZSA9IHQubW9iaWxlKCkgIT09IG51bGw7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQXBwbGUgaU9TIDMuMi01LjEgLSBUZXN0ZWQgb24gdGhlIG9yaWdpbmFsIGlQYWQgKDQuMyAvIDUuMCksIGlQYWQgMiAoNC4zKSwgaVBhZCAzICg1LjEpLCBvcmlnaW5hbCBpUGhvbmUgKDMuMSksIGlQaG9uZSAzICgzLjIpLCAzR1MgKDQuMyksIDQgKDQuMyAvIDUuMCksIGFuZCA0UyAoNS4xKVxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGFkJyk+PTQuMyB8fFxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGhvbmUnKT49My4xIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQb2QnKT49My4xIHx8XG5cbiAgICAgICAgICAgIC8vIEFuZHJvaWQgMi4xLTIuMyAtIFRlc3RlZCBvbiB0aGUgSFRDIEluY3JlZGlibGUgKDIuMiksIG9yaWdpbmFsIERyb2lkICgyLjIpLCBIVEMgQXJpYSAoMi4xKSwgR29vZ2xlIE5leHVzIFMgKDIuMykuIEZ1bmN0aW9uYWwgb24gMS41ICYgMS42IGJ1dCBwZXJmb3JtYW5jZSBtYXkgYmUgc2x1Z2dpc2gsIHRlc3RlZCBvbiBHb29nbGUgRzEgKDEuNSlcbiAgICAgICAgICAgIC8vIEFuZHJvaWQgMy4xIChIb25leWNvbWIpICAtIFRlc3RlZCBvbiB0aGUgU2Ftc3VuZyBHYWxheHkgVGFiIDEwLjEgYW5kIE1vdG9yb2xhIFhPT01cbiAgICAgICAgICAgIC8vIEFuZHJvaWQgNC4wIChJQ1MpICAtIFRlc3RlZCBvbiBhIEdhbGF4eSBOZXh1cy4gTm90ZTogdHJhbnNpdGlvbiBwZXJmb3JtYW5jZSBjYW4gYmUgcG9vciBvbiB1cGdyYWRlZCBkZXZpY2VzXG4gICAgICAgICAgICAvLyBBbmRyb2lkIDQuMSAoSmVsbHkgQmVhbikgIC0gVGVzdGVkIG9uIGEgR2FsYXh5IE5leHVzIGFuZCBHYWxheHkgN1xuICAgICAgICAgICAgKCB0LnZlcnNpb24oJ0FuZHJvaWQnKT4yLjEgJiYgdC5pcygnV2Via2l0JykgKSB8fFxuXG4gICAgICAgICAgICAvLyBXaW5kb3dzIFBob25lIDctNy41IC0gVGVzdGVkIG9uIHRoZSBIVEMgU3Vycm91bmQgKDcuMCkgSFRDIFRyb3BoeSAoNy41KSwgTEctRTkwMCAoNy41KSwgTm9raWEgTHVtaWEgODAwXG4gICAgICAgICAgICB0LnZlcnNpb24oJ1dpbmRvd3MgUGhvbmUgT1MnKT49Ny4wIHx8XG5cbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNyAtIFRlc3RlZCBvbiBCbGFja0JlcnJ5IFRvcmNoIDk4MTBcbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNi4wIC0gVGVzdGVkIG9uIHRoZSBUb3JjaCA5ODAwIGFuZCBTdHlsZSA5NjcwXG4gICAgICAgICAgICB0LmlzKCdCbGFja0JlcnJ5JykgJiYgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk+PTYuMCB8fFxuICAgICAgICAgICAgLy8gQmxhY2tiZXJyeSBQbGF5Ym9vayAoMS4wLTIuMCkgLSBUZXN0ZWQgb24gUGxheUJvb2tcbiAgICAgICAgICAgIHQubWF0Y2goJ1BsYXlib29rLipUYWJsZXQnKSB8fFxuXG4gICAgICAgICAgICAvLyBQYWxtIFdlYk9TICgxLjQtMi4wKSAtIFRlc3RlZCBvbiB0aGUgUGFsbSBQaXhpICgxLjQpLCBQcmUgKDEuNCksIFByZSAyICgyLjApXG4gICAgICAgICAgICAoIHQudmVyc2lvbignd2ViT1MnKT49MS40ICYmIHQubWF0Y2goJ1BhbG18UHJlfFBpeGknKSApIHx8XG4gICAgICAgICAgICAvLyBQYWxtIFdlYk9TIDMuMCAgLSBUZXN0ZWQgb24gSFAgVG91Y2hQYWRcbiAgICAgICAgICAgIHQubWF0Y2goJ2hwLipUb3VjaFBhZCcpIHx8XG5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggTW9iaWxlICgxMiBCZXRhKSAtIFRlc3RlZCBvbiBBbmRyb2lkIDIuMyBkZXZpY2VcbiAgICAgICAgICAgICggdC5pcygnRmlyZWZveCcpICYmIHQudmVyc2lvbignRmlyZWZveCcpPj0xMiApIHx8XG5cbiAgICAgICAgICAgIC8vIENocm9tZSBmb3IgQW5kcm9pZCAtIFRlc3RlZCBvbiBBbmRyb2lkIDQuMCwgNC4xIGRldmljZVxuICAgICAgICAgICAgKCB0LmlzKCdDaHJvbWUnKSAmJiB0LmlzKCdBbmRyb2lkT1MnKSAmJiB0LnZlcnNpb24oJ0FuZHJvaWQnKT49NC4wICkgfHxcblxuICAgICAgICAgICAgLy8gU2t5ZmlyZSA0LjEgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoIHQuaXMoJ1NreWZpcmUnKSAmJiB0LnZlcnNpb24oJ1NreWZpcmUnKT49NC4xICYmIHQuaXMoJ0FuZHJvaWRPUycpICYmIHQudmVyc2lvbignQW5kcm9pZCcpPj0yLjMgKSB8fFxuXG4gICAgICAgICAgICAvLyBPcGVyYSBNb2JpbGUgMTEuNS0xMjogVGVzdGVkIG9uIEFuZHJvaWQgMi4zXG4gICAgICAgICAgICAoIHQuaXMoJ09wZXJhJykgJiYgdC52ZXJzaW9uKCdPcGVyYSBNb2JpJyk+MTEgJiYgdC5pcygnQW5kcm9pZE9TJykgKSB8fFxuXG4gICAgICAgICAgICAvLyBNZWVnbyAxLjIgLSBUZXN0ZWQgb24gTm9raWEgOTUwIGFuZCBOOVxuICAgICAgICAgICAgdC5pcygnTWVlR29PUycpIHx8XG5cbiAgICAgICAgICAgIC8vIFRpemVuIChwcmUtcmVsZWFzZSkgLSBUZXN0ZWQgb24gZWFybHkgaGFyZHdhcmVcbiAgICAgICAgICAgIHQuaXMoJ1RpemVuJykgfHxcblxuICAgICAgICAgICAgLy8gU2Ftc3VuZyBCYWRhIDIuMCAtIFRlc3RlZCBvbiBhIFNhbXN1bmcgV2F2ZSAzLCBEb2xwaGluIGJyb3dzZXJcbiAgICAgICAgICAgIC8vIEB0b2RvOiBtb3JlIHRlc3RzIGhlcmUhXG4gICAgICAgICAgICB0LmlzKCdEb2xmaW4nKSAmJiB0LnZlcnNpb24oJ0JhZGEnKT49Mi4wIHx8XG5cbiAgICAgICAgICAgIC8vIFVDIEJyb3dzZXIgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoICh0LmlzKCdVQyBCcm93c2VyJykgfHwgdC5pcygnRG9sZmluJykpICYmIHQudmVyc2lvbignQW5kcm9pZCcpPj0yLjMgKSB8fFxuXG4gICAgICAgICAgICAvLyBLaW5kbGUgMyBhbmQgRmlyZSAgLSBUZXN0ZWQgb24gdGhlIGJ1aWx0LWluIFdlYktpdCBicm93c2VyIGZvciBlYWNoXG4gICAgICAgICAgICAoIHQubWF0Y2goJ0tpbmRsZSBGaXJlJykgfHxcbiAgICAgICAgICAgICAgICB0LmlzKCdLaW5kbGUnKSAmJiB0LnZlcnNpb24oJ0tpbmRsZScpPj0zLjAgKSB8fFxuXG4gICAgICAgICAgICAvLyBOb29rIENvbG9yIDEuNC4xIC0gVGVzdGVkIG9uIG9yaWdpbmFsIE5vb2sgQ29sb3IsIG5vdCBOb29rIFRhYmxldFxuICAgICAgICAgICAgdC5pcygnQW5kcm9pZE9TJykgJiYgdC5pcygnTm9va1RhYmxldCcpIHx8XG5cbiAgICAgICAgICAgIC8vIENocm9tZSBEZXNrdG9wIDExLTIxIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICB0LnZlcnNpb24oJ0Nocm9tZScpPj0xMSAmJiAhJGlzTW9iaWxlIHx8XG5cbiAgICAgICAgICAgIC8vIFNhZmFyaSBEZXNrdG9wIDQtNSAtIFRlc3RlZCBvbiBPUyBYIDEwLjcgYW5kIFdpbmRvd3MgN1xuICAgICAgICAgICAgdC52ZXJzaW9uKCdTYWZhcmknKT49NS4wICYmICEkaXNNb2JpbGUgfHxcblxuICAgICAgICAgICAgLy8gRmlyZWZveCBEZXNrdG9wIDQtMTMgLSBUZXN0ZWQgb24gT1MgWCAxMC43IGFuZCBXaW5kb3dzIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignRmlyZWZveCcpPj00LjAgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlciA3LTkgLSBUZXN0ZWQgb24gV2luZG93cyBYUCwgVmlzdGEgYW5kIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignTVNJRScpPj03LjAgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBPcGVyYSBEZXNrdG9wIDEwLTEyIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICAvLyBAcmVmZXJlbmNlOiBodHRwOi8vbXkub3BlcmEuY29tL2NvbW11bml0eS9vcGVud2ViL2lkb3BlcmEvXG4gICAgICAgICAgICB0LnZlcnNpb24oJ09wZXJhJyk+PTEwICYmICEkaXNNb2JpbGVcblxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgIHJldHVybiAnQSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQYWQnKTw0LjMgfHxcbiAgICAgICAgICAgIHQub3MoJ2lPUycpICYmIHQudmVyc2lvbignaVBob25lJyk8My4xIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQb2QnKTwzLjEgfHxcblxuICAgICAgICAgICAgLy8gQmxhY2tiZXJyeSA1LjA6IFRlc3RlZCBvbiB0aGUgU3Rvcm0gMiA5NTUwLCBCb2xkIDk3NzBcbiAgICAgICAgICAgIHQuaXMoJ0JsYWNrYmVycnknKSAmJiB0LnZlcnNpb24oJ0JsYWNrQmVycnknKT49NSAmJiB0LnZlcnNpb24oJ0JsYWNrQmVycnknKTw2IHx8XG5cbiAgICAgICAgICAgIC8vT3BlcmEgTWluaSAoNS4wLTYuNSkgLSBUZXN0ZWQgb24gaU9TIDMuMi80LjMgYW5kIEFuZHJvaWQgMi4zXG4gICAgICAgICAgICAoIHQudmVyc2lvbignT3BlcmEgTWluaScpPj01LjAgJiYgdC52ZXJzaW9uKCdPcGVyYSBNaW5pJyk8PTYuNSAmJlxuICAgICAgICAgICAgICAgICh0LnZlcnNpb24oJ0FuZHJvaWQnKT49Mi4zIHx8IHQuaXMoJ2lPUycpKSApIHx8XG5cbiAgICAgICAgICAgIC8vIE5va2lhIFN5bWJpYW5eMyAtIFRlc3RlZCBvbiBOb2tpYSBOOCAoU3ltYmlhbl4zKSwgQzcgKFN5bWJpYW5eMyksIGFsc28gd29ya3Mgb24gTjk3IChTeW1iaWFuXjEpXG4gICAgICAgICAgICB0Lm1hdGNoKCdOb2tpYU44fE5va2lhQzd8Tjk3LipTZXJpZXM2MHxTeW1iaWFuLzMnKSB8fFxuXG4gICAgICAgICAgICAvLyBAdG9kbzogcmVwb3J0IHRoaXMgKHRlc3RlZCBvbiBOb2tpYSBONzEpXG4gICAgICAgICAgICB0LnZlcnNpb24oJ09wZXJhIE1vYmknKT49MTEgJiYgdC5pcygnU3ltYmlhbk9TJylcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gJ0InO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBCbGFja2JlcnJ5IDQueCAtIFRlc3RlZCBvbiB0aGUgQ3VydmUgODMzMFxuICAgICAgICAgICAgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk8NS4wIHx8XG4gICAgICAgICAgICAvLyBXaW5kb3dzIE1vYmlsZSAtIFRlc3RlZCBvbiB0aGUgSFRDIExlbyAoV2luTW8gNS4yKVxuICAgICAgICAgICAgdC5tYXRjaCgnTVNJRU1vYmlsZXxXaW5kb3dzIENFLipNb2JpbGUnKSB8fCB0LnZlcnNpb24oJ1dpbmRvd3MgTW9iaWxlJyk8PTUuMlxuXG4gICAgICAgICAgICApe1xuICAgICAgICAgICAgcmV0dXJuICdDJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQWxsIG9sZGVyIHNtYXJ0cGhvbmUgcGxhdGZvcm1zIGFuZCBmZWF0dXJlcGhvbmVzIC0gQW55IGRldmljZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBtZWRpYSBxdWVyaWVzXG4gICAgICAgIC8vd2lsbCByZWNlaXZlIHRoZSBiYXNpYywgQyBncmFkZSBleHBlcmllbmNlLlxuICAgICAgICByZXR1cm4gJ0MnO1xuICAgIH07XG5cbiAgICBpbXBsLmRldGVjdE9TID0gZnVuY3Rpb24gKHVhKSB7XG4gICAgICAgIHJldHVybiBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLm9zczAsIHVhKSB8fFxuICAgICAgICAgICAgaW1wbC5maW5kTWF0Y2goaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy5vc3MsIHVhKTtcbiAgICB9O1xuXG4gICAgaW1wbC5nZXREZXZpY2VTbWFsbGVyU2lkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ud2lkdGggPCB3aW5kb3cuc2NyZWVuLmhlaWdodCA/XG4gICAgICAgICAgICB3aW5kb3cuc2NyZWVuLndpZHRoIDpcbiAgICAgICAgICAgIHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgTW9iaWxlRGV0ZWN0IG9iamVjdC5cbiAgICAgKiA8YnI+XG4gICAgICogU3VjaCBhbiBvYmplY3Qgd2lsbCBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiB1c2VyLWFnZW50IHN0cmluZyBhbmQgY2FjaGUgbW9zdCBvZiB0aGUgZGV0ZWN0IHF1ZXJpZXMuPGJyPlxuICAgICAqIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjZDllZGY3OyBib3JkZXI6IDFweCBzb2xpZCAjYmNlOGYxOyBjb2xvcjogIzNhODdhZDsgcGFkZGluZzogMTRweDsgYm9yZGVyLXJhZGl1czogMnB4OyBtYXJnaW4tdG9wOiAyMHB4XCI+XG4gICAgICogICAgIDxzdHJvbmc+RmluZCBpbmZvcm1hdGlvbiBob3cgdG8gZG93bmxvYWQgYW5kIGluc3RhbGw6PC9zdHJvbmc+XG4gICAgICogICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMvXCI+Z2l0aHViLmNvbS9oZ29lYmwvbW9iaWxlLWRldGVjdC5qcy88L2E+XG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8cHJlPlxuICAgICAqICAgICB2YXIgbWQgPSBuZXcgTW9iaWxlRGV0ZWN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgKiAgICAgaWYgKG1kLm1vYmlsZSgpKSB7XG4gICAgICogICAgICAgICBsb2NhdGlvbi5ocmVmID0gKG1kLm1vYmlsZUdyYWRlKCkgPT09ICdBJykgPyAnL21vYmlsZS8nIDogJy9seW54Lyc7XG4gICAgICogICAgIH1cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgdHlwaWNhbGx5IHRha2VuIGZyb20gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgb3IgaHR0cF9oZWFkZXJbJ1VzZXItQWdlbnQnXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UGhvbmVXaWR0aD02MDBdIDxzdHJvbmc+b25seSBmb3IgYnJvd3NlcnM8L3N0cm9uZz4gc3BlY2lmeSBhIHZhbHVlIGZvciB0aGUgbWF4aW11bVxuICAgICAqICAgICAgICB3aWR0aCBvZiBzbWFsbGVzdCBkZXZpY2Ugc2lkZSAoaW4gbG9naWNhbCBcIkNTU1wiIHBpeGVscykgdW50aWwgYSBkZXZpY2UgZGV0ZWN0ZWQgYXMgbW9iaWxlIHdpbGwgYmUgaGFuZGxlZFxuICAgICAqICAgICAgICBhcyBwaG9uZS5cbiAgICAgKiAgICAgICAgVGhpcyBpcyBvbmx5IHVzZWQgaW4gY2FzZXMgd2hlcmUgdGhlIGRldmljZSBjYW5ub3QgYmUgY2xhc3NpZmllZCBhcyBwaG9uZSBvciB0YWJsZXQuPGJyPlxuICAgICAqICAgICAgICBTZWUgPGEgaHJlZj1cImh0dHA6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvcHJhY3RpY2VzL3NjcmVlbnNfc3VwcG9ydC5odG1sXCI+RGVjbGFyaW5nIFRhYmxldCBMYXlvdXRzXG4gICAgICogICAgICAgIGZvciBBbmRyb2lkPC9hPi48YnI+XG4gICAgICogICAgICAgIElmIHlvdSBwcm92aWRlIGEgdmFsdWUgPCAwLCB0aGVuIHRoaXMgXCJmdXp6eVwiIGNoZWNrIGlzIGRpc2FibGVkLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBnbG9iYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNb2JpbGVEZXRlY3QodXNlckFnZW50LCBtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgIHRoaXMudWEgPSBwcmVwYXJlVXNlckFnZW50KHVzZXJBZ2VudCk7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIC8vNjAwZHAgaXMgdHlwaWNhbCA3XCIgdGFibGV0IG1pbmltdW0gd2lkdGhcbiAgICAgICAgdGhpcy5tYXhQaG9uZVdpZHRoID0gbWF4UGhvbmVXaWR0aCB8fCA2MDA7XG4gICAgfVxuXG4gICAgTW9iaWxlRGV0ZWN0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IE1vYmlsZURldGVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZGV0ZWN0ZWQgcGhvbmUgb3IgdGFibGV0IHR5cGUgb3IgPHR0Pm51bGw8L3R0PiBpZiBpdCBpcyBub3QgYSBtb2JpbGUgZGV2aWNlLlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIEZvciBhIGxpc3Qgb2YgcG9zc2libGUgcmV0dXJuIHZhbHVlcyBzZWUge0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0gYW5kIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blBob25lPC9jb2RlPiwgPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT4gb3JcbiAgICAgICAgICogPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaXMgcmV0dXJuZWQuPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgaW4gYnJvd3NlciwgdGhlIGRlY2lzaW9uIHdoZXRoZXIgcGhvbmUgb3IgdGFibGV0IGlzIG1hZGUgYmFzZWQgb24gPGNvZGU+c2NyZWVuLndpZHRoL2hlaWdodDwvY29kZT4uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBzZXJ2ZXItc2lkZSAobm9kZS5qcyksIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT5cbiAgICAgICAgICogYW5kIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+LCBzbyB5b3Ugd2lsbCBnZXQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaGVyZS48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIHBob25lIGZhbWlseSBvciB0YWJsZXQgZmFtaWx5LCBlLmcuIFwiTmV4dXNcIi5cbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNtb2JpbGVcbiAgICAgICAgICovXG4gICAgICAgIG1vYmlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW1wbC5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUodGhpcy5fY2FjaGUsIHRoaXMudWEsIHRoaXMubWF4UGhvbmVXaWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubW9iaWxlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCBwaG9uZSB0eXBlL2ZhbWlseSBzdHJpbmcgb3IgPHR0Pm51bGw8L3R0Pi5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgcmV0dXJuZWQgdGFibGV0IChmYW1pbHkgb3IgcHJvZHVjZXIpIGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+aVBob25lLCBCbGFja0JlcnJ5LCBIVEMsIE5leHVzLCBEZWxsLCBNb3Rvcm9sYSwgU2Ftc3VuZywgTEcsIFNvbnksIEFzdXMsXG4gICAgICAgICAqIE5va2lhTHVtaWEsIE1pY3JvbWF4LCBQYWxtLCBWZXJ0dSwgUGFudGVjaCwgRmx5LCBXaWtvLCBpTW9iaWxlLCBTaW1WYWxsZXksXG4gICAgICAgICAqIFdvbGZnYW5nLCBBbGNhdGVsLCBOaW50ZW5kbywgQW1vaSwgSU5RLCBPbmVQbHVzLCBHZW5lcmljUGhvbmU8L3R0Pjxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJZiB0aGUgZGV2aWNlIGlzIG5vdCBkZXRlY3RlZCBieSB0aGUgcmVndWxhciBleHByZXNzaW9ucyBmcm9tIE1vYmlsZS1EZXRlY3QsIGEgdGVzdCBpcyBtYWRlIGFnYWluc3RcbiAgICAgICAgICogdGhlIHBhdHRlcm5zIG9mIDxhIGhyZWY9XCJodHRwOi8vZGV0ZWN0bW9iaWxlYnJvd3NlcnMuY29tL1wiPmRldGVjdG1vYmlsZWJyb3dzZXJzLmNvbTwvYT4uIElmIHRoaXMgdGVzdFxuICAgICAgICAgKiBpcyBwb3NpdGl2ZSwgYSB2YWx1ZSBvZiA8Y29kZT5Vbmtub3duUGhvbmU8L2NvZGU+IG9yIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IGlzIHJldHVybmVkLjxicj5cbiAgICAgICAgICogV2hlbiB1c2VkIGluIGJyb3dzZXIsIHRoZSBkZWNpc2lvbiB3aGV0aGVyIHBob25lIG9yIHRhYmxldCBpcyBtYWRlIGJhc2VkIG9uIDxjb2RlPnNjcmVlbi53aWR0aC9oZWlnaHQ8L2NvZGU+Ljxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgc2VydmVyLXNpZGUgKG5vZGUuanMpLCB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+XG4gICAgICAgICAqIGFuZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiwgc28geW91IHdpbGwgZ2V0IDxjb2RlPm51bGw8L2NvZGU+IGhlcmUsIHdoaWxlIHtAbGluayBNb2JpbGVEZXRlY3QjbW9iaWxlfVxuICAgICAgICAgKiB3aWxsIHJldHVybiA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPi48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBvZiB0aGUgcGhvbmUgZmFtaWx5IG9yIHByb2R1Y2VyLCBlLmcuIFwiaVBob25lXCJcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNwaG9uZVxuICAgICAgICAgKi9cbiAgICAgICAgcGhvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLnBob25lO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCB0YWJsZXQgdHlwZS9mYW1pbHkgc3RyaW5nIG9yIDx0dD5udWxsPC90dD4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogVGhlIHJldHVybmVkIHRhYmxldCAoZmFtaWx5IG9yIHByb2R1Y2VyKSBpcyBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PmlQYWQsIE5leHVzVGFibGV0LCBHb29nbGVUYWJsZXQsIFNhbXN1bmdUYWJsZXQsIEtpbmRsZSwgU3VyZmFjZVRhYmxldCxcbiAgICAgICAgICogSFBUYWJsZXQsIEFzdXNUYWJsZXQsIEJsYWNrQmVycnlUYWJsZXQsIEhUQ3RhYmxldCwgTW90b3JvbGFUYWJsZXQsIE5vb2tUYWJsZXQsXG4gICAgICAgICAqIEFjZXJUYWJsZXQsIFRvc2hpYmFUYWJsZXQsIExHVGFibGV0LCBGdWppdHN1VGFibGV0LCBQcmVzdGlnaW9UYWJsZXQsXG4gICAgICAgICAqIExlbm92b1RhYmxldCwgRGVsbFRhYmxldCwgWWFydmlrVGFibGV0LCBNZWRpb25UYWJsZXQsIEFybm92YVRhYmxldCxcbiAgICAgICAgICogSW50ZW5zb1RhYmxldCwgSVJVVGFibGV0LCBNZWdhZm9uVGFibGV0LCBFYm9kYVRhYmxldCwgQWxsVmlld1RhYmxldCxcbiAgICAgICAgICogQXJjaG9zVGFibGV0LCBBaW5vbFRhYmxldCwgTm9raWFMdW1pYVRhYmxldCwgU29ueVRhYmxldCwgUGhpbGlwc1RhYmxldCxcbiAgICAgICAgICogQ3ViZVRhYmxldCwgQ29ieVRhYmxldCwgTUlEVGFibGV0LCBNU0lUYWJsZXQsIFNNaVRUYWJsZXQsIFJvY2tDaGlwVGFibGV0LFxuICAgICAgICAgKiBGbHlUYWJsZXQsIGJxVGFibGV0LCBIdWF3ZWlUYWJsZXQsIE5lY1RhYmxldCwgUGFudGVjaFRhYmxldCwgQnJvbmNob1RhYmxldCxcbiAgICAgICAgICogVmVyc3VzVGFibGV0LCBaeW5jVGFibGV0LCBQb3NpdGl2b1RhYmxldCwgTmFiaVRhYmxldCwgS29ib1RhYmxldCwgRGFuZXdUYWJsZXQsXG4gICAgICAgICAqIFRleGV0VGFibGV0LCBQbGF5c3RhdGlvblRhYmxldCwgVHJla3N0b3JUYWJsZXQsIFB5bGVBdWRpb1RhYmxldCwgQWR2YW5UYWJsZXQsXG4gICAgICAgICAqIERhbnlUZWNoVGFibGV0LCBHYWxhcGFkVGFibGV0LCBNaWNyb21heFRhYmxldCwgS2FyYm9ublRhYmxldCwgQWxsRmluZVRhYmxldCxcbiAgICAgICAgICogUFJPU0NBTlRhYmxldCwgWU9ORVNUYWJsZXQsIENoYW5nSmlhVGFibGV0LCBHVVRhYmxldCwgUG9pbnRPZlZpZXdUYWJsZXQsXG4gICAgICAgICAqIE92ZXJtYXhUYWJsZXQsIEhDTFRhYmxldCwgRFBTVGFibGV0LCBWaXN0dXJlVGFibGV0LCBDcmVzdGFUYWJsZXQsXG4gICAgICAgICAqIE1lZGlhdGVrVGFibGV0LCBDb25jb3JkZVRhYmxldCwgR29DbGV2ZXJUYWJsZXQsIE1vZGVjb21UYWJsZXQsIFZvbmlub1RhYmxldCxcbiAgICAgICAgICogRUNTVGFibGV0LCBTdG9yZXhUYWJsZXQsIFZvZGFmb25lVGFibGV0LCBFc3NlbnRpZWxCVGFibGV0LCBSb3NzTW9vclRhYmxldCxcbiAgICAgICAgICogaU1vYmlsZVRhYmxldCwgVG9saW5vVGFibGV0LCBBdWRpb1NvbmljVGFibGV0LCBBTVBFVGFibGV0LCBTa2tUYWJsZXQsXG4gICAgICAgICAqIFRlY25vVGFibGV0LCBKWERUYWJsZXQsIGlKb3lUYWJsZXQsIEZYMlRhYmxldCwgWG9yb1RhYmxldCwgVmlld3NvbmljVGFibGV0LFxuICAgICAgICAgKiBWZXJpem9uVGFibGV0LCBPZHlzVGFibGV0LCBDYXB0aXZhVGFibGV0LCBJY29uYml0VGFibGV0LCBUZWNsYXN0VGFibGV0LFxuICAgICAgICAgKiBPbmRhVGFibGV0LCBKYXl0ZWNoVGFibGV0LCBCbGF1cHVua3RUYWJsZXQsIERpZ21hVGFibGV0LCBFdm9saW9UYWJsZXQsXG4gICAgICAgICAqIExhdmFUYWJsZXQsIEFvY1RhYmxldCwgTXBtYW5UYWJsZXQsIENlbGtvblRhYmxldCwgV29sZGVyVGFibGV0LCBNZWRpYWNvbVRhYmxldCxcbiAgICAgICAgICogTWlUYWJsZXQsIE5pYmlydVRhYmxldCwgTmV4b1RhYmxldCwgTGVhZGVyVGFibGV0LCBVYmlzbGF0ZVRhYmxldCxcbiAgICAgICAgICogUG9ja2V0Qm9va1RhYmxldCwgS29jYXNvVGFibGV0LCBIaXNlbnNlVGFibGV0LCBIdWRsLCBUZWxzdHJhVGFibGV0LFxuICAgICAgICAgKiBHZW5lcmljVGFibGV0PC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT4gb3IgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaXMgcmV0dXJuZWQuPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgaW4gYnJvd3NlciwgdGhlIGRlY2lzaW9uIHdoZXRoZXIgcGhvbmUgb3IgdGFibGV0IGlzIG1hZGUgYmFzZWQgb24gPGNvZGU+c2NyZWVuLndpZHRoL2hlaWdodDwvY29kZT4uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBzZXJ2ZXItc2lkZSAobm9kZS5qcyksIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT5cbiAgICAgICAgICogYW5kIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+LCBzbyB5b3Ugd2lsbCBnZXQgPGNvZGU+bnVsbDwvY29kZT4gaGVyZSwgd2hpbGUge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9XG4gICAgICAgICAqIHdpbGwgcmV0dXJuIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+Ljxicj5cbiAgICAgICAgICogQmUgYXdhcmUgdGhhdCBzaW5jZSB2MS4wLjAgaW4gdGhpcyBzcGVjaWFsIGNhc2UgeW91IHdpbGwgZ2V0IDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IG9ubHkgZm9yOlxuICAgICAgICAgKiB7QGxpbmsgTW9iaWxlRGV0ZWN0I21vYmlsZX0sIG5vdCBmb3Ige0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0gYW5kIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS5cbiAgICAgICAgICogSW4gdmVyc2lvbnMgYmVmb3JlIHYxLjAuMCBhbGwgMyBtZXRob2RzIHJldHVybmVkIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IHdoaWNoIHdhcyB0ZWRpb3VzIHRvIHVzZS5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJbiBtb3N0IGNhc2VzIHlvdSB3aWxsIHVzZSB0aGUgcmV0dXJuIHZhbHVlIGp1c3QgYXMgYSBib29sZWFuLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUga2V5IG9mIHRoZSB0YWJsZXQgZmFtaWx5IG9yIHByb2R1Y2VyLCBlLmcuIFwiU2Ftc3VuZ1RhYmxldFwiXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdGFibGV0XG4gICAgICAgICAqL1xuICAgICAgICB0YWJsZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLnRhYmxldDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgKGZpcnN0KSBkZXRlY3RlZCB1c2VyLWFnZW50IHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSByZXR1cm5lZCB1c2VyLWFnZW50IGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+Q2hyb21lLCBEb2xmaW4sIE9wZXJhLCBTa3lmaXJlLCBFZGdlLCBJRSwgRmlyZWZveCwgQm9sdCwgVGVhU2hhcmssIEJsYXplcixcbiAgICAgICAgICogU2FmYXJpLCBXZUNoYXQsIFVDQnJvd3NlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlciwgRGlpZ29Ccm93c2VyLCBNZXJjdXJ5LFxuICAgICAgICAgKiBPYmlnb0Jyb3dzZXIsIE5ldEZyb250LCBHZW5lcmljQnJvd3NlciwgUGFsZU1vb248L3R0Pjxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJbiBtb3N0IGNhc2VzIGNhbGxpbmcge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnR9IHdpbGwgYmUgc3VmZmljaWVudC4gQnV0IHRoZXJlIGFyZSByYXJlXG4gICAgICAgICAqIGNhc2VzIHdoZXJlIGEgbW9iaWxlIGRldmljZSBwcmV0ZW5kcyB0byBiZSBtb3JlIHRoYW4gb25lIHBhcnRpY3VsYXIgYnJvd3Nlci4gWW91IGNhbiBnZXQgdGhlXG4gICAgICAgICAqIGxpc3Qgb2YgYWxsIG1hdGNoZXMgd2l0aCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudHN9IG9yIGNoZWNrIGZvciBhIHBhcnRpY3VsYXIgdmFsdWUgYnlcbiAgICAgICAgICogcHJvdmlkaW5nIG9uZSBvZiB0aGUgZGVmaW5lZCBrZXlzIGFzIGZpcnN0IGFyZ3VtZW50IHRvIHtAbGluayBNb2JpbGVEZXRlY3QjaXN9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUga2V5IGZvciB0aGUgZGV0ZWN0ZWQgdXNlci1hZ2VudCBvciA8dHQ+bnVsbDwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdXNlckFnZW50XG4gICAgICAgICAqL1xuICAgICAgICB1c2VyQWdlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZS51c2VyQWdlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnVzZXJBZ2VudCA9IGltcGwuZmluZE1hdGNoKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMudWFzLCB0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYWxsIGRldGVjdGVkIHVzZXItYWdlbnQgc3RyaW5ncy5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgYXJyYXkgaXMgZW1wdHkgb3IgY29udGFpbnMgb25lIG9yIG1vcmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PkNocm9tZSwgRG9sZmluLCBPcGVyYSwgU2t5ZmlyZSwgRWRnZSwgSUUsIEZpcmVmb3gsIEJvbHQsIFRlYVNoYXJrLCBCbGF6ZXIsXG4gICAgICAgICAqIFNhZmFyaSwgV2VDaGF0LCBVQ0Jyb3dzZXIsIGJhaWR1Ym94YXBwLCBiYWlkdWJyb3dzZXIsIERpaWdvQnJvd3NlciwgTWVyY3VyeSxcbiAgICAgICAgICogT2JpZ29Ccm93c2VyLCBOZXRGcm9udCwgR2VuZXJpY0Jyb3dzZXIsIFBhbGVNb29uPC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyBjYWxsaW5nIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSB3aWxsIGJlIHN1ZmZpY2llbnQuIEJ1dCB0aGVyZSBhcmUgcmFyZVxuICAgICAgICAgKiBjYXNlcyB3aGVyZSBhIG1vYmlsZSBkZXZpY2UgcHJldGVuZHMgdG8gYmUgbW9yZSB0aGFuIG9uZSBwYXJ0aWN1bGFyIGJyb3dzZXIuIFlvdSBjYW4gZ2V0IHRoZVxuICAgICAgICAgKiBsaXN0IG9mIGFsbCBtYXRjaGVzIHdpdGgge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnRzfSBvciBjaGVjayBmb3IgYSBwYXJ0aWN1bGFyIHZhbHVlIGJ5XG4gICAgICAgICAqIHByb3ZpZGluZyBvbmUgb2YgdGhlIGRlZmluZWQga2V5cyBhcyBmaXJzdCBhcmd1bWVudCB0byB7QGxpbmsgTW9iaWxlRGV0ZWN0I2lzfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fSB0aGUgYXJyYXkgb2YgZGV0ZWN0ZWQgdXNlci1hZ2VudCBrZXlzIG9yIDx0dD5bXTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdXNlckFnZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlckFnZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlLnVzZXJBZ2VudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnVzZXJBZ2VudHMgPSBpbXBsLmZpbmRNYXRjaGVzKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMudWFzLCB0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCBvcGVyYXRpbmcgc3lzdGVtIHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSBvcGVyYXRpbmcgc3lzdGVtIGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+QW5kcm9pZE9TLCBCbGFja0JlcnJ5T1MsIFBhbG1PUywgU3ltYmlhbk9TLCBXaW5kb3dzTW9iaWxlT1MsIFdpbmRvd3NQaG9uZU9TLFxuICAgICAgICAgKiBpT1MsIGlQYWRPUywgTWVlR29PUywgTWFlbW9PUywgSmF2YU9TLCB3ZWJPUywgYmFkYU9TLCBCUkVXT1M8L3R0Pjxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIGRldGVjdGVkIG9wZXJhdGluZyBzeXN0ZW0uXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3Qjb3NcbiAgICAgICAgICovXG4gICAgICAgIG9zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUub3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLm9zID0gaW1wbC5kZXRlY3RPUyh0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5vcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJzaW9uIChhcyBOdW1iZXIpIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaWxsIHJldHVybiBhIGZsb2F0IG51bWJlci4gKGVnLiAyXzAgd2lsbCByZXR1cm4gMi4wLCA0LjMuMSB3aWxsIHJldHVybiA0LjMxKVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGEga2V5IGRlZmluaW5nIGEgdGhpbmcgd2hpY2ggaGFzIGEgdmVyc2lvbi48YnI+XG4gICAgICAgICAqICAgICAgICBZb3UgY2FuIHVzZSBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0Pk1vYmlsZSwgQnVpbGQsIFZlcnNpb24sIFZlbmRvcklELCBpUGFkLCBpUGhvbmUsIGlQb2QsIEtpbmRsZSwgQ2hyb21lLCBDb2FzdCxcbiAgICAgICAgICogRG9sZmluLCBGaXJlZm94LCBGZW5uZWMsIEVkZ2UsIElFLCBOZXRGcm9udCwgTm9raWFCcm93c2VyLCBPcGVyYSwgT3BlcmEgTWluaSxcbiAgICAgICAgICogT3BlcmEgTW9iaSwgVUNCcm93c2VyLCBNUVFCcm93c2VyLCBNaWNyb01lc3NlbmdlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlcixcbiAgICAgICAgICogU2Ftc3VuZ0Jyb3dzZXIsIElyb24sIFNhZmFyaSwgU2t5ZmlyZSwgVGl6ZW4sIFdlYmtpdCwgUGFsZU1vb24sIEdlY2tvLCBUcmlkZW50LFxuICAgICAgICAgKiBQcmVzdG8sIEdvYW5uYSwgaU9TLCBBbmRyb2lkLCBCbGFja0JlcnJ5LCBCUkVXLCBKYXZhLCBXaW5kb3dzIFBob25lIE9TLCBXaW5kb3dzXG4gICAgICAgICAqIFBob25lLCBXaW5kb3dzIENFLCBXaW5kb3dzIE5ULCBTeW1iaWFuLCB3ZWJPUzwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgdmVyc2lvbiBhcyBmbG9hdCBvciA8dHQ+TmFOPC90dD4gaWYgVXNlci1BZ2VudCBkb2Vzbid0IGNvbnRhaW4gdGhpcyB2ZXJzaW9uLlxuICAgICAgICAgKiAgICAgICAgICBCZSBjYXJlZnVsIHdoZW4gY29tcGFyaW5nIHRoaXMgdmFsdWUgd2l0aCAnPT0nIG9wZXJhdG9yIVxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I3ZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIHZlcnNpb246IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbXBsLmdldFZlcnNpb24oa2V5LCB0aGlzLnVhKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJzaW9uIChhcyBTdHJpbmcpIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGEga2V5IGRlZmluaW5nIGEgdGhpbmcgd2hpY2ggaGFzIGEgdmVyc2lvbi48YnI+XG4gICAgICAgICAqICAgICAgICBZb3UgY2FuIHVzZSBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0Pk1vYmlsZSwgQnVpbGQsIFZlcnNpb24sIFZlbmRvcklELCBpUGFkLCBpUGhvbmUsIGlQb2QsIEtpbmRsZSwgQ2hyb21lLCBDb2FzdCxcbiAgICAgICAgICogRG9sZmluLCBGaXJlZm94LCBGZW5uZWMsIEVkZ2UsIElFLCBOZXRGcm9udCwgTm9raWFCcm93c2VyLCBPcGVyYSwgT3BlcmEgTWluaSxcbiAgICAgICAgICogT3BlcmEgTW9iaSwgVUNCcm93c2VyLCBNUVFCcm93c2VyLCBNaWNyb01lc3NlbmdlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlcixcbiAgICAgICAgICogU2Ftc3VuZ0Jyb3dzZXIsIElyb24sIFNhZmFyaSwgU2t5ZmlyZSwgVGl6ZW4sIFdlYmtpdCwgUGFsZU1vb24sIEdlY2tvLCBUcmlkZW50LFxuICAgICAgICAgKiBQcmVzdG8sIEdvYW5uYSwgaU9TLCBBbmRyb2lkLCBCbGFja0JlcnJ5LCBCUkVXLCBKYXZhLCBXaW5kb3dzIFBob25lIE9TLCBXaW5kb3dzXG4gICAgICAgICAqIFBob25lLCBXaW5kb3dzIENFLCBXaW5kb3dzIE5ULCBTeW1iaWFuLCB3ZWJPUzwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgXCJyYXdcIiB2ZXJzaW9uIGFzIFN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+IGlmIFVzZXItQWdlbnQgZG9lc24ndCBjb250YWluIHRoaXMgdmVyc2lvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCN2ZXJzaW9uU3RyXG4gICAgICAgICAqL1xuICAgICAgICB2ZXJzaW9uU3RyOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaW1wbC5nZXRWZXJzaW9uU3RyKGtleSwgdGhpcy51YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdsb2JhbCB0ZXN0IGtleSBhZ2FpbnN0IHVzZXJBZ2VudCwgb3MsIHBob25lLCB0YWJsZXQgYW5kIHNvbWUgb3RoZXIgcHJvcGVydGllcyBvZiB1c2VyQWdlbnQgc3RyaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IHRoZSBrZXkgKGNhc2UtaW5zZW5zaXRpdmUpIG9mIGEgdXNlckFnZW50LCBhbiBvcGVyYXRpbmcgc3lzdGVtLCBwaG9uZSBvclxuICAgICAgICAgKiAgICAgICAgdGFibGV0IGZhbWlseS48YnI+XG4gICAgICAgICAqICAgICAgICBGb3IgYSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIHZhbHVlcywgc2VlIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSxcbiAgICAgICAgICogICAgICAgIHtAbGluayBNb2JpbGVEZXRlY3Qjb3N9LCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3Bob25lfSwge0BsaW5rIE1vYmlsZURldGVjdCN0YWJsZXR9Ljxicj5cbiAgICAgICAgICogICAgICAgIEFkZGl0aW9uYWxseSB5b3UgaGF2ZSBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+Qm90LCBNb2JpbGVCb3QsIERlc2t0b3BNb2RlLCBUViwgV2ViS2l0LCBDb25zb2xlLCBXYXRjaDwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gPHR0PnRydWU8L3R0PiB3aGVuIHRoZSBnaXZlbiBrZXkgaXMgb25lIG9mIHRoZSBkZWZpbmVkIGtleXMgb2YgdXNlckFnZW50LCBvcywgcGhvbmUsXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICB0YWJsZXQgb3Igb25lIG9mIHRoZSBsaXN0ZWQgYWRkaXRpb25hbCBrZXlzLCBvdGhlcndpc2UgPHR0PmZhbHNlPC90dD5cbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNpc1xuICAgICAgICAgKi9cbiAgICAgICAgaXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluc0lDKHRoaXMudXNlckFnZW50cygpLCBrZXkpIHx8XG4gICAgICAgICAgICAgICAgICAgZXF1YWxJQyhrZXksIHRoaXMub3MoKSkgfHxcbiAgICAgICAgICAgICAgICAgICBlcXVhbElDKGtleSwgdGhpcy5waG9uZSgpKSB8fFxuICAgICAgICAgICAgICAgICAgIGVxdWFsSUMoa2V5LCB0aGlzLnRhYmxldCgpKSB8fFxuICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zSUMoaW1wbC5maW5kTWF0Y2hlcyhpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnV0aWxzLCB0aGlzLnVhKSwga2V5KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRG8gYSBxdWljayB0ZXN0IGFnYWluc3QgbmF2aWdhdG9yOjp1c2VyQWdlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gcGF0dGVybiB0aGUgcGF0dGVybiwgZWl0aGVyIGFzIFN0cmluZyBvciBSZWdFeHBcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAoYSBzdHJpbmcgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBjYXNlLWluc2Vuc2l0aXZlIFJlZ0V4cCkuXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSA8dHQ+dHJ1ZTwvdHQ+IHdoZW4gdGhlIHBhdHRlcm4gbWF0Y2hlcywgb3RoZXJ3aXNlIDx0dD5mYWxzZTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbWF0Y2hcbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoOiBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICAgICAgaWYgKCEocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0aGlzLnVhKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIG1vYmlsZSBkZXZpY2UgY2FuIGJlIGNvbnNpZGVyZWQgYXMgcGhvbmUgcmVnYXJkaW5nIDxjb2RlPnNjcmVlbi53aWR0aDwvY29kZT4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogT2J2aW91c2x5IHRoaXMgbWV0aG9kIG1ha2VzIHNlbnNlIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgKG5vdCBmb3IgTm9kZS5qcykhXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UGhvbmVXaWR0aF0gdGhlIG1heGltdW0gbG9naWNhbCBwaXhlbHMgKGFrYS4gQ1NTLXBpeGVscykgdG8gYmUgY29uc2lkZXJlZCBhcyBwaG9uZS48YnI+XG4gICAgICAgICAqICAgICAgICBUaGUgYXJndW1lbnQgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBwcmVzZW50IG9yIGZhbHN5LCB0aGUgdmFsdWUgb2YgdGhlIGNvbnN0cnVjdG9yIGlzIHRha2VuLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9IDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gaWYgc2NyZWVuIHNpemUgd2Fzbid0IGRldGVjdGFibGUsIGVsc2UgPGNvZGU+dHJ1ZTwvY29kZT5cbiAgICAgICAgICogICAgICAgICAgd2hlbiBzY3JlZW4ud2lkdGggaXMgbGVzcyBvciBlcXVhbCB0byBtYXhQaG9uZVdpZHRoLCBvdGhlcndpc2UgPGNvZGU+ZmFsc2U8L2NvZGU+Ljxicj5cbiAgICAgICAgICogICAgICAgICAgV2lsbCBhbHdheXMgcmV0dXJuIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gc2VydmVyLXNpZGUuXG4gICAgICAgICAqL1xuICAgICAgICBpc1Bob25lU2l6ZWQ6IGZ1bmN0aW9uIChtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZChtYXhQaG9uZVdpZHRoIHx8IHRoaXMubWF4UGhvbmVXaWR0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIG1vYmlsZSBncmFkZSAoJ0EnLCAnQicsICdDJykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IG9uZSBvZiB0aGUgbW9iaWxlIGdyYWRlcyAoJ0EnLCAnQicsICdDJykuXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbW9iaWxlR3JhZGVcbiAgICAgICAgICovXG4gICAgICAgIG1vYmlsZUdyYWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUuZ3JhZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLmdyYWRlID0gaW1wbC5tb2JpbGVHcmFkZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5ncmFkZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlbnZpcm9ubWVudC1kZXBlbmRlbnRcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnNjcmVlbikge1xuICAgICAgICBNb2JpbGVEZXRlY3QuaXNQaG9uZVNpemVkID0gZnVuY3Rpb24gKG1heFBob25lV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXhQaG9uZVdpZHRoIDwgMCA/IHVuZGVmaW5lZCA6IGltcGwuZ2V0RGV2aWNlU21hbGxlclNpZGUoKSA8PSBtYXhQaG9uZVdpZHRoO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIE1vYmlsZURldGVjdC5pc1Bob25lU2l6ZWQgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBzaG91bGQgbm90IGJlIHJlcGxhY2VkIGJ5IGEgY29tcGxldGVseSBuZXcgb2JqZWN0IC0ganVzdCBvdmVyd3JpdGUgZXhpc3RpbmcgbWV0aG9kc1xuICAgIE1vYmlsZURldGVjdC5faW1wbCA9IGltcGw7XG4gICAgXG4gICAgTW9iaWxlRGV0ZWN0LnZlcnNpb24gPSAnMS40LjQgMjAxOS0wOS0yMSc7XG5cbiAgICByZXR1cm4gTW9iaWxlRGV0ZWN0O1xufSk7IC8vIGVuZCBvZiBjYWxsIG9mIGRlZmluZSgpXG59KSgoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZmFjdG9yeSkgeyB3aW5kb3cuTW9iaWxlRGV0ZWN0ID0gZmFjdG9yeSgpOyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBsZWFzZSBmaWxlIGEgYnVnIGlmIHlvdSBnZXQgdGhpcyBlcnJvciFcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGVudmlyb25tZW50Jyk7XG4gICAgfVxufSkoKSk7IiwiLyohXG4gKiBAZmlsZU92ZXJ2aWV3IFRvdWNoU3dpcGUgLSBqUXVlcnkgUGx1Z2luXG4gKiBAdmVyc2lvbiAxLjYuMThcbiAqXG4gKiBAYXV0aG9yIE1hdHQgQnJ5c29uIGh0dHA6Ly93d3cuZ2l0aHViLmNvbS9tYXR0YnJ5c29uXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpblxuICogQHNlZSBodHRwOi8vbGFicy5yYW1waW50ZXJhY3RpdmUuY28udWsvdG91Y2hTd2lwZS9cbiAqIEBzZWUgaHR0cDovL3BsdWdpbnMuanF1ZXJ5LmNvbS9wcm9qZWN0L3RvdWNoU3dpcGVcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNSBNYXR0IEJyeXNvblxuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuXG4gKlxuICovXG5cbi8qXG4gKlxuICogQ2hhbmdlbG9nXG4gKiAkRGF0ZTogMjAxMC0xMi0xMiAoV2VkLCAxMiBEZWMgMjAxMCkgJFxuICogJHZlcnNpb246IDEuMC4wXG4gKiAkdmVyc2lvbjogMS4wLjEgLSByZW1vdmVkIG11bHRpYnl0ZSBjb21tZW50c1xuICpcbiAqICREYXRlOiAyMDExLTIxLTAyIChNb24sIDIxIEZlYiAyMDExKSAkXG4gKiAkdmVyc2lvbjogMS4xLjAgXHQtIGFkZGVkIGFsbG93UGFnZVNjcm9sbCBwcm9wZXJ0eSB0byBhbGxvdyBzd2lwaW5nIGFuZCBzY3JvbGxpbmcgb2YgcGFnZVxuICpcdFx0XHRcdFx0LSBjaGFuZ2VkIGhhbmRsZXIgc2lnbmF0dXJlcyBzbyBvbmUgaGFuZGxlciBjYW4gYmUgdXNlZCBmb3IgbXVsdGlwbGUgZXZlbnRzXG4gKiAkRGF0ZTogMjAxMS0yMy0wMiAoV2VkLCAyMyBGZWIgMjAxMSkgJFxuICogJHZlcnNpb246IDEuMi4wIFx0LSBhZGRlZCBjbGljayBoYW5kbGVyLiBUaGlzIGlzIGZpcmVkIGlmIHRoZSB1c2VyIHNpbXBseSBjbGlja3MgYW5kIGRvZXMgbm90IHN3aXBlLiBUaGUgZXZlbnQgb2JqZWN0IGFuZCBjbGljayB0YXJnZXQgYXJlIHBhc3NlZCB0byBoYW5kbGVyLlxuICpcdFx0XHRcdFx0LSBJZiB5b3UgdXNlIHRoZSBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvanF1ZXJ5LXVpLWZvci1pcGFkLWFuZC1pcGhvbmUvIHBsdWdpbiwgeW91IGNhbiBhbHNvIGFzc2lnbiBqUXVlcnkgbW91c2UgZXZlbnRzIHRvIGNoaWxkcmVuIG9mIGEgdG91Y2hTd2lwZSBvYmplY3QuXG4gKiAkdmVyc2lvbjogMS4yLjEgXHQtIHJlbW92ZWQgY29uc29sZSBsb2chXG4gKlxuICogJHZlcnNpb246IDEuMi4yIFx0LSBGaXhlZCBidWcgd2hlcmUgc2NvcGUgd2FzIG5vdCBwcmVzZXJ2ZWQgaW4gY2FsbGJhY2sgbWV0aG9kcy5cbiAqXG4gKiAkRGF0ZTogMjAxMS0yOC0wNCAoVGh1cnMsIDI4IEFwcmlsIDIwMTEpICRcbiAqICR2ZXJzaW9uOiAxLjIuNCBcdC0gQ2hhbmdlZCBsaWNlbmNlIHRlcm1zIHRvIGJlIE1JVCBvciBHUEwgaW5saW5lIHdpdGggalF1ZXJ5LiBBZGRlZCBjaGVjayBmb3Igc3VwcG9ydCBvZiB0b3VjaCBldmVudHMgdG8gc3RvcCBub24gY29tcGF0aWJsZSBicm93c2VycyBlcnJvcmluZy5cbiAqXG4gKiAkRGF0ZTogMjAxMS0yNy0wOSAoVHVlcywgMjcgU2VwdGVtYmVyIDIwMTEpICRcbiAqICR2ZXJzaW9uOiAxLjIuNSBcdC0gQWRkZWQgc3VwcG9ydCBmb3IgdGVzdGluZyBzd2lwZXMgd2l0aCBtb3VzZSBvbiBkZXNrdG9wIGJyb3dzZXIgKHRoYW5rcyB0byBodHRwczovL2dpdGh1Yi5jb20vam9lbGh5KVxuICpcbiAqICREYXRlOiAyMDEyLTE0LTA1IChNb24sIDE0IE1heSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4yLjYgXHQtIEFkZGVkIHRpbWVUaHJlc2hvbGQgYmV0d2VlbiBzdGFydCBhbmQgZW5kIHRvdWNoLCBzbyB1c2VyIGNhbiBpZ25vcmUgc2xvdyBzd2lwZXMgKHRoYW5rcyB0byBNYXJrIENoYXNlKS4gRGVmYXVsdCBpcyBudWxsLCBhbGwgc3dpcGVzIGFyZSBkZXRlY3RlZFxuICpcbiAqICREYXRlOiAyMDEyLTA1LTA2IChUdWVzLCAwNSBKdW5lIDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjIuNyBcdC0gQ2hhbmdlZCB0aW1lIHRocmVzaG9sZCB0byBoYXZlIG51bGwgZGVmYXVsdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEFkZGVkIGR1cmF0aW9uIHBhcmFtIHBhc3NlZCBiYWNrIGluIGV2ZW50cywgYW5kIHJlZmFjdG9yZWQgaG93IHRpbWUgaXMgaGFuZGxlZC5cbiAqXG4gKiAkRGF0ZTogMjAxMi0wNS0wNiAoVHVlcywgMDUgSnVuZSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4yLjggXHQtIEFkZGVkIHRoZSBwb3NzaWJpbGl0eSB0byByZXR1cm4gYSB2YWx1ZSBsaWtlIG51bGwgb3IgZmFsc2UgaW4gdGhlIHRyaWdnZXIgY2FsbGJhY2suIEluIHRoYXQgd2F5IHdlIGNhbiBjb250cm9sIHdoZW4gdGhlIHRvdWNoIHN0YXJ0L21vdmUgc2hvdWxkIHRha2UgZWZmZWN0IG9yIG5vdCAoc2ltcGx5IGJ5IHJldHVybmluZyBpbiBzb21lIGNhc2VzIHJldHVybiBudWxsOyBvciByZXR1cm4gZmFsc2U7KSBUaGlzIGVmZmVjdHMgdGhlIG9udG91Y2hzdGFydC9vbnRvdWNobW92ZSBldmVudC5cbiAqXG4gKiAkRGF0ZTogMjAxMi0wNi0wNiAoV2VkLCAwNiBKdW5lIDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjMuMCBcdC0gUmVmYWN0b3JlZCB3aG9sZSBwbHVnaW4gdG8gYWxsb3cgZm9yIG1ldGhvZHMgdG8gYmUgZXhlY3V0ZWQsIGFzIHdlbGwgYXMgZXhwb3NlZCBkZWZhdWx0cyBmb3IgdXNlciBvdmVycmlkZS4gQWRkZWQgJ2VuYWJsZScsICdkaXNhYmxlJywgYW5kICdkZXN0cm95JyBtZXRob2RzXG4gKlxuICogJERhdGU6IDIwMTItMDUtMDYgKEZyaSwgMDUgSnVuZSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4zLjEgXHQtIEJ1ZyBmaXhlcyAgLSBiaW5kKCkgd2l0aCBmYWxzZSBhcyBsYXN0IGFyZ3VtZW50IGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4galF1ZXJ5IDEuNiwgYWxzbywgaWYgeW91IGp1c3QgY2xpY2ssIHRoZSBkdXJhdGlvbiBpcyBub3cgcmV0dXJuZWQgY29ycmVjdGx5LlxuICpcbiAqICREYXRlOiAyMDEyLTI5LTA3IChTdW4sIDI5IEp1bHkgMjAxMikgJFxuICogJHZlcnNpb246IDEuMy4yXHQtIEFkZGVkIGZhbGxiYWNrVG9Nb3VzZUV2ZW50cyBvcHRpb24gdG8gTk9UIGNhcHR1cmUgbW91c2UgZXZlbnRzIG9uIG5vbiB0b3VjaCBkZXZpY2VzLlxuICogXHRcdFx0LSBBZGRlZCBcImFsbFwiIGZpbmdlcnMgdmFsdWUgdG8gdGhlIGZpbmdlcnMgcHJvcGVydHksIHNvIGFueSBjb21iaW5hdGlvbiBvZiBmaW5nZXJzIHRyaWdnZXJzIHRoZSBzd2lwZSwgYWxsb3dpbmcgZXZlbnQgaGFuZGxlcnMgdG8gY2hlY2sgdGhlIGZpbmdlciBjb3VudFxuICpcbiAqICREYXRlOiAyMDEyLTA5LTA4IChUaHVycywgOSBBdWcgMjAxMikgJFxuICogJHZlcnNpb246IDEuMy4zXHQtIENvZGUgdGlkeSBwcmVwIGZvciBtaW4gdmVyc2lvblxuICpcbiAqICREYXRlOiAyMDEyLTA0LTEwICh3ZWQsIDQgT2N0IDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjQuMFx0LSBBZGRlZCBwaW5jaCBzdXBwb3J0LCBwaW5jaEluIGFuZCBwaW5jaE91dFxuICpcbiAqICREYXRlOiAyMDEyLTExLTEwIChUaHVycywgMTEgT2N0IDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjUuMFx0LSBBZGRlZCBleGNsdWRlZEVsZW1lbnRzLCBhIGpxdWVyeSBzZWxlY3RvciB0aGF0IHNwZWNpZmllcyBjaGlsZCBlbGVtZW50cyB0aGF0IGRvIE5PVCB0cmlnZ2VyIHN3aXBlcy4gQnkgZGVmYXVsdCwgdGhpcyBpcyAubm9Td2lwZVxuICpcbiAqICREYXRlOiAyMDEyLTIyLTEwIChNb24sIDIyIE9jdCAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS41LjFcdC0gRml4ZWQgYnVnIHdpdGggalF1ZXJ5IDEuOCBhbmQgdHJhaWxpbmcgY29tbWEgaW4gZXhjbHVkZWRFbGVtZW50c1xuICpcdFx0XHRcdFx0LSBGaXhlZCBidWcgd2l0aCBJRSBhbmQgZXZlbnRQcmV2ZW50RGVmYXVsdCgpXG4gKiAkRGF0ZTogMjAxMy0wMS0xMiAoRnJpLCAxMiBKYW4gMjAxMykgJFxuICogJHZlcnNpb246IDEuNi4wXHQtIEZpeGVkIGJ1Z3Mgd2l0aCBwaW5jaGluZywgbWFpbmx5IHdoZW4gYm90aCBwaW5jaCBhbmQgc3dpcGUgZW5hYmxlZCwgYXMgd2VsbCBhcyBhZGRpbmcgdGltZSB0aHJlc2hvbGQgZm9yIG11bHRpZmluZ2VyIGdlc3R1cmVzLCBzbyByZWxlYXNpbmcgb25lIGZpbmdlciBiZW9mcmUgdGhlIG90aGVyIGRvZXNudCB0cmlnZ2VyIGFzIHNpbmdsZSBmaW5nZXIgZ2VzdHVyZS5cbiAqXHRcdFx0XHRcdC0gbWFkZSB0aGUgZGVtbyBzaXRlIGFsbCBzdGF0aWMgbG9jYWwgSFRNTCBwYWdlcyBzbyB0aGV5IGNhbiBiZSBydW4gbG9jYWxseSBieSBhIGRldmVsb3BlclxuICpcdFx0XHRcdFx0LSBhZGRlZCBqc0RvYyBjb21tZW50cyBhbmQgYWRkZWQgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIHBsdWdpblxuICpcdFx0XHRcdFx0LSBjb2RlIHRpZHlcbiAqXHRcdFx0XHRcdC0gYWRkZWQgdHJpZ2dlck9uVG91Y2hMZWF2ZSBwcm9wZXJ0eSB0aGF0IHdpbGwgZW5kIHRoZSBldmVudCB3aGVuIHRoZSB1c2VyIHN3aXBlcyBvZmYgdGhlIGVsZW1lbnQuXG4gKiAkRGF0ZTogMjAxMy0wMy0yMyAoU2F0LCAyMyBNYXIgMjAxMykgJFxuICogJHZlcnNpb246IDEuNi4xXHQtIEFkZGVkIHN1cHBvcnQgZm9yIGllOCB0b3VjaCBldmVudHNcbiAqICR2ZXJzaW9uOiAxLjYuMlx0LSBBZGRlZCBzdXBwb3J0IGZvciBldmVudHMgYmluZGluZyB3aXRoIG9uIC8gb2ZmIC8gYmluZCBpbiBqUSBmb3IgYWxsIGNhbGxiYWNrIG5hbWVzLlxuICogICAgICAgICAgICAgICAgICAgLSBEZXByZWNhdGVkIHRoZSAnY2xpY2snIGhhbmRsZXIgaW4gZmF2b3VyIG9mIHRhcC5cbiAqICAgICAgICAgICAgICAgICAgIC0gYWRkZWQgY2FuY2VsVGhyZXNob2xkIHByb3BlcnR5XG4gKiAgICAgICAgICAgICAgICAgICAtIGFkZGVkIG9wdGlvbiBtZXRob2QgdG8gdXBkYXRlIGluaXQgb3B0aW9ucyBhdCBydW50aW1lXG4gKiAkdmVyc2lvbiAxLjYuMyAgICAtIGFkZGVkIGRvdWJsZXRhcCwgbG9uZ3RhcCBldmVudHMgYW5kIGxvbmdUYXBUaHJlc2hvbGQsIGRvdWJsZVRhcFRocmVzaG9sZCBwcm9wZXJ0eVxuICpcbiAqICREYXRlOiAyMDEzLTA0LTA0IChUaHVycywgMDQgQXByaWwgMjAxMykgJFxuICogJHZlcnNpb24gMS42LjQgICAgLSBGaXhlZCBidWcgd2l0aCBjYW5jZWxUaHJlc2hvbGQgaW50cm9kdWNlZCBpbiAxLjYuMywgd2hlcmUgc3dpcGUgc3RhdHVzIG5vIGxvbmdlciBmaXJlZCBzdGFydCBldmVudCwgYW5kIHN0b3BwZWQgb25jZSBzd2lwaW5nIGJhY2suXG4gKlxuICogJERhdGU6IDIwMTMtMDgtMjQgKFNhdCwgMjQgQXVnIDIwMTMpICRcbiAqICR2ZXJzaW9uIDEuNi41ICAgIC0gTWVyZ2VkIGEgZmV3IHB1bGwgcmVxdWVzdHMgZml4aW5nIHZhcmlvdXMgYnVncywgYWRkZWQgQU1EIHN1cHBvcnQuXG4gKlxuICogJERhdGU6IDIwMTQtMDYtMDQgKFdlZCwgMDQgSnVuZSAyMDE0KSAkXG4gKiAkdmVyc2lvbiAxLjYuNiBcdC0gTWVyZ2Ugb2YgcHVsbCByZXF1ZXN0cy5cbiAqICAgIFx0XHRcdFx0LSBJRTEwIHRvdWNoIHN1cHBvcnRcbiAqICAgIFx0XHRcdFx0LSBPbmx5IHByZXZlbnQgZGVmYXVsdCBldmVudCBoYW5kbGluZyBvbiB2YWxpZCBzd2lwZVxuICogICAgXHRcdFx0XHQtIFNlcGFyYXRlIGxpY2Vuc2UvY2hhbmdlbG9nIGNvbW1lbnRcbiAqICAgIFx0XHRcdFx0LSBEZXRlY3QgaWYgdGhlIHN3aXBlIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgdGhlIHRvdWNoIGV2ZW50LlxuICogICAgXHRcdFx0XHQtIFBhc3MgZmluZ2VyZGF0YSB0byBldmVudCBoYW5kbGVycy5cbiAqICAgIFx0XHRcdFx0LSBBZGQgJ2hvbGQnIGdlc3R1cmVcbiAqICAgIFx0XHRcdFx0LSBCZSBtb3JlIHRvbGVyYW50IGFib3V0IHRoZSB0YXAgZGlzdGFuY2VcbiAqICAgIFx0XHRcdFx0LSBUeXBvcyBhbmQgbWlub3IgZml4ZXNcbiAqXG4gKiAkRGF0ZTogMjAxNS0yMi0wMSAoVGh1cnMsIDIyIEphbiAyMDE1KSAkXG4gKiAkdmVyc2lvbiAxLjYuNyAgICAtIEFkZGVkIHBhdGNoIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdHRicnlzb24vVG91Y2hTd2lwZS1KcXVlcnktUGx1Z2luL2lzc3Vlcy8yMDYgdG8gZml4IG1lbW9yeSBsZWFrXG4gKlxuICogJERhdGU6IDIwMTUtMi0yIChNb24sIDIgRmViIDIwMTUpICRcbiAqICR2ZXJzaW9uIDEuNi44ICAgIC0gQWRkZWQgcHJldmVudERlZmF1bHRFdmVudHMgb3B0aW9uIHRvIHByb3h5IGV2ZW50cyByZWdhcmRsZXNzLlxuICpcdFx0XHRcdFx0LSBGaXhlZCBpc3N1ZSB3aXRoIHN3aXBlIGFuZCBwaW5jaCBub3QgdHJpZ2dlcmluZyBhdCB0aGUgc2FtZSB0aW1lXG4gKlxuICogJERhdGU6IDIwMTUtOS02IChUdWVzLCA5IEp1bmUgMjAxNSkgJFxuICogJHZlcnNpb24gMS42LjkgICAgLSBBZGRlZCBQUiBmcm9tIGpkYWx0b24vaHlicmlkIHRvIGZpeCBwb2ludGVyIGV2ZW50c1xuICpcdFx0XHRcdFx0LSBBZGRlZCBzY3JvbGxpbmcgZGVtb1xuICpcdFx0XHRcdFx0LSBBZGRlZCB2ZXJzaW9uIHByb3BlcnR5IHRvIHBsdWdpblxuICpcbiAqICREYXRlOiAyMDE1LTEtMTAgKFdlZCwgMSBPY3RvYmVyIDIwMTUpICRcbiAqICR2ZXJzaW9uIDEuNi4xMCAgICAtIEFkZGVkIFBSIGZyb20gYmVhdHNwYWNlIHRvIGZpeCB0YXAgZXZlbnRzXG4gKiAkdmVyc2lvbiAxLjYuMTEgICAgLSBBZGRlZCBQUnMgZnJvbSBpbmRyaS1pbmRyaSAoIERvYyB0aWR5dXApLCBra2lyc2NoZSAoIEJvd2VyIHRpZHkgdXAgKSwgVXppVGVjaCAocHJldmVudERlZmF1bHRFdmVudHMgZml4ZXMgKVxuICpcdFx0XHRcdFx0IC0gQWxsb3dlZCBzZXR0aW5nIG11bHRpcGxlIG9wdGlvbnMgdmlhIC5zd2lwZShcIm9wdGlvbnNcIiwgb3B0aW9uc19oYXNoKSBhbmQgbW9yZSBzaW1wbHkgLnN3aXBlKG9wdGlvbnNfaGFzaCkgb3IgZXhpc2l0bmcgaW5zdGFuY2VzXG4gKiAkdmVyc2lvbiAxLjYuMTIgICAgLSBGaXhlZCBidWcgd2l0aCBtdWx0aSBmaW5nZXIgcmVsZWFzZXMgYWJvdmUgMiBub3QgdHJpZ2dlcmluZyBldmVudHNcbiAqXG4gKiAkRGF0ZTogMjAxNS0xMi0xOCAoRnJpLCAxOCBEZWNlbWJlciAyMDE1KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTMgICAgLSBBZGRlZCBQUnNcbiAqICAgICAgICAgICAgICAgICAgICAtIEZpeGVkICMyNjcgYWxsb3dQYWdlU2Nyb2xsIG5vdCB3b3JraW5nIGNvcnJlY3RseVxuICogJHZlcnNpb24gMS42LjE0ICAgIC0gRml4ZWQgIzIyMCAvICMyNDggZG91YmxldGFwIG5vdCBmaXJpbmcgd2l0aCBzd2lwZXMsICMyMjMgY29tbW9uSlMgY29tcGF0aWJsZVxuICogJHZlcnNpb24gMS42LjE1ICAgIC0gTW9yZSBidWcgZml4ZXNcbiAqXG4gKiAkRGF0ZTogMjAxNi0wNC0yOSAoRnJpLCAyOSBBcHJpbCAyMDE2KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTYgICAgLSBTd2lwZXMgd2l0aCAwIGRpc3RhbmNlIG5vdyBhbGxvdyBkZWZhdWx0IGV2ZW50cyB0byB0cmlnZ2VyLiAgU28gdGFwcGluZyBhbnkgZm9ybSBlbGVtZW50cyBvciBBIHRhZ3Mgd2lsbCBhbGxvdyBkZWZhdWx0IGludGVyYWN0aW9uLCBidXQgc3dpcGluZyB3aWxsIHRyaWdnZXIgYSBzd2lwZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmVkIHRoZSBhLCBpbnB1dCwgc2VsZWN0IGV0YyBmcm9tIHRoZSBleGNsdWRlZCBDaGlsZHJlbiBsaXN0IGFzIHRoZSAwIGRpc3RhbmNlIHRhcCBzb2x2ZXMgdGhhdCBpc3N1ZS5cbiAqICREYXRlOiAyMDE2LTA1LTE5ICAoRnJpLCAyOSBBcHJpbCAyMDE2KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTcgICAgIC0gRml4ZWQgY29udGV4dCBpc3N1ZSB3aGVuIGNhbGxpbmcgaW5zdGFuY2UgbWV0aG9kcyB2aWEgJChcInNlbGVjdG9yXCIpLnN3aXBlKFwibWV0aG9kXCIpO1xuICogJHZlcnNpb24gMS42LjE4ICAgICAtIG5vdyBob25vcnMgZmFsbGJhY2tUb01vdXNlRXZlbnRzPWZhbHNlIGZvciBNUyBQb2ludGVyIGV2ZW50cyB3aGVuIGEgTW91c2UgaXMgdXNlZC5cbiAqIFxuICogJERhdGU6IDIwMTgtMDktMTcgIChNb24sIDE3IFNlcHRlbWJlciAyMDE4KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTkgICAgIC0gcmVwbGFjZWQgalF1ZXJ5IGJpbmQgd2l0aCBvbiwgcmVwbGFjZWQgZGVwcmVjYXRlZCBgbmF2aWdhdG9yLnBvaW50ZXJFdmVudHNgIHdpdGggYHdpbmRvdy5Qb2ludGVyRXZlbnRzYFxuXG4gKi9cblxuLyoqXG4gKiBTZWUgKGh0dHA6Ly9qcXVlcnkuY29tLykuXG4gKiBAbmFtZSAkXG4gKiBAY2xhc3NcbiAqIFNlZSB0aGUgalF1ZXJ5IExpYnJhcnkgIChodHRwOi8vanF1ZXJ5LmNvbS8pIGZvciBmdWxsIGRldGFpbHMuICBUaGlzIGp1c3RcbiAqIGRvY3VtZW50cyB0aGUgZnVuY3Rpb24gYW5kIGNsYXNzZXMgdGhhdCBhcmUgYWRkZWQgdG8galF1ZXJ5IGJ5IHRoaXMgcGx1Zy1pbi5cbiAqL1xuXG4vKipcbiAqIFNlZSAoaHR0cDovL2pxdWVyeS5jb20vKVxuICogQG5hbWUgZm5cbiAqIEBjbGFzc1xuICogU2VlIHRoZSBqUXVlcnkgTGlicmFyeSAgKGh0dHA6Ly9qcXVlcnkuY29tLykgZm9yIGZ1bGwgZGV0YWlscy4gIFRoaXMganVzdFxuICogZG9jdW1lbnRzIHRoZSBmdW5jdGlvbiBhbmQgY2xhc3NlcyB0aGF0IGFyZSBhZGRlZCB0byBqUXVlcnkgYnkgdGhpcyBwbHVnLWluLlxuICogQG1lbWJlck9mICRcbiAqL1xuXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgJiYgZGVmaW5lLmFtZC5qUXVlcnkpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gQ29tbW9uSlMgTW9kdWxlXG4gICAgZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMuXG4gICAgZmFjdG9yeShqUXVlcnkpO1xuICB9XG59KGZ1bmN0aW9uKCQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLy9Db25zdGFudHNcbiAgdmFyIFZFUlNJT04gPSBcIjEuNi4xOFwiLFxuICAgIExFRlQgPSBcImxlZnRcIixcbiAgICBSSUdIVCA9IFwicmlnaHRcIixcbiAgICBVUCA9IFwidXBcIixcbiAgICBET1dOID0gXCJkb3duXCIsXG4gICAgSU4gPSBcImluXCIsXG4gICAgT1VUID0gXCJvdXRcIixcblxuICAgIE5PTkUgPSBcIm5vbmVcIixcbiAgICBBVVRPID0gXCJhdXRvXCIsXG5cbiAgICBTV0lQRSA9IFwic3dpcGVcIixcbiAgICBQSU5DSCA9IFwicGluY2hcIixcbiAgICBUQVAgPSBcInRhcFwiLFxuICAgIERPVUJMRV9UQVAgPSBcImRvdWJsZXRhcFwiLFxuICAgIExPTkdfVEFQID0gXCJsb25ndGFwXCIsXG4gICAgSE9MRCA9IFwiaG9sZFwiLFxuXG4gICAgSE9SSVpPTlRBTCA9IFwiaG9yaXpvbnRhbFwiLFxuICAgIFZFUlRJQ0FMID0gXCJ2ZXJ0aWNhbFwiLFxuXG4gICAgQUxMX0ZJTkdFUlMgPSBcImFsbFwiLFxuXG4gICAgRE9VQkxFX1RBUF9USFJFU0hPTEQgPSAxMCxcblxuICAgIFBIQVNFX1NUQVJUID0gXCJzdGFydFwiLFxuICAgIFBIQVNFX01PVkUgPSBcIm1vdmVcIixcbiAgICBQSEFTRV9FTkQgPSBcImVuZFwiLFxuICAgIFBIQVNFX0NBTkNFTCA9IFwiY2FuY2VsXCIsXG5cbiAgICBTVVBQT1JUU19UT1VDSCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyxcblxuICAgIFNVUFBPUlRTX1BPSU5URVJfSUUxMCA9IHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCAmJiAhd2luZG93LlBvaW50ZXJFdmVudCAmJiAhU1VQUE9SVFNfVE9VQ0gsXG5cbiAgICBTVVBQT1JUU19QT0lOVEVSID0gKHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSAmJiAhU1VQUE9SVFNfVE9VQ0gsXG5cbiAgICBQTFVHSU5fTlMgPSAnVG91Y2hTd2lwZSc7XG5cblxuXG4gIC8qKlxuICAqIFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24sIGFuZCBhdmFpbGFibGUgb3B0aW9ucyB0byBjb25maWd1cmUgdG91Y2ggc3dpcGUgd2l0aC5cbiAgKiBZb3UgY2FuIHNldCB0aGUgZGVmYXVsdCB2YWx1ZXMgYnkgdXBkYXRpbmcgYW55IG9mIHRoZSBwcm9wZXJ0aWVzIHByaW9yIHRvIGluc3RhbnRpYXRpb24uXG4gICogQG5hbWUgJC5mbi5zd2lwZS5kZWZhdWx0c1xuICAqIEBuYW1lc3BhY2VcbiAgKiBAcHJvcGVydHkge2ludH0gW2ZpbmdlcnM9MV0gVGhlIG51bWJlciBvZiBmaW5nZXJzIHRvIGRldGVjdCBpbiBhIHN3aXBlLiBBbnkgc3dpcGVzIHRoYXQgZG8gbm90IG1lZXQgdGhpcyByZXF1aXJlbWVudCB3aWxsIE5PVCB0cmlnZ2VyIHN3aXBlIGhhbmRsZXJzLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbdGhyZXNob2xkPTc1XSBUaGUgbnVtYmVyIG9mIHBpeGVscyB0aGF0IHRoZSB1c2VyIG11c3QgbW92ZSB0aGVpciBmaW5nZXIgYnkgYmVmb3JlIGl0IGlzIGNvbnNpZGVyZWQgYSBzd2lwZS5cbiAgKiBAcHJvcGVydHkge2ludH0gW2NhbmNlbFRocmVzaG9sZD1udWxsXSBUaGUgbnVtYmVyIG9mIHBpeGVscyB0aGF0IHRoZSB1c2VyIG11c3QgbW92ZSB0aGVpciBmaW5nZXIgYmFjayBmcm9tIHRoZSBvcmlnaW5hbCBzd2lwZSBkaXJlY3Rpb24gdG8gY2FuY2VsIHRoZSBnZXN0dXJlLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbcGluY2hUaHJlc2hvbGQ9MjBdIFRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgdGhlIHVzZXIgbXVzdCBwaW5jaCB0aGVpciBmaW5nZXIgYnkgYmVmb3JlIGl0IGlzIGNvbnNpZGVyZWQgYSBwaW5jaC5cbiAgKiBAcHJvcGVydHkge2ludH0gW21heFRpbWVUaHJlc2hvbGQ9bnVsbF0gVGltZSwgaW4gbWlsbGlzZWNvbmRzLCBiZXR3ZWVuIHRvdWNoU3RhcnQgYW5kIHRvdWNoRW5kIG11c3QgTk9UIGV4Y2VlZCBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkIGEgc3dpcGUuXG4gICogQHByb3BlcnR5IHtpbnR9IFtmaW5nZXJSZWxlYXNlVGhyZXNob2xkPTI1MF0gVGltZSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiByZWxlYXNpbmcgbXVsdGlwbGUgZmluZ2Vycy4gIElmIDIgZmluZ2VycyBhcmUgZG93biwgYW5kIGFyZSByZWxlYXNlZCBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBpZiB0aGV5IGFyZSB3aXRoaW4gdGhpcyB0aHJlc2hvbGQsIGl0IGNvdW50cyBhcyBhIHNpbXVsdGFuZW91cyByZWxlYXNlLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbbG9uZ1RhcFRocmVzaG9sZD01MDBdIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gdGFwIGFuZCByZWxlYXNlIGZvciBhIGxvbmcgdGFwXG4gICogQHByb3BlcnR5IHtpbnR9IFtkb3VibGVUYXBUaHJlc2hvbGQ9MjAwXSBUaW1lIGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIDIgdGFwcyB0byBjb3VudCBhcyBhIGRvdWJsZSB0YXBcbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGU9bnVsbF0gQSBoYW5kbGVyIHRvIGNhdGNoIGFsbCBzd2lwZXMuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpzd2lwZX1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGVMZWZ0PW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJsZWZ0XCIgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVMZWZ0fVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtzd2lwZVJpZ2h0PW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJyaWdodFwiIHN3aXBlcy4gU2VlIHtAbGluayAkLmZuLnN3aXBlI2V2ZW50OnN3aXBlUmlnaHR9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3N3aXBlVXA9bnVsbF0gQSBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGZvciBcInVwXCIgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVVcH1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGVEb3duPW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJkb3duXCIgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVEb3dufVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtzd2lwZVN0YXR1cz1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBldmVyeSBwaGFzZSBvZiB0aGUgc3dpcGUuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpzd2lwZVN0YXR1c31cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbcGluY2hJbj1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBwaW5jaCBpbiBldmVudHMuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpwaW5jaElufVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtwaW5jaE91dD1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBwaW5jaCBvdXQgZXZlbnRzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6cGluY2hPdXR9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3BpbmNoU3RhdHVzPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIGV2ZXJ5IHBoYXNlIG9mIGEgcGluY2guIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpwaW5jaFN0YXR1c31cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbdGFwPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIganVzdCB0YXBzIG9uIHRoZSBpdGVtLCByYXRoZXIgdGhhbiBzd2lwZXMgaXQuIElmIHRoZXkgZG8gbm90IG1vdmUsIHRhcCBpcyB0cmlnZ2VyZWQsIGlmIHRoZXkgZG8gbW92ZSwgaXQgaXMgbm90LlxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtkb3VibGVUYXA9bnVsbF0gQSBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBkb3VibGUgdGFwcyBvbiB0aGUgaXRlbS4gVGhlIGRlbGF5IGJldHdlZW4gdGFwcyBjYW4gYmUgc2V0IHdpdGggdGhlIGRvdWJsZVRhcFRocmVzaG9sZCBwcm9wZXJ0eS4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRlZmF1bHRzI2RvdWJsZVRhcFRocmVzaG9sZH1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbbG9uZ1RhcD1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIHdoZW4gYSB1c2VyIGxvbmcgdGFwcyBvbiB0aGUgaXRlbS4gVGhlIGRlbGF5IGJldHdlZW4gc3RhcnQgYW5kIGVuZCBjYW4gYmUgc2V0IHdpdGggdGhlIGxvbmdUYXBUaHJlc2hvbGQgcHJvcGVydHkuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNsb25nVGFwVGhyZXNob2xkfVxuICAqIEBwcm9wZXJ0eSAoZnVuY3Rpb24pIFtob2xkPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgcmVhY2hlcyBsb25nVGFwVGhyZXNob2xkIG9uIHRoZSBpdGVtLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZH1cbiAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt0cmlnZ2VyT25Ub3VjaEVuZD10cnVlXSBJZiB0cnVlLCB0aGUgc3dpcGUgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgdG91Y2ggZW5kIGV2ZW50IGlzIHJlY2VpdmVkICh1c2VyIHJlbGVhc2VzIGZpbmdlcikuICBJZiBmYWxzZSwgaXQgd2lsbCBiZSB0cmlnZ2VyZWQgb24gcmVhY2hpbmcgdGhlIHRocmVzaG9sZCwgYW5kIHRoZW4gY2FuY2VsIHRoZSB0b3VjaCBldmVudCBhdXRvbWF0aWNhbGx5LlxuICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3RyaWdnZXJPblRvdWNoTGVhdmU9ZmFsc2VdIElmIHRydWUsIHRoZW4gd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhlIHN3aXBlIG9iamVjdCwgdGhlIHN3aXBlIHdpbGwgZW5kIGFuZCB0cmlnZ2VyIGFwcHJvcHJpYXRlIGhhbmRsZXJzLlxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfHVuZGVmaW5lZH0gW2FsbG93UGFnZVNjcm9sbD0nYXV0byddIEhvdyB0aGUgYnJvd3NlciBoYW5kbGVzIHBhZ2Ugc2Nyb2xscyB3aGVuIHRoZSB1c2VyIGlzIHN3aXBpbmcgb24gYSB0b3VjaFN3aXBlIG9iamVjdC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLnBhZ2VTY3JvbGx9LiAgPGJyLz48YnIvPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cImF1dG9cIjwvY29kZT4gOiBhbGwgdW5kZWZpbmVkIHN3aXBlcyB3aWxsIGNhdXNlIHRoZSBwYWdlIHRvIHNjcm9sbCBpbiB0aGF0IGRpcmVjdGlvbi4gPGJyLz5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGU+XCJub25lXCI8L2NvZGU+IDogdGhlIHBhZ2Ugd2lsbCBub3Qgc2Nyb2xsIHdoZW4gdXNlciBzd2lwZXMuIDxici8+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlwiaG9yaXpvbnRhbFwiPC9jb2RlPiA6IHdpbGwgZm9yY2UgcGFnZSB0byBzY3JvbGwgb24gaG9yaXpvbnRhbCBzd2lwZXMuIDxici8+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlwidmVydGljYWxcIjwvY29kZT4gOiB3aWxsIGZvcmNlIHBhZ2UgdG8gc2Nyb2xsIG9uIHZlcnRpY2FsIHN3aXBlcy4gPGJyLz5cbiAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmYWxsYmFja1RvTW91c2VFdmVudHM9dHJ1ZV0gSWYgdHJ1ZSBtb3VzZSBldmVudHMgYXJlIHVzZWQgd2hlbiBydW4gb24gYSBub24gdG91Y2ggZGV2aWNlLCBmYWxzZSB3aWxsIHN0b3Agc3dpcGVzIGJlaW5nIHRyaWdnZXJlZCBieSBtb3VzZSBldmVudHMgb24gbm9uIHRvdWNoIGRldmljZXMuXG4gICogQHByb3BlcnR5IHtzdHJpbmd9IFtleGNsdWRlZEVsZW1lbnRzPVwiLm5vU3dpcGVcIl0gQSBqcXVlcnkgc2VsZWN0b3IgdGhhdCBzcGVjaWZpZXMgY2hpbGQgZWxlbWVudHMgdGhhdCBkbyBOT1QgdHJpZ2dlciBzd2lwZXMuIEJ5IGRlZmF1bHQgdGhpcyBleGNsdWRlcyBlbGVtZW50cyB3aXRoIHRoZSBjbGFzcyAubm9Td2lwZSAuXG4gICogQHByb3BlcnR5IHtib29sZWFufSBbcHJldmVudERlZmF1bHRFdmVudHM9dHJ1ZV0gYnkgZGVmYXVsdCBkZWZhdWx0IGV2ZW50cyBhcmUgY2FuY2VsbGVkLCBzbyB0aGUgcGFnZSBkb2Vzbid0IG1vdmUuICBZb3UgY2FuIGRpc2FibGUgdGhpcyBzbyBib3RoIG5hdGl2ZSBldmVudHMgZmlyZSBhcyB3ZWxsIGFzIHlvdXIgaGFuZGxlcnMuXG5cbiAgKi9cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGZpbmdlcnM6IDEsXG4gICAgdGhyZXNob2xkOiA3NSxcbiAgICBjYW5jZWxUaHJlc2hvbGQ6IG51bGwsXG4gICAgcGluY2hUaHJlc2hvbGQ6IDIwLFxuICAgIG1heFRpbWVUaHJlc2hvbGQ6IG51bGwsXG4gICAgZmluZ2VyUmVsZWFzZVRocmVzaG9sZDogMjUwLFxuICAgIGxvbmdUYXBUaHJlc2hvbGQ6IDUwMCxcbiAgICBkb3VibGVUYXBUaHJlc2hvbGQ6IDIwMCxcbiAgICBzd2lwZTogbnVsbCxcbiAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgc3dpcGVSaWdodDogbnVsbCxcbiAgICBzd2lwZVVwOiBudWxsLFxuICAgIHN3aXBlRG93bjogbnVsbCxcbiAgICBzd2lwZVN0YXR1czogbnVsbCxcbiAgICBwaW5jaEluOiBudWxsLFxuICAgIHBpbmNoT3V0OiBudWxsLFxuICAgIHBpbmNoU3RhdHVzOiBudWxsLFxuICAgIGNsaWNrOiBudWxsLCAvL0RlcHJlY2F0ZWQgc2luY2UgMS42LjJcbiAgICB0YXA6IG51bGwsXG4gICAgZG91YmxlVGFwOiBudWxsLFxuICAgIGxvbmdUYXA6IG51bGwsXG4gICAgaG9sZDogbnVsbCxcbiAgICB0cmlnZ2VyT25Ub3VjaEVuZDogdHJ1ZSxcbiAgICB0cmlnZ2VyT25Ub3VjaExlYXZlOiBmYWxzZSxcbiAgICBhbGxvd1BhZ2VTY3JvbGw6IFwiYXV0b1wiLFxuICAgIGZhbGxiYWNrVG9Nb3VzZUV2ZW50czogdHJ1ZSxcbiAgICBleGNsdWRlZEVsZW1lbnRzOiBcIi5ub1N3aXBlXCIsXG4gICAgcHJldmVudERlZmF1bHRFdmVudHM6IHRydWVcbiAgfTtcblxuXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgVG91Y2hTd2lwZSBiZWhhdmlvdXIgdG8gb25lIG9yIG1vcmUgalF1ZXJ5IG9iamVjdHMuXG4gICAqIFRoZSBUb3VjaFN3aXBlIHBsdWdpbiBjYW4gYmUgaW5zdGFudGlhdGVkIHZpYSB0aGlzIG1ldGhvZCwgb3IgbWV0aG9kcyB3aXRoaW5cbiAgICogVG91Y2hTd2lwZSBjYW4gYmUgZXhlY3V0ZWQgdmlhIHRoaXMgbWV0aG9kIGFzIHBlciBqUXVlcnkgcGx1Z2luIGFyY2hpdGVjdHVyZS5cbiAgICogQW4gZXhpc3RpbmcgcGx1Z2luIGNhbiBoYXZlIGl0cyBvcHRpb25zIGNoYW5nZWQgc2ltcGx5IGJ5IHJlIGNhbGxpbmcgLnN3aXBlKG9wdGlvbnMpXG4gICAqIEBzZWUgVG91Y2hTd2lwZVxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtNaXhlZH0gbWV0aG9kIElmIHRoZSBjdXJyZW50IERPTU5vZGUgaXMgYSBUb3VjaFN3aXBlIG9iamVjdCwgYW5kIDxjb2RlPm1ldGhvZDwvY29kZT4gaXMgYSBUb3VjaFN3aXBlIG1ldGhvZCwgdGhlblxuICAgKiB0aGUgPGNvZGU+bWV0aG9kPC9jb2RlPiBpcyBleGVjdXRlZCwgYW5kIGFueSBmb2xsb3dpbmcgYXJndW1lbnRzIGFyZSBwYXNzZWQgdG8gdGhlIFRvdWNoU3dpcGUgbWV0aG9kLlxuICAgKiBJZiA8Y29kZT5tZXRob2Q8L2NvZGU+IGlzIGFuIG9iamVjdCwgdGhlbiB0aGUgVG91Y2hTd2lwZSBjbGFzcyBpcyBpbnN0YW50aWF0ZWQgb24gdGhlIGN1cnJlbnQgRE9NTm9kZSwgcGFzc2luZyB0aGVcbiAgICogY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIG9iamVjdC4gU2VlIFRvdWNoU3dpcGVcbiAgICpcbiAgICovXG4gICQuZm4uc3dpcGUgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgcGx1Z2luID0gJHRoaXMuZGF0YShQTFVHSU5fTlMpO1xuXG4gICAgLy9DaGVjayBpZiB3ZSBhcmUgYWxyZWFkeSBpbnN0YW50aWF0ZWQgYW5kIHRyeWluZyB0byBleGVjdXRlIGEgbWV0aG9kXG4gICAgaWYgKHBsdWdpbiAmJiB0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHBsdWdpblttZXRob2RdKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW5bbWV0aG9kXS5hcHBseShwbHVnaW4sIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJC5lcnJvcignTWV0aG9kICcgKyBtZXRob2QgKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zd2lwZScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vRWxzZSB1cGRhdGUgZXhpc3RpbmcgcGx1Z2luIHdpdGggbmV3IG9wdGlvbnMgaGFzaFxuICAgIGVsc2UgaWYgKHBsdWdpbiAmJiB0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0Jykge1xuICAgICAgcGx1Z2luWydvcHRpb24nXS5hcHBseShwbHVnaW4sIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy9FbHNlIG5vdCBpbnN0YW50aWF0ZWQgYW5kIHRyeWluZyB0byBwYXNzIGluaXQgb2JqZWN0IChvciBub3RoaW5nKVxuICAgIGVsc2UgaWYgKCFwbHVnaW4gJiYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QpKSB7XG4gICAgICByZXR1cm4gaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiAkdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHBsdWdpblxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gICQuZm4uc3dpcGUudmVyc2lvbiA9IFZFUlNJT047XG5cblxuXG4gIC8vRXhwb3NlIG91ciBkZWZhdWx0cyBzbyBhIHVzZXIgY291bGQgb3ZlcnJpZGUgdGhlIHBsdWdpbiBkZWZhdWx0c1xuICAkLmZuLnN3aXBlLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cbiAgLyoqXG4gICAqIFRoZSBwaGFzZXMgdGhhdCBhIHRvdWNoIGV2ZW50IGdvZXMgdGhyb3VnaC4gIFRoZSA8Y29kZT5waGFzZTwvY29kZT4gaXMgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmVhZCBvbmx5LCBhdHRlbXB0aW5nIHRvIGNoYW5nZSB0aGVtIHdpbGwgbm90IGFsdGVyIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICogQG5hbWVzcGFjZVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX1NUQVJUIENvbnN0YW50IGluZGljYXRpbmcgdGhlIHN0YXJ0IHBoYXNlIG9mIHRoZSB0b3VjaCBldmVudC4gVmFsdWUgaXMgPGNvZGU+XCJzdGFydFwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX01PVkUgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgbW92ZSBwaGFzZSBvZiB0aGUgdG91Y2ggZXZlbnQuIFZhbHVlIGlzIDxjb2RlPlwibW92ZVwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX0VORCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBlbmQgcGhhc2Ugb2YgdGhlIHRvdWNoIGV2ZW50LiBWYWx1ZSBpcyA8Y29kZT5cImVuZFwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX0NBTkNFTCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBjYW5jZWwgcGhhc2Ugb2YgdGhlIHRvdWNoIGV2ZW50LiBWYWx1ZSBpcyA8Y29kZT5cImNhbmNlbFwiPC9jb2RlPi5cbiAgICovXG4gICQuZm4uc3dpcGUucGhhc2VzID0ge1xuICAgIFBIQVNFX1NUQVJUOiBQSEFTRV9TVEFSVCxcbiAgICBQSEFTRV9NT1ZFOiBQSEFTRV9NT1ZFLFxuICAgIFBIQVNFX0VORDogUEhBU0VfRU5ELFxuICAgIFBIQVNFX0NBTkNFTDogUEhBU0VfQ0FOQ0VMXG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rpb24gY29uc3RhbnRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJlYWQgb25seSwgYXR0ZW1wdGluZyB0byBjaGFuZ2UgdGhlbSB3aWxsIG5vdCBhbHRlciB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBMRUZUIENvbnN0YW50IGluZGljYXRpbmcgdGhlIGxlZnQgZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cImxlZnRcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSSUdIVCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSByaWdodCBkaXJlY3Rpb24uIFZhbHVlIGlzIDxjb2RlPlwicmlnaHRcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBVUCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSB1cCBkaXJlY3Rpb24uIFZhbHVlIGlzIDxjb2RlPlwidXBcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBET1dOIENvbnN0YW50IGluZGljYXRpbmcgdGhlIGRvd24gZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cImNhbmNlbFwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IElOIENvbnN0YW50IGluZGljYXRpbmcgdGhlIGluIGRpcmVjdGlvbi4gVmFsdWUgaXMgPGNvZGU+XCJpblwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IE9VVCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBvdXQgZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cIm91dFwiPC9jb2RlPi5cbiAgICovXG4gICQuZm4uc3dpcGUuZGlyZWN0aW9ucyA9IHtcbiAgICBMRUZUOiBMRUZULFxuICAgIFJJR0hUOiBSSUdIVCxcbiAgICBVUDogVVAsXG4gICAgRE9XTjogRE9XTixcbiAgICBJTjogSU4sXG4gICAgT1VUOiBPVVRcbiAgfTtcblxuICAvKipcbiAgICogVGhlIHBhZ2Ugc2Nyb2xsIGNvbnN0YW50cyB0aGF0IGNhbiBiZSB1c2VkIHRvIHNldCB0aGUgdmFsdWUgb2YgPGNvZGU+YWxsb3dQYWdlU2Nyb2xsPC9jb2RlPiBvcHRpb25cbiAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmVhZCBvbmx5XG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHJlYWRvbmx5XG4gICAqIEBzZWUgJC5mbi5zd2lwZS5kZWZhdWx0cyNhbGxvd1BhZ2VTY3JvbGxcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IE5PTkUgQ29uc3RhbnQgaW5kaWNhdGluZyBubyBwYWdlIHNjcm9sbGluZyBpcyBhbGxvd2VkLiBWYWx1ZSBpcyA8Y29kZT5cIm5vbmVcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBIT1JJWk9OVEFMIENvbnN0YW50IGluZGljYXRpbmcgaG9yaXpvbnRhbCBwYWdlIHNjcm9sbGluZyBpcyBhbGxvd2VkLiBWYWx1ZSBpcyA8Y29kZT5cImhvcml6b250YWxcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRVJUSUNBTCBDb25zdGFudCBpbmRpY2F0aW5nIHZlcnRpY2FsIHBhZ2Ugc2Nyb2xsaW5nIGlzIGFsbG93ZWQuIFZhbHVlIGlzIDxjb2RlPlwidmVydGljYWxcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBBVVRPIENvbnN0YW50IGluZGljYXRpbmcgZWl0aGVyIGhvcml6b250YWwgb3IgdmVydGljYWwgd2lsbCBiZSBhbGxvd2VkLCBkZXBlbmRpbmcgb24gdGhlIHN3aXBlIGhhbmRsZXJzIHJlZ2lzdGVyZWQuIFZhbHVlIGlzIDxjb2RlPlwiYXV0b1wiPC9jb2RlPi5cbiAgICovXG4gICQuZm4uc3dpcGUucGFnZVNjcm9sbCA9IHtcbiAgICBOT05FOiBOT05FLFxuICAgIEhPUklaT05UQUw6IEhPUklaT05UQUwsXG4gICAgVkVSVElDQUw6IFZFUlRJQ0FMLFxuICAgIEFVVE86IEFVVE9cbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZCBpbiBhIHN3aXBlLiAgVGhlc2UgYXJlIHVzZWQgdG8gc2V0IGJvdGggdGhlIHZhbHVlIG9mIDxjb2RlPmZpbmdlcnM8L2NvZGU+IGluIHRoZVxuICAgKiBvcHRpb25zIG9iamVjdCwgYXMgd2VsbCBhcyB0aGUgdmFsdWUgb2YgdGhlIDxjb2RlPmZpbmdlcnM8L2NvZGU+IGV2ZW50IHByb3BlcnR5LlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSByZWFkIG9ubHksIGF0dGVtcHRpbmcgdG8gY2hhbmdlIHRoZW0gd2lsbCBub3QgYWx0ZXIgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEByZWFkb25seVxuICAgKiBAc2VlICQuZm4uc3dpcGUuZGVmYXVsdHMjZmluZ2Vyc1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gT05FIENvbnN0YW50IGluZGljYXRpbmcgMSBmaW5nZXIgaXMgdG8gYmUgZGV0ZWN0ZWQgLyB3YXMgZGV0ZWN0ZWQuIFZhbHVlIGlzIDxjb2RlPjE8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gVFdPIENvbnN0YW50IGluZGljYXRpbmcgMiBmaW5nZXJzIGFyZSB0byBiZSBkZXRlY3RlZCAvIHdlcmUgZGV0ZWN0ZWQuIFZhbHVlIGlzIDxjb2RlPjI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gVEhSRUUgQ29uc3RhbnQgaW5kaWNhdGluZyAzIGZpbmdlciBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBWYWx1ZSBpcyA8Y29kZT4zPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IEZPVVIgQ29uc3RhbnQgaW5kaWNhdGluZyA0IGZpbmdlciBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBOb3QgYWxsIGRldmljZXMgc3VwcG9ydCB0aGlzLiBWYWx1ZSBpcyA8Y29kZT40PC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IEZJVkUgQ29uc3RhbnQgaW5kaWNhdGluZyA1IGZpbmdlciBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBOb3QgYWxsIGRldmljZXMgc3VwcG9ydCB0aGlzLiBWYWx1ZSBpcyA8Y29kZT41PC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IEFMTCBDb25zdGFudCBpbmRpY2F0aW5nIGFueSBjb21iaW5hdGlvbiBvZiBmaW5nZXIgYXJlIHRvIGJlIGRldGVjdGVkLiAgVmFsdWUgaXMgPGNvZGU+XCJhbGxcIjwvY29kZT4uXG4gICAqL1xuICAkLmZuLnN3aXBlLmZpbmdlcnMgPSB7XG4gICAgT05FOiAxLFxuICAgIFRXTzogMixcbiAgICBUSFJFRTogMyxcbiAgICBGT1VSOiA0LFxuICAgIEZJVkU6IDUsXG4gICAgQUxMOiBBTExfRklOR0VSU1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIHRoZSBwbHVnaW4gZm9yIGVhY2ggRE9NIGVsZW1lbnQgbWF0Y2hlZFxuICAgKiBUaGlzIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1haW4gVG91Y2hTd2lwZSBjbGFzcyBmb3IgZWFjaCBET00gZWxlbWVudCwgYW5kIHRoZW5cbiAgICogc2F2ZXMgYSByZWZlcmVuY2UgdG8gdGhhdCBpbnN0YW5jZSBpbiB0aGUgZWxlbWVudHMgZGF0YSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcbiAgICAvL1ByZXAgYW5kIGV4dGVuZCB0aGUgb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIChvcHRpb25zLmFsbG93UGFnZVNjcm9sbCA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zLnN3aXBlICE9PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5zd2lwZVN0YXR1cyAhPT0gdW5kZWZpbmVkKSkpIHtcbiAgICAgIG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsID0gTk9ORTtcbiAgICB9XG5cbiAgICAvL0NoZWNrIGZvciBkZXByZWNhdGVkIG9wdGlvbnNcbiAgICAvL0Vuc3VyZSB0aGF0IGFueSBvbGQgY2xpY2sgaGFuZGxlcnMgYXJlIGFzc2lnbmVkIHRvIHRoZSBuZXcgdGFwLCB1bmxlc3Mgd2UgaGF2ZSBhIHRhcFxuICAgIGlmIChvcHRpb25zLmNsaWNrICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy50YXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucy50YXAgPSBvcHRpb25zLmNsaWNrO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIC8vcGFzcyBlbXB0eSBvYmplY3Qgc28gd2UgZG9udCBtb2RpZnkgdGhlIGRlZmF1bHRzXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnN3aXBlLmRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vRm9yIGVhY2ggZWxlbWVudCBpbnN0YW50aWF0ZSB0aGUgcGx1Z2luXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgIC8vQ2hlY2sgd2UgaGF2ZW50IGFscmVhZHkgaW5pdGlhbGlzZWQgdGhlIHBsdWdpblxuICAgICAgdmFyIHBsdWdpbiA9ICR0aGlzLmRhdGEoUExVR0lOX05TKTtcblxuICAgICAgaWYgKCFwbHVnaW4pIHtcbiAgICAgICAgcGx1Z2luID0gbmV3IFRvdWNoU3dpcGUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICR0aGlzLmRhdGEoUExVR0lOX05TLCBwbHVnaW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1haW4gVG91Y2hTd2lwZSBQbHVnaW4gQ2xhc3MuXG4gICAqIERvIG5vdCB1c2UgdGhpcyB0byBjb25zdHJ1Y3QgeW91ciBUb3VjaFN3aXBlIG9iamVjdCwgdXNlIHRoZSBqUXVlcnkgcGx1Z2luIG1ldGhvZCAkLmZuLnN3aXBlKCk7IHtAbGluayAkLmZuLnN3aXBlfVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbmFtZSBUb3VjaFN3aXBlXG4gICAqIEBwYXJhbSB7RE9NTm9kZX0gZWxlbWVudCBUaGUgSFRNTCBET00gb2JqZWN0IHRvIGFwcGx5IHRvIHBsdWdpbiB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBjb25maWd1cmUgdGhlIHBsdWdpbiB3aXRoLiAgQGxpbmsgeyQuZm4uc3dpcGUuZGVmYXVsdHN9XG4gICAqIEBzZWUgJC5maC5zd2lwZS5kZWZhdWx0c1xuICAgKiBAc2VlICQuZmguc3dpcGVcbiAgICogQGNsYXNzXG4gICAqL1xuICBmdW5jdGlvbiBUb3VjaFN3aXBlKGVsZW1lbnQsIG9wdGlvbnMpIHtcblxuICAgIC8vdGFrZSBhIGxvY2FsL2luc3RhY25lIGxldmVsIGNvcHkgb2YgdGhlIG9wdGlvbnMgLSBzaG91bGQgbWFrZSBpdCB0aGlzLm9wdGlvbnMgcmVhbGx5Li4uXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgdXNlVG91Y2hFdmVudHMgPSAoU1VQUE9SVFNfVE9VQ0ggfHwgU1VQUE9SVFNfUE9JTlRFUiB8fCAhb3B0aW9ucy5mYWxsYmFja1RvTW91c2VFdmVudHMpLFxuICAgICAgU1RBUlRfRVYgPSB1c2VUb3VjaEV2ZW50cyA/IChTVVBQT1JUU19QT0lOVEVSID8gKFNVUFBPUlRTX1BPSU5URVJfSUUxMCA/ICdNU1BvaW50ZXJEb3duJyA6ICdwb2ludGVyZG93bicpIDogJ3RvdWNoc3RhcnQnKSA6ICdtb3VzZWRvd24nLFxuICAgICAgTU9WRV9FViA9IHVzZVRvdWNoRXZlbnRzID8gKFNVUFBPUlRTX1BPSU5URVIgPyAoU1VQUE9SVFNfUE9JTlRFUl9JRTEwID8gJ01TUG9pbnRlck1vdmUnIDogJ3BvaW50ZXJtb3ZlJykgOiAndG91Y2htb3ZlJykgOiAnbW91c2Vtb3ZlJyxcbiAgICAgIEVORF9FViA9IHVzZVRvdWNoRXZlbnRzID8gKFNVUFBPUlRTX1BPSU5URVIgPyAoU1VQUE9SVFNfUE9JTlRFUl9JRTEwID8gJ01TUG9pbnRlclVwJyA6ICdwb2ludGVydXAnKSA6ICd0b3VjaGVuZCcpIDogJ21vdXNldXAnLFxuICAgICAgTEVBVkVfRVYgPSB1c2VUb3VjaEV2ZW50cyA/IChTVVBQT1JUU19QT0lOVEVSID8gJ21vdXNlbGVhdmUnIDogbnVsbCkgOiAnbW91c2VsZWF2ZScsIC8vd2UgbWFudWFsbHkgZGV0ZWN0IGxlYXZlIG9uIHRvdWNoIGRldmljZXMsIHNvIG51bGwgZXZlbnQgaGVyZVxuICAgICAgQ0FOQ0VMX0VWID0gKFNVUFBPUlRTX1BPSU5URVIgPyAoU1VQUE9SVFNfUE9JTlRFUl9JRTEwID8gJ01TUG9pbnRlckNhbmNlbCcgOiAncG9pbnRlcmNhbmNlbCcpIDogJ3RvdWNoY2FuY2VsJyk7XG5cblxuXG4gICAgLy90b3VjaCBwcm9wZXJ0aWVzXG4gICAgdmFyIGRpc3RhbmNlID0gMCxcbiAgICAgIGRpcmVjdGlvbiA9IG51bGwsXG4gICAgICBjdXJyZW50RGlyZWN0aW9uID0gbnVsbCxcbiAgICAgIGR1cmF0aW9uID0gMCxcbiAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gMCxcbiAgICAgIGVuZFRvdWNoZXNEaXN0YW5jZSA9IDAsXG4gICAgICBwaW5jaFpvb20gPSAxLFxuICAgICAgcGluY2hEaXN0YW5jZSA9IDAsXG4gICAgICBwaW5jaERpcmVjdGlvbiA9IDAsXG4gICAgICBtYXhpbXVtc01hcCA9IG51bGw7XG5cblxuXG4gICAgLy9qUXVlcnkgd3JhcHBlZCBlbGVtZW50IGZvciB0aGlzIGluc3RhbmNlXG4gICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcblxuICAgIC8vQ3VycmVudCBwaGFzZSBvZiB0aCB0b3VjaCBjeWNsZVxuICAgIHZhciBwaGFzZSA9IFwic3RhcnRcIjtcblxuICAgIC8vIHRoZSBjdXJyZW50IG51bWJlciBvZiBmaW5nZXJzIGJlaW5nIHVzZWQuXG4gICAgdmFyIGZpbmdlckNvdW50ID0gMDtcblxuICAgIC8vdHJhY2sgbW91c2UgcG9pbnRzIC8gZGVsdGFcbiAgICB2YXIgZmluZ2VyRGF0YSA9IHt9O1xuXG4gICAgLy90cmFjayB0aW1lc1xuICAgIHZhciBzdGFydFRpbWUgPSAwLFxuICAgICAgZW5kVGltZSA9IDAsXG4gICAgICBwcmV2aW91c1RvdWNoRW5kVGltZSA9IDAsXG4gICAgICBmaW5nZXJDb3VudEF0UmVsZWFzZSA9IDAsXG4gICAgICBkb3VibGVUYXBTdGFydFRpbWUgPSAwO1xuXG4gICAgLy9UaW1lb3V0c1xuICAgIHZhciBzaW5nbGVUYXBUaW1lb3V0ID0gbnVsbCxcbiAgICAgIGhvbGRUaW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIEFkZCBnZXN0dXJlcyB0byBhbGwgc3dpcGFibGUgYXJlYXMgaWYgc3VwcG9ydGVkXG4gICAgdHJ5IHtcbiAgICAgICRlbGVtZW50Lm9uKFNUQVJUX0VWLCB0b3VjaFN0YXJ0KTtcbiAgICAgICRlbGVtZW50Lm9uKENBTkNFTF9FViwgdG91Y2hDYW5jZWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICQuZXJyb3IoJ2V2ZW50cyBub3Qgc3VwcG9ydGVkICcgKyBTVEFSVF9FViArICcsJyArIENBTkNFTF9FViArICcgb24galF1ZXJ5LnN3aXBlJyk7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvL1B1YmxpYyBtZXRob2RzXG4gICAgLy9cblxuICAgIC8qKlxuICAgICAqIHJlLWVuYWJsZXMgdGhlIHN3aXBlIHBsdWdpbiB3aXRoIHRoZSBwcmV2aW91cyBjb25maWd1cmF0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJC5mbi5zd2lwZSNlbmFibGVcbiAgICAgKiBAcmV0dXJuIHtET01Ob2RlfSBUaGUgRG9tIGVsZW1lbnQgdGhhdCB3YXMgcmVnaXN0ZXJlZCB3aXRoIFRvdWNoU3dpcGVcbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJlbmFibGVcIik7XG4gICAgICovXG4gICAgdGhpcy5lbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vSW5jYXNlIHdlIGFyZSBhbHJlYWR5IGVuYWJsZWQsIGNsZWFuIHVwLi4uXG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgICRlbGVtZW50Lm9uKFNUQVJUX0VWLCB0b3VjaFN0YXJ0KTtcbiAgICAgICRlbGVtZW50Lm9uKENBTkNFTF9FViwgdG91Y2hDYW5jZWwpO1xuICAgICAgcmV0dXJuICRlbGVtZW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBkaXNhYmxlcyB0aGUgc3dpcGUgcGx1Z2luXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJC5mbi5zd2lwZSNkaXNhYmxlXG4gICAgICogQHJldHVybiB7RE9NTm9kZX0gVGhlIERvbSBlbGVtZW50IHRoYXQgaXMgbm93IHJlZ2lzdGVyZWQgd2l0aCBUb3VjaFN3aXBlXG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwiZGlzYWJsZVwiKTtcbiAgICAgKi9cbiAgICB0aGlzLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgcmV0dXJuICRlbGVtZW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBzd2lwZSBwbHVnaW4gY29tcGxldGVseS4gVG8gdXNlIGFueSBzd2lwZSBtZXRob2RzLCB5b3UgbXVzdCByZSBpbml0aWFsaXNlIHRoZSBwbHVnaW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJC5mbi5zd2lwZSNkZXN0cm95XG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwiZGVzdHJveVwiKTtcbiAgICAgKi9cbiAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgJGVsZW1lbnQuZGF0YShQTFVHSU5fTlMsIG51bGwpO1xuICAgICAgJGVsZW1lbnQgPSBudWxsO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBydW4gdGltZSB1cGRhdGluZyBvZiB0aGUgc3dpcGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lICQuZm4uc3dpcGUjb3B0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFRoZSBvcHRpb24gcHJvcGVydHkgdG8gZ2V0IG9yIHNldCwgb3IgYSBoYXMgb2YgbXVsdGlwbGUgb3B0aW9ucyB0byBzZXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gc2V0IHRoZSBwcm9wZXJ0eSB0b1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gSWYgb25seSBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkLCB0aGVuIHRoYXQgcHJvcGVydHkgdmFsdWUgaXMgcmV0dXJuZWQuIElmIG5vdGhpbmcgaXMgcGFzc2VkIHRoZSBjdXJyZW50IG9wdGlvbnMgaGFzaCBpcyByZXR1cm5lZC5cbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJvcHRpb25cIiwgXCJ0aHJlc2hvbGRcIik7IC8vIHJldHVybiB0aGUgdGhyZXNob2xkXG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwib3B0aW9uXCIsIFwidGhyZXNob2xkXCIsIDEwMCk7IC8vIHNldCB0aGUgdGhyZXNob2xkIGFmdGVyIGluaXRcbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJvcHRpb25cIiwge3RocmVzaG9sZDoxMDAsIGZpbmdlcnM6M30gKTsgLy8gc2V0IG11bHRpcGxlIHByb3BlcnRpZXMgYWZ0ZXIgaW5pdFxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZSh7dGhyZXNob2xkOjEwMCwgZmluZ2VyczozfSApOyAvLyBzZXQgbXVsdGlwbGUgcHJvcGVydGllcyBhZnRlciBpbml0IC0gdGhlIFwib3B0aW9uXCIgbWV0aG9kIGlzIG9wdGlvbmFsIVxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZShcIm9wdGlvblwiKTsgLy8gUmV0dXJuIHRoZSBjdXJyZW50IG9wdGlvbnMgaGFzaFxuICAgICAqIEBzZWUgJC5mbi5zd2lwZS5kZWZhdWx0c1xuICAgICAqXG4gICAgICovXG4gICAgdGhpcy5vcHRpb24gPSBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpIHtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKG9wdGlvbnMsIHByb3BlcnR5KTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uc1twcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQuZXJyb3IoJ09wdGlvbiAnICsgcHJvcGVydHkgKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zd2lwZS5vcHRpb25zJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuXG5cbiAgICAvL1xuICAgIC8vIFByaXZhdGUgbWV0aG9kc1xuICAgIC8vXG5cbiAgICAvL1xuICAgIC8vIEVWRU5UU1xuICAgIC8vXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgYSB0b3VjaCBzdGFydCBldmVudC5cbiAgICAgKiBTdG9wcyB0aGUgZGVmYXVsdCBjbGljayBldmVudCBmcm9tIHRyaWdnZXJpbmcgYW5kIHN0b3JlcyB3aGVyZSB3ZSB0b3VjaGVkXG4gICAgICogQGlubmVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGpxRXZlbnQgVGhlIG5vcm1hbGlzZWQgalF1ZXJ5IGV2ZW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b3VjaFN0YXJ0KGpxRXZlbnQpIHtcblxuICAgICAgLy9JZiB3ZSBhbHJlYWR5IGluIGEgdG91Y2ggZXZlbnQgKGEgZmluZ2VyIGFscmVhZHkgaW4gdXNlKSB0aGVuIGlnbm9yZSBzdWJzZXF1ZW50IG9uZXMuLlxuICAgICAgaWYgKGdldFRvdWNoSW5Qcm9ncmVzcygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy9DaGVjayBpZiB0aGlzIGVsZW1lbnQgbWF0Y2hlcyBhbnkgaW4gdGhlIGV4Y2x1ZGVkIGVsZW1lbnRzIHNlbGVjdG9ycywgIG9yIGl0cyBwYXJlbnQgaXMgZXhjbHVkZWQsIGlmIHNvLCBET04nVCBzd2lwZVxuICAgICAgaWYgKCQoanFFdmVudC50YXJnZXQpLmNsb3Nlc3Qob3B0aW9ucy5leGNsdWRlZEVsZW1lbnRzLCAkZWxlbWVudCkubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vQXMgd2UgdXNlIEpxdWVyeSBiaW5kIGZvciBldmVudHMsIHdlIG5lZWQgdG8gdGFyZ2V0IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgIC8vSWYgdGhlc2UgZXZlbnRzIGFyZSBiZWluZyBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXJlZCwgd2UgZG9uJ3QgaGF2ZSBhbiBvcmlnaW5hbCBldmVudCBvYmplY3QsIHNvIHVzZSB0aGUgSnEgb25lLlxuICAgICAgdmFyIGV2ZW50ID0ganFFdmVudC5vcmlnaW5hbEV2ZW50ID8ganFFdmVudC5vcmlnaW5hbEV2ZW50IDoganFFdmVudDtcblxuXG4gICAgICAvL0lmIHdlIGhhdmUgYSBwb2ludGVyIGV2ZW50LCB3aG9lcyB0eXBlIGlzICdtb3VzZScgYW5kIHdlIGhhdmUgc2FpZCBOTyBtb3VzZSBldmVudHMsIHRoZW4gZG9udCBkbyBhbnl0aGluZy5cbiAgICAgIGlmKGV2ZW50LnBvaW50ZXJUeXBlICYmIGV2ZW50LnBvaW50ZXJUeXBlPT1cIm1vdXNlXCIgJiYgb3B0aW9ucy5mYWxsYmFja1RvTW91c2VFdmVudHM9PWZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXQsXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBldnQgPSB0b3VjaGVzID8gdG91Y2hlc1swXSA6IGV2ZW50O1xuXG4gICAgICBwaGFzZSA9IFBIQVNFX1NUQVJUO1xuXG4gICAgICAvL0lmIHdlIHN1cHBvcnQgdG91Y2hlcywgZ2V0IHRoZSBmaW5nZXIgY291bnRcbiAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgIC8vIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIGZpbmdlcnMgdG91Y2hpbmcgdGhlIHNjcmVlblxuICAgICAgICBmaW5nZXJDb3VudCA9IHRvdWNoZXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgLy9FbHNlIHRoaXMgaXMgdGhlIGRlc2t0b3AsIHNvIHN0b3AgdGhlIGJyb3dzZXIgZnJvbSBkcmFnZ2luZyBjb250ZW50XG4gICAgICBlbHNlIGlmIChvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzICE9PSBmYWxzZSkge1xuICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vY2FsbCB0aGlzIG9uIGpxIGV2ZW50IHNvIHdlIGFyZSBjcm9zcyBicm93c2VyXG4gICAgICB9XG5cbiAgICAgIC8vY2xlYXIgdmFycy4uXG4gICAgICBkaXN0YW5jZSA9IDA7XG4gICAgICBkaXJlY3Rpb24gPSBudWxsO1xuICAgICAgY3VycmVudERpcmVjdGlvbj1udWxsO1xuICAgICAgcGluY2hEaXJlY3Rpb24gPSBudWxsO1xuICAgICAgZHVyYXRpb24gPSAwO1xuICAgICAgc3RhcnRUb3VjaGVzRGlzdGFuY2UgPSAwO1xuICAgICAgZW5kVG91Y2hlc0Rpc3RhbmNlID0gMDtcbiAgICAgIHBpbmNoWm9vbSA9IDE7XG4gICAgICBwaW5jaERpc3RhbmNlID0gMDtcbiAgICAgIG1heGltdW1zTWFwID0gY3JlYXRlTWF4aW11bXNEYXRhKCk7XG4gICAgICBjYW5jZWxNdWx0aUZpbmdlclJlbGVhc2UoKTtcblxuICAgICAgLy9DcmVhdGUgdGhlIGRlZmF1bHQgZmluZ2VyIGRhdGFcbiAgICAgIGNyZWF0ZUZpbmdlckRhdGEoMCwgZXZ0KTtcblxuICAgICAgLy8gY2hlY2sgdGhlIG51bWJlciBvZiBmaW5nZXJzIGlzIHdoYXQgd2UgYXJlIGxvb2tpbmcgZm9yLCBvciB3ZSBhcmUgY2FwdHVyaW5nIHBpbmNoZXNcbiAgICAgIGlmICghdG91Y2hlcyB8fCAoZmluZ2VyQ291bnQgPT09IG9wdGlvbnMuZmluZ2VycyB8fCBvcHRpb25zLmZpbmdlcnMgPT09IEFMTF9GSU5HRVJTKSB8fCBoYXNQaW5jaGVzKCkpIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgdG91Y2hcbiAgICAgICAgc3RhcnRUaW1lID0gZ2V0VGltZVN0YW1wKCk7XG5cbiAgICAgICAgaWYgKGZpbmdlckNvdW50ID09IDIpIHtcbiAgICAgICAgICAvL0tlZXAgdHJhY2sgb2YgdGhlIGluaXRpYWwgcGluY2ggZGlzdGFuY2UsIHNvIHdlIGNhbiBjYWxjdWxhdGUgdGhlIGRpZmYgbGF0ZXJcbiAgICAgICAgICAvL1N0b3JlIHNlY29uZCBmaW5nZXIgZGF0YSBhcyBzdGFydFxuICAgICAgICAgIGNyZWF0ZUZpbmdlckRhdGEoMSwgdG91Y2hlc1sxXSk7XG4gICAgICAgICAgc3RhcnRUb3VjaGVzRGlzdGFuY2UgPSBlbmRUb3VjaGVzRGlzdGFuY2UgPSBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UoZmluZ2VyRGF0YVswXS5zdGFydCwgZmluZ2VyRGF0YVsxXS5zdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5zd2lwZVN0YXR1cyB8fCBvcHRpb25zLnBpbmNoU3RhdHVzKSB7XG4gICAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9BIHRvdWNoIHdpdGggbW9yZSBvciBsZXNzIHRoYW4gdGhlIGZpbmdlcnMgd2UgYXJlIGxvb2tpbmcgZm9yLCBzbyBjYW5jZWxcbiAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vSWYgd2UgaGF2ZSBhIHJldHVybiB2YWx1ZSBmcm9tIHRoZSB1c2VycyBoYW5kbGVyLCB0aGVuIHJldHVybiBhbmQgY2FuY2VsXG4gICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICBwaGFzZSA9IFBIQVNFX0NBTkNFTDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhvbGQpIHtcbiAgICAgICAgICBob2xkVGltZW91dCA9IHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vVHJpZ2dlciB0aGUgZXZlbnRcbiAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ2hvbGQnLCBbZXZlbnQudGFyZ2V0XSk7XG4gICAgICAgICAgICAvL0ZpcmUgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ob2xkKSB7XG4gICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuaG9sZC5jYWxsKCRlbGVtZW50LCBldmVudCwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzKSwgb3B0aW9ucy5sb25nVGFwVGhyZXNob2xkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIG1vdmUgZXZlbnQuXG4gICAgICogSWYgd2UgY2hhbmdlIGZpbmdlcnMgZHVyaW5nIG1vdmUsIHRoZW4gY2FuY2VsIHRoZSBldmVudFxuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBqcUV2ZW50IFRoZSBub3JtYWxpc2VkIGpRdWVyeSBldmVudCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hNb3ZlKGpxRXZlbnQpIHtcblxuICAgICAgLy9BcyB3ZSB1c2UgSnF1ZXJ5IGJpbmQgZm9yIGV2ZW50cywgd2UgbmVlZCB0byB0YXJnZXQgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgICAgLy9JZiB0aGVzZSBldmVudHMgYXJlIGJlaW5nIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkLCB3ZSBkb24ndCBoYXZlIGFuIG9yaWdpbmFsIGV2ZW50IG9iamVjdCwgc28gdXNlIHRoZSBKcSBvbmUuXG4gICAgICB2YXIgZXZlbnQgPSBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgPyBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgOiBqcUV2ZW50O1xuXG4gICAgICAvL0lmIHdlIGFyZSBlbmRpbmcsIGNhbmNlbGxpbmcsIG9yIHdpdGhpbiB0aGUgdGhyZXNob2xkIG9mIDIgZmluZ2VycyBiZWluZyByZWxlYXNlZCwgZG9uJ3QgdHJhY2sgYW55dGhpbmcuLlxuICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9FTkQgfHwgcGhhc2UgPT09IFBIQVNFX0NBTkNFTCB8fCBpbk11bHRpRmluZ2VyUmVsZWFzZSgpKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIHZhciByZXQsXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBldnQgPSB0b3VjaGVzID8gdG91Y2hlc1swXSA6IGV2ZW50O1xuXG5cbiAgICAgIC8vVXBkYXRlIHRoZSAgZmluZ2VyIGRhdGFcbiAgICAgIHZhciBjdXJyZW50RmluZ2VyID0gdXBkYXRlRmluZ2VyRGF0YShldnQpO1xuICAgICAgZW5kVGltZSA9IGdldFRpbWVTdGFtcCgpO1xuXG4gICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICBmaW5nZXJDb3VudCA9IHRvdWNoZXMubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5ob2xkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIHBoYXNlID0gUEhBU0VfTU9WRTtcblxuICAgICAgLy9JZiB3ZSBoYXZlIDIgZmluZ2VycyBnZXQgVG91Y2hlcyBkaXN0YW5jZSBhcyB3ZWxsXG4gICAgICBpZiAoZmluZ2VyQ291bnQgPT0gMikge1xuXG4gICAgICAgIC8vS2VlcCB0cmFjayBvZiB0aGUgaW5pdGlhbCBwaW5jaCBkaXN0YW5jZSwgc28gd2UgY2FuIGNhbGN1bGF0ZSB0aGUgZGlmZiBsYXRlclxuICAgICAgICAvL1dlIGRvIHRoaXMgaGVyZSBhcyB3ZWxsIGFzIHRoZSBzdGFydCBldmVudCwgaW4gY2FzZSB0aGV5IHN0YXJ0IHdpdGggMSBmaW5nZXIsIGFuZCB0aGUgcHJlc3MgMiBmaW5nZXJzXG4gICAgICAgIGlmIChzdGFydFRvdWNoZXNEaXN0YW5jZSA9PSAwKSB7XG4gICAgICAgICAgLy9DcmVhdGUgc2Vjb25kIGZpbmdlciBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lLi4uXG4gICAgICAgICAgY3JlYXRlRmluZ2VyRGF0YSgxLCB0b3VjaGVzWzFdKTtcblxuICAgICAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gZW5kVG91Y2hlc0Rpc3RhbmNlID0gY2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKGZpbmdlckRhdGFbMF0uc3RhcnQsIGZpbmdlckRhdGFbMV0uc3RhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vRWxzZSBqdXN0IHVwZGF0ZSB0aGUgc2Vjb25kIGZpbmdlclxuICAgICAgICAgIHVwZGF0ZUZpbmdlckRhdGEodG91Y2hlc1sxXSk7XG5cbiAgICAgICAgICBlbmRUb3VjaGVzRGlzdGFuY2UgPSBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UoZmluZ2VyRGF0YVswXS5lbmQsIGZpbmdlckRhdGFbMV0uZW5kKTtcbiAgICAgICAgICBwaW5jaERpcmVjdGlvbiA9IGNhbGN1bGF0ZVBpbmNoRGlyZWN0aW9uKGZpbmdlckRhdGFbMF0uZW5kLCBmaW5nZXJEYXRhWzFdLmVuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBwaW5jaFpvb20gPSBjYWxjdWxhdGVQaW5jaFpvb20oc3RhcnRUb3VjaGVzRGlzdGFuY2UsIGVuZFRvdWNoZXNEaXN0YW5jZSk7XG4gICAgICAgIHBpbmNoRGlzdGFuY2UgPSBNYXRoLmFicyhzdGFydFRvdWNoZXNEaXN0YW5jZSAtIGVuZFRvdWNoZXNEaXN0YW5jZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoZmluZ2VyQ291bnQgPT09IG9wdGlvbnMuZmluZ2VycyB8fCBvcHRpb25zLmZpbmdlcnMgPT09IEFMTF9GSU5HRVJTKSB8fCAhdG91Y2hlcyB8fCBoYXNQaW5jaGVzKCkpIHtcblxuICAgICAgICAvL1RoZSBvdmVyYWxsIGRpcmVjdGlvbiBvZiB0aGUgc3dpcGUuIEZyb20gc3RhcnQgdG8gbm93LlxuICAgICAgICBkaXJlY3Rpb24gPSBjYWxjdWxhdGVEaXJlY3Rpb24oY3VycmVudEZpbmdlci5zdGFydCwgY3VycmVudEZpbmdlci5lbmQpO1xuXG4gICAgICAgIC8vVGhlIGltbWVkaWF0ZSBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlLCBkaXJlY3Rpb24gYmV0d2VlbiB0aGUgbGFzdCBtb3ZlbWVudCBhbmQgdGhpcyBvbmUuXG4gICAgICAgIGN1cnJlbnREaXJlY3Rpb24gPSBjYWxjdWxhdGVEaXJlY3Rpb24oY3VycmVudEZpbmdlci5sYXN0LCBjdXJyZW50RmluZ2VyLmVuZCk7XG5cbiAgICAgICAgLy9DaGVjayBpZiB3ZSBuZWVkIHRvIHByZXZlbnQgZGVmYXVsdCBldmVudCAocGFnZSBzY3JvbGwgLyBwaW5jaCB6b29tKSBvciBub3RcbiAgICAgICAgdmFsaWRhdGVEZWZhdWx0RXZlbnQoanFFdmVudCwgY3VycmVudERpcmVjdGlvbik7XG5cbiAgICAgICAgLy9EaXN0YW5jZSBhbmQgZHVyYXRpb24gYXJlIGFsbCBvZmYgdGhlIG1haW4gZmluZ2VyXG4gICAgICAgIGRpc3RhbmNlID0gY2FsY3VsYXRlRGlzdGFuY2UoY3VycmVudEZpbmdlci5zdGFydCwgY3VycmVudEZpbmdlci5lbmQpO1xuICAgICAgICBkdXJhdGlvbiA9IGNhbGN1bGF0ZUR1cmF0aW9uKCk7XG5cbiAgICAgICAgLy9DYWNoZSB0aGUgbWF4aW11bSBkaXN0YW5jZSB3ZSBtYWRlIGluIHRoaXMgZGlyZWN0aW9uXG4gICAgICAgIHNldE1heERpc3RhbmNlKGRpcmVjdGlvbiwgZGlzdGFuY2UpO1xuXG4gICAgICAgIC8vVHJpZ2dlciBzdGF0dXMgaGFuZGxlclxuICAgICAgICByZXQgPSB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuXG5cbiAgICAgICAgLy9JZiB3ZSB0cmlnZ2VyIGVuZCBldmVudHMgd2hlbiB0aHJlc2hvbGQgYXJlIG1ldCwgb3IgdHJpZ2dlciBldmVudHMgd2hlbiB0b3VjaCBsZWF2ZXMgZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgfHwgb3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKSB7XG5cbiAgICAgICAgICB2YXIgaW5Cb3VuZHMgPSB0cnVlO1xuXG4gICAgICAgICAgLy9JZiBjaGVja2luZyBpZiB3ZSBsZWF2ZSB0aGUgZWxlbWVudCwgcnVuIHRoZSBib3VuZHMgY2hlY2sgKHdlIGNhbiB1c2UgdG91Y2hsZWF2ZSBhcyBpdHMgbm90IHN1cHBvcnRlZCBvbiB3ZWJraXQpXG4gICAgICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGdldGJvdW5kcyh0aGlzKTtcbiAgICAgICAgICAgIGluQm91bmRzID0gaXNJbkJvdW5kcyhjdXJyZW50RmluZ2VyLmVuZCwgYm91bmRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL1RyaWdnZXIgZW5kIGhhbmRsZXMgYXMgd2Ugc3dpcGUgaWYgdGhyZXNob2xkcyBtZXQgb3IgaWYgd2UgaGF2ZSBsZWZ0IHRoZSBlbGVtZW50IGlmIHRoZSB1c2VyIGhhcyBhc2tlZCB0byBjaGVjayB0aGVzZS4uXG4gICAgICAgICAgaWYgKCFvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kICYmIGluQm91bmRzKSB7XG4gICAgICAgICAgICBwaGFzZSA9IGdldE5leHRQaGFzZShQSEFTRV9NT1ZFKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9XZSBlbmQgaWYgb3V0IG9mIGJvdW5kcyBoZXJlLCBzbyBzZXQgY3VycmVudCBwaGFzZSB0byBFTkQsIGFuZCBjaGVjayBpZiBpdHMgbW9kaWZpZWRcbiAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUgJiYgIWluQm91bmRzKSB7XG4gICAgICAgICAgICBwaGFzZSA9IGdldE5leHRQaGFzZShQSEFTRV9FTkQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwaGFzZSA9PSBQSEFTRV9DQU5DRUwgfHwgcGhhc2UgPT0gUEhBU0VfRU5EKSB7XG4gICAgICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgIHBoYXNlID0gUEhBU0VfQ0FOQ0VMO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGEgdG91Y2ggZW5kIGV2ZW50LlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlyZWN0aW9uIGFuZCB0cmlnZ2VyIGV2ZW50c1xuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBqcUV2ZW50IFRoZSBub3JtYWxpc2VkIGpRdWVyeSBldmVudCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hFbmQoanFFdmVudCkge1xuICAgICAgLy9BcyB3ZSB1c2UgSnF1ZXJ5IGJpbmQgZm9yIGV2ZW50cywgd2UgbmVlZCB0byB0YXJnZXQgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgICAgLy9JZiB0aGVzZSBldmVudHMgYXJlIGJlaW5nIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkLCB3ZSBkb24ndCBoYXZlIGFuIG9yaWdpbmFsIGV2ZW50IG9iamVjdCwgc28gdXNlIHRoZSBKcSBvbmUuXG4gICAgICB2YXIgZXZlbnQgPSBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgPyBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgOiBqcUV2ZW50LFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQudG91Y2hlcztcblxuICAgICAgLy9JZiB3ZSBhcmUgc3RpbGwgaW4gYSB0b3VjaCB3aXRoIHRoZSBkZXZpY2Ugd2FpdCBhIGZyYWN0aW9uIGFuZCBzZWUgaWYgdGhlIG90aGVyIGZpbmdlciBjb21lcyB1cFxuICAgICAgLy9pZiBpdCBkb2VzIHdpdGhpbiB0aGUgdGhyZXNob2xkLCB0aGVuIHdlIHRyZWF0IGl0IGFzIGEgbXVsdGkgcmVsZWFzZSwgbm90IGEgc2luZ2xlIHJlbGVhc2UgYW5kIGVuZCB0aGUgdG91Y2ggLyBzd2lwZVxuICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgaWYgKHRvdWNoZXMubGVuZ3RoICYmICFpbk11bHRpRmluZ2VyUmVsZWFzZSgpKSB7XG4gICAgICAgICAgc3RhcnRNdWx0aUZpbmdlclJlbGVhc2UoZXZlbnQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoICYmIGluTXVsdGlGaW5nZXJSZWxlYXNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL0lmIGEgcHJldmlvdXMgZmluZ2VyIGhhcyBiZWVuIHJlbGVhc2VkLCBjaGVjayBob3cgbG9uZyBhZ28sIGlmIHdpdGhpbiB0aGUgdGhyZXNob2xkLCB0aGVuIGFzc3VtZSBpdCB3YXMgYSBtdWx0aWZpbmdlciByZWxlYXNlLlxuICAgICAgLy9UaGlzIGlzIHVzZWQgdG8gYWxsb3cgMiBmaW5nZXJzIHRvIHJlbGVhc2UgZnJhY3Rpb25hbGx5IGFmdGVyIGVhY2ggb3RoZXIsIHdoaWxzdCBtYWludGFpbmluZyB0aGUgZXZlbnQgYXMgY29udGFpbmluZyAyIGZpbmdlcnMsIG5vdCAxXG4gICAgICBpZiAoaW5NdWx0aUZpbmdlclJlbGVhc2UoKSkge1xuICAgICAgICBmaW5nZXJDb3VudCA9IGZpbmdlckNvdW50QXRSZWxlYXNlO1xuICAgICAgfVxuXG4gICAgICAvL1NldCBlbmQgb2Ygc3dpcGVcbiAgICAgIGVuZFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcblxuICAgICAgLy9HZXQgZHVyYXRpb24gaW5jYXNlIG1vdmUgd2FzIG5ldmVyIGZpcmVkXG4gICAgICBkdXJhdGlvbiA9IGNhbGN1bGF0ZUR1cmF0aW9uKCk7XG5cbiAgICAgIC8vSWYgd2UgdHJpZ2dlciBoYW5kbGVycyBhdCBlbmQgb2Ygc3dpcGUgT1IsIHdlIHRyaWdnZXIgZHVyaW5nLCBidXQgdGhleSBkaWRudCB0cmlnZ2VyIGFuZCB3ZSBhcmUgc3RpbGwgaW4gdGhlIG1vdmUgcGhhc2VcbiAgICAgIGlmIChkaWRTd2lwZUJhY2tUb0NhbmNlbCgpIHx8ICF2YWxpZGF0ZVN3aXBlRGlzdGFuY2UoKSkge1xuICAgICAgICBwaGFzZSA9IFBIQVNFX0NBTkNFTDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCB8fCAob3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCA9PT0gZmFsc2UgJiYgcGhhc2UgPT09IFBIQVNFX01PVkUpKSB7XG4gICAgICAgIC8vY2FsbCB0aGlzIG9uIGpxIGV2ZW50IHNvIHdlIGFyZSBjcm9zcyBicm93c2VyXG4gICAgICAgIGlmIChvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzICE9PSBmYWxzZSAmJiBqcUV2ZW50LmNhbmNlbGFibGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAganFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIHBoYXNlID0gUEhBU0VfRU5EO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuICAgICAgLy9TcGVjaWFsIGNhc2VzIC0gQSB0YXAgc2hvdWxkIGFsd2F5cyBmaXJlIG9uIHRvdWNoIGVuZCByZWdhcmRsZXNzLFxuICAgICAgLy9TbyBoZXJlIHdlIG1hbnVhbGx5IHRyaWdnZXIgdGhlIHRhcCBlbmQgaGFuZGxlciBieSBpdHNlbGZcbiAgICAgIC8vV2UgZG9udCBydW4gdHJpZ2dlciBoYW5kbGVyIGFzIGl0IHdpbGwgcmUtdHJpZ2dlciBldmVudHMgdGhhdCBtYXkgaGF2ZSBmaXJlZCBhbHJlYWR5XG4gICAgICBlbHNlIGlmICghb3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCAmJiBoYXNUYXAoKSkge1xuICAgICAgICAvL1RyaWdnZXIgdGhlIHBpbmNoIGV2ZW50cy4uLlxuICAgICAgICBwaGFzZSA9IFBIQVNFX0VORDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgVEFQKTtcbiAgICAgIH0gZWxzZSBpZiAocGhhc2UgPT09IFBIQVNFX01PVkUpIHtcbiAgICAgICAgcGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyhmYWxzZSk7XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIGNhbmNlbCBldmVudC5cbiAgICAgKiBDbGVhcnMgY3VycmVudCB2YXJzXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hDYW5jZWwoKSB7XG4gICAgICAvLyByZXNldCB0aGUgdmFyaWFibGVzIGJhY2sgdG8gZGVmYXVsdCB2YWx1ZXNcbiAgICAgIGZpbmdlckNvdW50ID0gMDtcbiAgICAgIGVuZFRpbWUgPSAwO1xuICAgICAgc3RhcnRUaW1lID0gMDtcbiAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gMDtcbiAgICAgIGVuZFRvdWNoZXNEaXN0YW5jZSA9IDA7XG4gICAgICBwaW5jaFpvb20gPSAxO1xuXG4gICAgICAvL0lmIHdlIHdlcmUgaW4gcHJvZ3Jlc3Mgb2YgdHJhY2tpbmcgYSBwb3NzaWJsZSBtdWx0aSB0b3VjaCBlbmQsIHRoZW4gcmUgc2V0IGl0LlxuICAgICAgY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCk7XG5cbiAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIGxlYXZlIGV2ZW50LlxuICAgICAqIFRoaXMgaXMgb25seSB0cmlnZ2VyZWQgb24gZGVza3RvcHMsIGluIHRvdWNoIHdlIHdvcmsgdGhpcyBvdXQgbWFudWFsbHlcbiAgICAgKiBhcyB0aGUgdG91Y2hsZWF2ZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIGluIHdlYmtpdFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvdWNoTGVhdmUoanFFdmVudCkge1xuICAgICAgLy9JZiB0aGVzZSBldmVudHMgYXJlIGJlaW5nIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkLCB3ZSBkb24ndCBoYXZlIGFuIG9yaWdpbmFsIGV2ZW50IG9iamVjdCwgc28gdXNlIHRoZSBKcSBvbmUuXG4gICAgICB2YXIgZXZlbnQgPSBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgPyBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgOiBqcUV2ZW50O1xuXG4gICAgICAvL0lmIHdlIGhhdmUgdGhlIHRyaWdnZXIgb24gbGVhdmUgcHJvcGVydHkgc2V0Li4uLlxuICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuICAgICAgICBwaGFzZSA9IGdldE5leHRQaGFzZShQSEFTRV9FTkQpO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyB0aGF0IHdlcmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBwbHVnaW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICAkZWxlbWVudC5vZmYoU1RBUlRfRVYsIHRvdWNoU3RhcnQpO1xuICAgICAgJGVsZW1lbnQub2ZmKENBTkNFTF9FViwgdG91Y2hDYW5jZWwpO1xuICAgICAgJGVsZW1lbnQub2ZmKE1PVkVfRVYsIHRvdWNoTW92ZSk7XG4gICAgICAkZWxlbWVudC5vZmYoRU5EX0VWLCB0b3VjaEVuZCk7XG5cbiAgICAgIC8vd2Ugb25seSBoYXZlIGxlYXZlIGV2ZW50cyBvbiBkZXNrdG9wLCB3ZSBtYW51YWxseSBjYWxjdWxhdGUgbGVhdmUgb24gdG91Y2ggYXMgaXRzIG5vdCBzdXBwb3J0ZWQgaW4gd2Via2l0XG4gICAgICBpZiAoTEVBVkVfRVYpIHtcbiAgICAgICAgJGVsZW1lbnQub2ZmKExFQVZFX0VWLCB0b3VjaExlYXZlKTtcbiAgICAgIH1cblxuICAgICAgc2V0VG91Y2hJblByb2dyZXNzKGZhbHNlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdGltZSBhbmQgZGlzdGFuY2UgdGhyZXNob2xkcyBoYXZlIGJlZW4gbWV0LCBhbmQgaWYgc28gdGhlbiB0aGUgYXBwcm9wcmlhdGUgaGFuZGxlcnMgYXJlIGZpcmVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5leHRQaGFzZShjdXJyZW50UGhhc2UpIHtcblxuICAgICAgdmFyIG5leHRQaGFzZSA9IGN1cnJlbnRQaGFzZTtcblxuICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgdmFsaWQgc3dpcGUgKHVuZGVyIHRpbWUgYW5kIG92ZXIgZGlzdGFuY2UgIGFuZCBjaGVjayBpZiB3ZSBhcmUgb3V0IG9mIGJvdW5kLi4uKVxuICAgICAgdmFyIHZhbGlkVGltZSA9IHZhbGlkYXRlU3dpcGVUaW1lKCk7XG4gICAgICB2YXIgdmFsaWREaXN0YW5jZSA9IHZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpO1xuICAgICAgdmFyIGRpZENhbmNlbCA9IGRpZFN3aXBlQmFja1RvQ2FuY2VsKCk7XG5cbiAgICAgIC8vSWYgd2UgaGF2ZSBleGNlZWRlZCBvdXIgdGltZSwgdGhlbiBjYW5jZWxcbiAgICAgIGlmICghdmFsaWRUaW1lIHx8IGRpZENhbmNlbCkge1xuICAgICAgICBuZXh0UGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICB9XG4gICAgICAvL0Vsc2UgaWYgd2UgYXJlIG1vdmluZywgYW5kIGhhdmUgcmVhY2hlZCBkaXN0YW5jZSB0aGVuIGVuZFxuICAgICAgZWxzZSBpZiAodmFsaWREaXN0YW5jZSAmJiBjdXJyZW50UGhhc2UgPT0gUEhBU0VfTU9WRSAmJiAoIW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgfHwgb3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKSkge1xuICAgICAgICBuZXh0UGhhc2UgPSBQSEFTRV9FTkQ7XG4gICAgICB9XG4gICAgICAvL0Vsc2UgaWYgd2UgaGF2ZSBlbmRlZCBieSBsZWF2aW5nIGFuZCBkaWRuJ3QgcmVhY2ggZGlzdGFuY2UsIHRoZW4gY2FuY2VsXG4gICAgICBlbHNlIGlmICghdmFsaWREaXN0YW5jZSAmJiBjdXJyZW50UGhhc2UgPT0gUEhBU0VfRU5EICYmIG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuICAgICAgICBuZXh0UGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0UGhhc2U7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSByZWxldmFudCBldmVudCBoYW5kbGVyXG4gICAgICogVGhlIGhhbmRsZXJzIGFyZSBwYXNzZWQgdGhlIG9yaWdpbmFsIGV2ZW50LCB0aGUgZWxlbWVudCB0aGF0IHdhcyBzd2lwZWQsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aGUgY2F0Y2ggYWxsIGhhbmRsZXIsIHRoZSBkaXJlY3Rpb24gdGhhdCB3YXMgc3dpcGVkLCBcImxlZnRcIiwgXCJyaWdodFwiLCBcInVwXCIsIG9yIFwiZG93blwiXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGhhc2UgdGhlIHBoYXNlIG9mIHRoZSBzd2lwZSAoc3RhcnQsIGVuZCBjYW5jZWwgZXRjKSB7QGxpbmsgJC5mbi5zd2lwZS5waGFzZXN9XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKSB7XG5cblxuXG4gICAgICB2YXIgcmV0LFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQudG91Y2hlcztcblxuICAgICAgLy8gU1dJUEUgR0VTVFVSRVNcbiAgICAgIGlmIChkaWRTd2lwZSgpIHx8IGhhc1N3aXBlcygpKSB7XG4gICAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgU1dJUEUpO1xuICAgICAgfVxuXG4gICAgICAvLyBQSU5DSCBHRVNUVVJFUyAoaWYgdGhlIGFib3ZlIGRpZG4ndCBjYW5jZWwpXG4gICAgICBpZiAoKGRpZFBpbmNoKCkgfHwgaGFzUGluY2hlcygpKSAmJiByZXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgUElOQ0gpO1xuICAgICAgfVxuXG4gICAgICAvLyBDTElDSyAvIFRBUCAoaWYgdGhlIGFib3ZlIGRpZG4ndCBjYW5jZWwpXG4gICAgICBpZiAoZGlkRG91YmxlVGFwKCkgJiYgcmV0ICE9PSBmYWxzZSkge1xuICAgICAgICAvL1RyaWdnZXIgdGhlIHRhcCBldmVudHMuLi5cbiAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgRE9VQkxFX1RBUCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENMSUNLIC8gVEFQIChpZiB0aGUgYWJvdmUgZGlkbid0IGNhbmNlbClcbiAgICAgIGVsc2UgaWYgKGRpZExvbmdUYXAoKSAmJiByZXQgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vVHJpZ2dlciB0aGUgdGFwIGV2ZW50cy4uLlxuICAgICAgICByZXQgPSB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQsIHBoYXNlLCBMT05HX1RBUCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENMSUNLIC8gVEFQIChpZiB0aGUgYWJvdmUgZGlkbid0IGNhbmNlbClcbiAgICAgIGVsc2UgaWYgKGRpZFRhcCgpICYmIHJldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy9UcmlnZ2VyIHRoZSB0YXAgZXZlbnQuLlxuICAgICAgICByZXQgPSB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQsIHBoYXNlLCBUQVApO1xuICAgICAgfVxuXG5cblxuICAgICAgLy8gSWYgd2UgYXJlIGNhbmNlbGxpbmcgdGhlIGdlc3R1cmUsIHRoZW4gbWFudWFsbHkgdHJpZ2dlciB0aGUgcmVzZXQgaGFuZGxlclxuICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9DQU5DRUwpIHtcblxuICAgICAgICB0b3VjaENhbmNlbChldmVudCk7XG4gICAgICB9XG5cblxuXG5cbiAgICAgIC8vIElmIHdlIGFyZSBlbmRpbmcgdGhlIGdlc3R1cmUsIHRoZW4gbWFudWFsbHkgdHJpZ2dlciB0aGUgcmVzZXQgaGFuZGxlciBJRiBhbGwgZmluZ2VycyBhcmUgb2ZmXG4gICAgICBpZiAocGhhc2UgPT09IFBIQVNFX0VORCkge1xuICAgICAgICAvL0lmIHdlIHN1cHBvcnQgdG91Y2gsIHRoZW4gY2hlY2sgdGhhdCBhbGwgZmluZ2VycyBhcmUgb2ZmIGJlZm9yZSB3ZSBjYW5jZWxcbiAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICBpZiAoIXRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0b3VjaENhbmNlbChldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvdWNoQ2FuY2VsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSByZWxldmFudCBldmVudCBoYW5kbGVyXG4gICAgICogVGhlIGhhbmRsZXJzIGFyZSBwYXNzZWQgdGhlIG9yaWdpbmFsIGV2ZW50LCB0aGUgZWxlbWVudCB0aGF0IHdhcyBzd2lwZWQsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aGUgY2F0Y2ggYWxsIGhhbmRsZXIsIHRoZSBkaXJlY3Rpb24gdGhhdCB3YXMgc3dpcGVkLCBcImxlZnRcIiwgXCJyaWdodFwiLCBcInVwXCIsIG9yIFwiZG93blwiXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGhhc2UgdGhlIHBoYXNlIG9mIHRoZSBzd2lwZSAoc3RhcnQsIGVuZCBjYW5jZWwgZXRjKSB7QGxpbmsgJC5mbi5zd2lwZS5waGFzZXN9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGdlc3R1cmUgdGhlIGdlc3R1cmUgdG8gdHJpZ2dlciBhIGhhbmRsZXIgZm9yIDogUElOQ0ggb3IgU1dJUEUge0BsaW5rICQuZm4uc3dpcGUuZ2VzdHVyZXN9XG4gICAgICogQHJldHVybiBCb29sZWFuIEZhbHNlLCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBldmVudCBzaG91bGQgc3RvcCBwcm9wYWdhdGlvbiwgb3Igdm9pZC5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQsIHBoYXNlLCBnZXN0dXJlKSB7XG5cbiAgICAgIHZhciByZXQ7XG5cbiAgICAgIC8vU1dJUEVTLi4uLlxuICAgICAgaWYgKGdlc3R1cmUgPT0gU1dJUEUpIHtcbiAgICAgICAgLy9UcmlnZ2VyIHN0YXR1cyBldmVyeSB0aW1lLi5cbiAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGVTdGF0dXMnLCBbcGhhc2UsIGRpcmVjdGlvbiB8fCBudWxsLCBkaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnN3aXBlU3RhdHVzKSB7XG4gICAgICAgICAgcmV0ID0gb3B0aW9ucy5zd2lwZVN0YXR1cy5jYWxsKCRlbGVtZW50LCBldmVudCwgcGhhc2UsIGRpcmVjdGlvbiB8fCBudWxsLCBkaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgLy9JZiB0aGUgc3RhdHVzIGNhbmNlbHMsIHRoZW4gZG9udCBydW4gdGhlIHN1YnNlcXVlbnQgZXZlbnQgaGFuZGxlcnMuLlxuICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGhhc2UgPT0gUEhBU0VfRU5EICYmIHZhbGlkYXRlU3dpcGUoKSkge1xuXG4gICAgICAgICAgLy9DYW5jZWwgYW55IHRhcHMgdGhhdCB3ZXJlIGluIHByb2dyZXNzLi4uXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG5cbiAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZScsIFtkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb25dKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlKSB7XG4gICAgICAgICAgICByZXQgPSBvcHRpb25zLnN3aXBlLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgLy9JZiB0aGUgc3RhdHVzIGNhbmNlbHMsIHRoZW4gZG9udCBydW4gdGhlIHN1YnNlcXVlbnQgZXZlbnQgaGFuZGxlcnMuLlxuICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL3RyaWdnZXIgZGlyZWN0aW9uIHNwZWNpZmljIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgTEVGVDpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGVMZWZ0JywgW2RpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlTGVmdCkge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuc3dpcGVMZWZ0LmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFJJR0hUOlxuICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZVJpZ2h0JywgW2RpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlUmlnaHQpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnN3aXBlUmlnaHQuY2FsbCgkZWxlbWVudCwgZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgVVA6XG4gICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3N3aXBlVXAnLCBbZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3dpcGVVcCkge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuc3dpcGVVcC5jYWxsKCRlbGVtZW50LCBldmVudCwgZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBET1dOOlxuICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZURvd24nLCBbZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3dpcGVEb3duKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5zd2lwZURvd24uY2FsbCgkZWxlbWVudCwgZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy9QSU5DSEVTLi4uLlxuICAgICAgaWYgKGdlc3R1cmUgPT0gUElOQ0gpIHtcbiAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigncGluY2hTdGF0dXMnLCBbcGhhc2UsIHBpbmNoRGlyZWN0aW9uIHx8IG51bGwsIHBpbmNoRGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIHBpbmNoWm9vbSwgZmluZ2VyRGF0YV0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnBpbmNoU3RhdHVzKSB7XG4gICAgICAgICAgcmV0ID0gb3B0aW9ucy5waW5jaFN0YXR1cy5jYWxsKCRlbGVtZW50LCBldmVudCwgcGhhc2UsIHBpbmNoRGlyZWN0aW9uIHx8IG51bGwsIHBpbmNoRGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIHBpbmNoWm9vbSwgZmluZ2VyRGF0YSk7XG4gICAgICAgICAgLy9JZiB0aGUgc3RhdHVzIGNhbmNlbHMsIHRoZW4gZG9udCBydW4gdGhlIHN1YnNlcXVlbnQgZXZlbnQgaGFuZGxlcnMuLlxuICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGhhc2UgPT0gUEhBU0VfRU5EICYmIHZhbGlkYXRlUGluY2goKSkge1xuXG4gICAgICAgICAgc3dpdGNoIChwaW5jaERpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBJTjpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigncGluY2hJbicsIFtwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGFdKTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5waW5jaEluKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5waW5jaEluLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIE9VVDpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigncGluY2hPdXQnLCBbcGluY2hEaXJlY3Rpb24gfHwgbnVsbCwgcGluY2hEaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgcGluY2hab29tLCBmaW5nZXJEYXRhXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGluY2hPdXQpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnBpbmNoT3V0LmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ2VzdHVyZSA9PSBUQVApIHtcbiAgICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9DQU5DRUwgfHwgcGhhc2UgPT09IFBIQVNFX0VORCkge1xuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG5cbiAgICAgICAgICAvL0lmIHdlIGFyZSBhbHNvIGxvb2tpbmcgZm9yIGRvdWJlbFRhcHMsIHdhaXQgaW5jYXNlIHRoaXMgaXMgb25lLi4uXG4gICAgICAgICAgaWYgKGhhc0RvdWJsZVRhcCgpICYmICFpbkRvdWJsZVRhcCgpKSB7XG4gICAgICAgICAgICBkb3VibGVUYXBTdGFydFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcblxuICAgICAgICAgICAgLy9Ob3cgd2FpdCBmb3IgdGhlIGRvdWJsZSB0YXAgdGltZW91dCwgYW5kIHRyaWdnZXIgdGhpcyBzaW5nbGUgdGFwXG4gICAgICAgICAgICAvL2lmIGl0cyBub3QgY2FuY2VsbGVkIGJ5IGEgZG91YmxlIHRhcFxuICAgICAgICAgICAgc2luZ2xlVGFwVGltZW91dCA9IHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigndGFwJywgW2V2ZW50LnRhcmdldF0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnRhcCkge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMudGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSwgb3B0aW9ucy5kb3VibGVUYXBUaHJlc2hvbGQpO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdWJsZVRhcFN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCd0YXAnLCBbZXZlbnQudGFyZ2V0XSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy50YXApIHtcbiAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy50YXAuY2FsbCgkZWxlbWVudCwgZXZlbnQsIGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdlc3R1cmUgPT0gRE9VQkxFX1RBUCkge1xuICAgICAgICBpZiAocGhhc2UgPT09IFBIQVNFX0NBTkNFTCB8fCBwaGFzZSA9PT0gUEhBU0VfRU5EKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG4gICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdkb3VibGV0YXAnLCBbZXZlbnQudGFyZ2V0XSk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5kb3VibGVUYXApIHtcbiAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuZG91YmxlVGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnZXN0dXJlID09IExPTkdfVEFQKSB7XG4gICAgICAgIGlmIChwaGFzZSA9PT0gUEhBU0VfQ0FOQ0VMIHx8IHBoYXNlID09PSBQSEFTRV9FTkQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc2luZ2xlVGFwVGltZW91dCk7XG4gICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gbnVsbDtcblxuICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ2xvbmd0YXAnLCBbZXZlbnQudGFyZ2V0XSk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMubG9uZ1RhcCkge1xuICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5sb25nVGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuXG4gICAgLy9cbiAgICAvLyBHRVNUVVJFIFZBTElEQVRJT05cbiAgICAvL1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSB1c2VyIGhhcyBzd2lwZSBmYXIgZW5vdWdoXG4gICAgICogQHJldHVybiBCb29sZWFuIGlmIDxjb2RlPnRocmVzaG9sZDwvY29kZT4gaGFzIGJlZW4gc2V0LCByZXR1cm4gdHJ1ZSBpZiB0aGUgdGhyZXNob2xkIHdhcyBtZXQsIGVsc2UgZmFsc2UuXG4gICAgICogSWYgbm8gdGhyZXNob2xkIHdhcyBzZXQsIHRoZW4gd2UgcmV0dXJuIHRydWUuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTd2lwZURpc3RhbmNlKCkge1xuICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgICAgIC8vSWYgd2UgbWFkZSBpdCBwYXN0IHRoZSBtaW4gc3dpcGUgZGlzdGFuY2UuLlxuICAgICAgaWYgKG9wdGlvbnMudGhyZXNob2xkICE9PSBudWxsKSB7XG4gICAgICAgIHZhbGlkID0gZGlzdGFuY2UgPj0gb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIHVzZXIgaGFzIHN3aXBlZCBiYWNrIHRvIGNhbmNlbC5cbiAgICAgKiBAcmV0dXJuIEJvb2xlYW4gaWYgPGNvZGU+Y2FuY2VsVGhyZXNob2xkPC9jb2RlPiBoYXMgYmVlbiBzZXQsIHJldHVybiB0cnVlIGlmIHRoZSBjYW5jZWxUaHJlc2hvbGQgd2FzIG1ldCwgZWxzZSBmYWxzZS5cbiAgICAgKiBJZiBubyBjYW5jZWxUaHJlc2hvbGQgd2FzIHNldCwgdGhlbiB3ZSByZXR1cm4gdHJ1ZS5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaWRTd2lwZUJhY2tUb0NhbmNlbCgpIHtcbiAgICAgIHZhciBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgIGlmIChvcHRpb25zLmNhbmNlbFRocmVzaG9sZCAhPT0gbnVsbCAmJiBkaXJlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgY2FuY2VsbGVkID0gKGdldE1heERpc3RhbmNlKGRpcmVjdGlvbikgLSBkaXN0YW5jZSkgPj0gb3B0aW9ucy5jYW5jZWxUaHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYW5jZWxsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSB1c2VyIGhhcyBwaW5jaGVkIGZhciBlbm91Z2hcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW4gaWYgPGNvZGU+cGluY2hUaHJlc2hvbGQ8L2NvZGU+IGhhcyBiZWVuIHNldCwgcmV0dXJuIHRydWUgaWYgdGhlIHRocmVzaG9sZCB3YXMgbWV0LCBlbHNlIGZhbHNlLlxuICAgICAqIElmIG5vIHRocmVzaG9sZCB3YXMgc2V0LCB0aGVuIHdlIHJldHVybiB0cnVlLlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGluY2hEaXN0YW5jZSgpIHtcbiAgICAgIGlmIChvcHRpb25zLnBpbmNoVGhyZXNob2xkICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwaW5jaERpc3RhbmNlID49IG9wdGlvbnMucGluY2hUaHJlc2hvbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhhdCB0aGUgdGltZSB0YWtlbiB0byBzd2lwZSBtZWV0cyB0aGUgbWluaW11bSAvIG1heGltdW0gcmVxdWlyZW1lbnRzXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTd2lwZVRpbWUoKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgLy9JZiBubyB0aW1lIHNldCwgdGhlbiByZXR1cm4gdHJ1ZVxuICAgICAgaWYgKG9wdGlvbnMubWF4VGltZVRocmVzaG9sZCkge1xuICAgICAgICBpZiAoZHVyYXRpb24gPj0gb3B0aW9ucy5tYXhUaW1lVGhyZXNob2xkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlIGFuZCB0aGUgdmFsdWUgYWxsb3dQYWdlU2Nyb2xsIHRvIHNlZSBpZiB3ZSBzaG91bGQgYWxsb3cgb3IgcHJldmVudCB0aGUgZGVmYXVsdCBiZWhhdmlvdXIgZnJvbSBvY2N1cnJpbmcuXG4gICAgICogVGhpcyB3aWxsIGVzc2VudGlhbGx5IGFsbG93IHBhZ2Ugc2Nyb2xsaW5nIG9yIG5vdCB3aGVuIHRoZSB1c2VyIGlzIHN3aXBpbmcgb24gYSB0b3VjaFN3aXBlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0ganFFdmVudCBUaGUgbm9ybWFsaXNlZCBqUXVlcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGV2ZW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICAgKiBAc2VlICQuZm4uc3dpcGUuZGlyZWN0aW9uc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRGVmYXVsdEV2ZW50KGpxRXZlbnQsIGRpcmVjdGlvbikge1xuXG4gICAgICAvL0lmIHRoZSBvcHRpb24gaXMgc2V0LCBhbGx3YXlzIGFsbG93IHRoZSBldmVudCB0byBidWJibGUgdXAgKGxldCB1c2VyIGhhbmRsZSB3ZWlyZG5lc3MpXG4gICAgICBpZiAob3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV2ZW50cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgPT09IE5PTkUpIHtcbiAgICAgICAganFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGF1dG8gPSBvcHRpb25zLmFsbG93UGFnZVNjcm9sbCA9PT0gQVVUTztcblxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgIGNhc2UgTEVGVDpcbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5zd2lwZUxlZnQgJiYgYXV0bykgfHwgKCFhdXRvICYmIG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsICE9IEhPUklaT05UQUwpKSB7XG4gICAgICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBSSUdIVDpcbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5zd2lwZVJpZ2h0ICYmIGF1dG8pIHx8ICghYXV0byAmJiBvcHRpb25zLmFsbG93UGFnZVNjcm9sbCAhPSBIT1JJWk9OVEFMKSkge1xuICAgICAgICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgVVA6XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMuc3dpcGVVcCAmJiBhdXRvKSB8fCAoIWF1dG8gJiYgb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgIT0gVkVSVElDQUwpKSB7XG4gICAgICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBET1dOOlxuICAgICAgICAgICAgaWYgKChvcHRpb25zLnN3aXBlRG93biAmJiBhdXRvKSB8fCAoIWF1dG8gJiYgb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgIT0gVkVSVElDQUwpKSB7XG4gICAgICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBOT05FOlxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gUElOQ0hFU1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBvZiB0aGUgY3VycmVudCBwaW5jaCBtZWV0cyB0aGUgdGhyZXNob2xkc1xuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGluY2goKSB7XG4gICAgICB2YXIgaGFzQ29ycmVjdEZpbmdlckNvdW50ID0gdmFsaWRhdGVGaW5nZXJzKCk7XG4gICAgICB2YXIgaGFzRW5kUG9pbnQgPSB2YWxpZGF0ZUVuZFBvaW50KCk7XG4gICAgICB2YXIgaGFzQ29ycmVjdERpc3RhbmNlID0gdmFsaWRhdGVQaW5jaERpc3RhbmNlKCk7XG4gICAgICByZXR1cm4gaGFzQ29ycmVjdEZpbmdlckNvdW50ICYmIGhhc0VuZFBvaW50ICYmIGhhc0NvcnJlY3REaXN0YW5jZTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbnkgUGluY2ggZXZlbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGluY2hlcygpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLnBpbmNoU3RhdHVzIHx8IG9wdGlvbnMucGluY2hJbiB8fCBvcHRpb25zLnBpbmNoT3V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGRldGVjdGluZyBwaW5jaGVzLCBhbmQgaGF2ZSBvbmVcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaWRQaW5jaCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhISh2YWxpZGF0ZVBpbmNoKCkgJiYgaGFzUGluY2hlcygpKTtcbiAgICB9XG5cblxuXG5cbiAgICAvLyBTV0lQRVNcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgc3dpcGUgbWVldHMgdGhlIHRocmVzaG9sZHNcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVN3aXBlKCkge1xuICAgICAgLy9DaGVjayB2YWxpZGl0eSBvZiBzd2lwZVxuICAgICAgdmFyIGhhc1ZhbGlkVGltZSA9IHZhbGlkYXRlU3dpcGVUaW1lKCk7XG4gICAgICB2YXIgaGFzVmFsaWREaXN0YW5jZSA9IHZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpO1xuICAgICAgdmFyIGhhc0NvcnJlY3RGaW5nZXJDb3VudCA9IHZhbGlkYXRlRmluZ2VycygpO1xuICAgICAgdmFyIGhhc0VuZFBvaW50ID0gdmFsaWRhdGVFbmRQb2ludCgpO1xuICAgICAgdmFyIGRpZENhbmNlbCA9IGRpZFN3aXBlQmFja1RvQ2FuY2VsKCk7XG5cbiAgICAgIC8vIGlmIHRoZSB1c2VyIHN3aXBlZCBtb3JlIHRoYW4gdGhlIG1pbmltdW0gbGVuZ3RoLCBwZXJmb3JtIHRoZSBhcHByb3ByaWF0ZSBhY3Rpb25cbiAgICAgIC8vIGhhc1ZhbGlkRGlzdGFuY2UgaXMgbnVsbCB3aGVuIG5vIGRpc3RhbmNlIGlzIHNldFxuICAgICAgdmFyIHZhbGlkID0gIWRpZENhbmNlbCAmJiBoYXNFbmRQb2ludCAmJiBoYXNDb3JyZWN0RmluZ2VyQ291bnQgJiYgaGFzVmFsaWREaXN0YW5jZSAmJiBoYXNWYWxpZFRpbWU7XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55IFN3aXBlIGV2ZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1N3aXBlcygpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLnN3aXBlIHx8IG9wdGlvbnMuc3dpcGVTdGF0dXMgfHwgb3B0aW9ucy5zd2lwZUxlZnQgfHwgb3B0aW9ucy5zd2lwZVJpZ2h0IHx8IG9wdGlvbnMuc3dpcGVVcCB8fCBvcHRpb25zLnN3aXBlRG93bik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGRldGVjdGluZyBzd2lwZXMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkU3dpcGUoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEodmFsaWRhdGVTd2lwZSgpICYmIGhhc1N3aXBlcygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBtYXRjaGVkIHRoZSBudW1iZXIgb2YgZmluZ2VycyB3ZSBhcmUgbG9va2luZyBmb3JcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUZpbmdlcnMoKSB7XG4gICAgICAvL1RoZSBudW1iZXIgb2YgZmluZ2VycyB3ZSB3YW50IHdlcmUgbWF0Y2hlZCwgb3Igb24gZGVza3RvcCB3ZSBpZ25vcmVcbiAgICAgIHJldHVybiAoKGZpbmdlckNvdW50ID09PSBvcHRpb25zLmZpbmdlcnMgfHwgb3B0aW9ucy5maW5nZXJzID09PSBBTExfRklOR0VSUykgfHwgIVNVUFBPUlRTX1RPVUNIKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBhbiBlbmQgcG9pbnQgZm9yIHRoZSBzd2lwZVxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRW5kUG9pbnQoKSB7XG4gICAgICAvL1dlIGhhdmUgYW4gZW5kIHZhbHVlIGZvciB0aGUgZmluZ2VyXG4gICAgICByZXR1cm4gZmluZ2VyRGF0YVswXS5lbmQueCAhPT0gMDtcbiAgICB9XG5cbiAgICAvLyBUQVAgLyBDTElDS1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIGNsaWNrIC8gdGFwIGV2ZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1RhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLnRhcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGEgZG91YmxlIHRhcCBldmVudHMgaGF2ZSBiZWVuIHJlZ2lzdGVyZWRcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNEb3VibGVUYXAoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEob3B0aW9ucy5kb3VibGVUYXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbnkgbG9uZyB0YXAgZXZlbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzTG9uZ1RhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLmxvbmdUYXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBjb3VsZCBiZSBpbiB0aGUgcHJvY2VzcyBvZiBhIGRvdWJsZSB0YXAgKG9uZSB0YXAgaGFzIG9jY3VycmVkLCB3ZSBhcmUgbGlzdGVuaW5nIGZvciBkb3VibGUgdGFwcywgYW5kIHRoZSB0aHJlc2hvbGQgaGFzbid0IHBhc3QuXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVEb3VibGVUYXAoKSB7XG4gICAgICBpZiAoZG91YmxlVGFwU3RhcnRUaW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG5vdyA9IGdldFRpbWVTdGFtcCgpO1xuICAgICAgcmV0dXJuIChoYXNEb3VibGVUYXAoKSAmJiAoKG5vdyAtIGRvdWJsZVRhcFN0YXJ0VGltZSkgPD0gb3B0aW9ucy5kb3VibGVUYXBUaHJlc2hvbGQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgY291bGQgYmUgaW4gdGhlIHByb2Nlc3Mgb2YgYSBkb3VibGUgdGFwIChvbmUgdGFwIGhhcyBvY2N1cnJlZCwgd2UgYXJlIGxpc3RlbmluZyBmb3IgZG91YmxlIHRhcHMsIGFuZCB0aGUgdGhyZXNob2xkIGhhc24ndCBwYXN0LlxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluRG91YmxlVGFwKCkge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlRG91YmxlVGFwKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBhIHZhbGlkIHRhcFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlVGFwKCkge1xuICAgICAgcmV0dXJuICgoZmluZ2VyQ291bnQgPT09IDEgfHwgIVNVUFBPUlRTX1RPVUNIKSAmJiAoaXNOYU4oZGlzdGFuY2UpIHx8IGRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBhIHZhbGlkIGxvbmcgdGFwXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVMb25nVGFwKCkge1xuICAgICAgLy9zbGlnaHQgdGhyZXNob2xkIG9uIG1vdmluZyBmaW5nZXJcbiAgICAgIHJldHVybiAoKGR1cmF0aW9uID4gb3B0aW9ucy5sb25nVGFwVGhyZXNob2xkKSAmJiAoZGlzdGFuY2UgPCBET1VCTEVfVEFQX1RIUkVTSE9MRCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgZGV0ZWN0aW5nIHRhcHMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlVGFwKCkgJiYgaGFzVGFwKCkpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBkZXRlY3RpbmcgZG91YmxlIHRhcHMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkRG91YmxlVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlRG91YmxlVGFwKCkgJiYgaGFzRG91YmxlVGFwKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgZGV0ZWN0aW5nIGxvbmcgdGFwcyBhbmQgaGF2ZSBvbmVcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaWRMb25nVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlTG9uZ1RhcCgpICYmIGhhc0xvbmdUYXAoKSk7XG4gICAgfVxuXG5cblxuXG4gICAgLy8gTVVMVEkgRklOR0VSIFRPVUNIXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRyYWNraW5nIHRoZSB0aW1lIGJldHdlZW4gMiBmaW5nZXIgcmVsZWFzZXMsIGFuZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSBmaW5nZXJzIHdlIGluaXRpYWxseSBoYWQgdXBcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydE11bHRpRmluZ2VyUmVsZWFzZShldmVudCkge1xuICAgICAgcHJldmlvdXNUb3VjaEVuZFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcbiAgICAgIGZpbmdlckNvdW50QXRSZWxlYXNlID0gZXZlbnQudG91Y2hlcy5sZW5ndGggKyAxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgdGhlIHRyYWNraW5nIG9mIHRpbWUgYmV0d2VlbiAyIGZpbmdlciByZWxlYXNlcywgYW5kIHJlc2V0cyBjb3VudGVyc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbmNlbE11bHRpRmluZ2VyUmVsZWFzZSgpIHtcbiAgICAgIHByZXZpb3VzVG91Y2hFbmRUaW1lID0gMDtcbiAgICAgIGZpbmdlckNvdW50QXRSZWxlYXNlID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgd2UgYXJlIGluIHRoZSB0aHJlc2hvbGQgYmV0d2VlbiAyIGZpbmdlcnMgYmVpbmcgcmVsZWFzZWRcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbk11bHRpRmluZ2VyUmVsZWFzZSgpIHtcblxuICAgICAgdmFyIHdpdGhpblRocmVzaG9sZCA9IGZhbHNlO1xuXG4gICAgICBpZiAocHJldmlvdXNUb3VjaEVuZFRpbWUpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBnZXRUaW1lU3RhbXAoKSAtIHByZXZpb3VzVG91Y2hFbmRUaW1lXG4gICAgICAgIGlmIChkaWZmIDw9IG9wdGlvbnMuZmluZ2VyUmVsZWFzZVRocmVzaG9sZCkge1xuICAgICAgICAgIHdpdGhpblRocmVzaG9sZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpdGhpblRocmVzaG9sZDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGdldHMgYSBkYXRhIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBhIHRvdWNoIGlzIGluIHByb2dyZXNzXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VG91Y2hJblByb2dyZXNzKCkge1xuICAgICAgLy9zdHJpY3QgZXF1YWxpdHkgdG8gZW5zdXJlIG9ubHkgdHJ1ZSBhbmQgZmFsc2UgYXJlIHJldHVybmVkXG4gICAgICByZXR1cm4gISEoJGVsZW1lbnQuZGF0YShQTFVHSU5fTlMgKyAnX2ludG91Y2gnKSA9PT0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIGRhdGEgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IGEgdG91Y2ggaXMgaW4gcHJvZ3Jlc3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbCBUaGUgdmFsdWUgdG8gc2V0IHRoZSBwcm9wZXJ0eSB0b1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFRvdWNoSW5Qcm9ncmVzcyh2YWwpIHtcblxuICAgICAgLy9JZiBkZXN0cm95IGlzIGNhbGxlZCBpbiBhbiBldmVudCBoYW5kbGVyLCB3ZSBoYXZlIG5vIGVsLCBhbmQgd2UgaGF2ZSBhbHJlYWR5IGNsZWFuZWQgdXAsIHNvIHJldHVybi5cbiAgICAgIGlmKCEkZWxlbWVudCkgeyByZXR1cm47IH1cblxuICAgICAgLy9BZGQgb3IgcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBkZXBlbmRpbmcgb24gdG91Y2ggc3RhdHVzXG4gICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgICRlbGVtZW50Lm9uKE1PVkVfRVYsIHRvdWNoTW92ZSk7XG4gICAgICAgICRlbGVtZW50Lm9uKEVORF9FViwgdG91Y2hFbmQpO1xuXG4gICAgICAgIC8vd2Ugb25seSBoYXZlIGxlYXZlIGV2ZW50cyBvbiBkZXNrdG9wLCB3ZSBtYW51YWxseSBjYWxjdWF0ZSBsZWF2ZSBvbiB0b3VjaCBhcyBpdHMgbm90IHN1cHBvcnRlZCBpbiB3ZWJraXRcbiAgICAgICAgaWYgKExFQVZFX0VWKSB7XG4gICAgICAgICAgJGVsZW1lbnQub24oTEVBVkVfRVYsIHRvdWNoTGVhdmUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgICRlbGVtZW50Lm9mZihNT1ZFX0VWLCB0b3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgICAgJGVsZW1lbnQub2ZmKEVORF9FViwgdG91Y2hFbmQsIGZhbHNlKTtcblxuICAgICAgICAvL3dlIG9ubHkgaGF2ZSBsZWF2ZSBldmVudHMgb24gZGVza3RvcCwgd2UgbWFudWFsbHkgY2FsY3VhdGUgbGVhdmUgb24gdG91Y2ggYXMgaXRzIG5vdCBzdXBwb3J0ZWQgaW4gd2Via2l0XG4gICAgICAgIGlmIChMRUFWRV9FVikge1xuICAgICAgICAgICRlbGVtZW50Lm9mZihMRUFWRV9FViwgdG91Y2hMZWF2ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy9zdHJpY3QgZXF1YWxpdHkgdG8gZW5zdXJlIG9ubHkgdHJ1ZSBhbmQgZmFsc2UgY2FuIHVwZGF0ZSB0aGUgdmFsdWVcbiAgICAgICRlbGVtZW50LmRhdGEoUExVR0lOX05TICsgJ19pbnRvdWNoJywgdmFsID09PSB0cnVlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGZpbmdlciBkYXRhIGZvciB0aGUgdG91Y2gvZmluZ2VyIGluIHRoZSBldmVudCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtpbnR9IGlkIFRoZSBpZCB0byBzdG9yZSB0aGUgZmluZ2VyIGRhdGEgdW5kZXIgKHVzdWFsbHkgdGhlIG9yZGVyIHRoZSBmaW5nZXJzIHdlcmUgcHJlc3NlZClcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZXZ0IFRoZSBldmVudCBvYmplY3QgY29udGFpbmluZyBmaW5nZXIgZGF0YVxuICAgICAqIEByZXR1cm4gZmluZ2VyIGRhdGEgb2JqZWN0XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZ2VyRGF0YShpZCwgZXZ0KSB7XG4gICAgICB2YXIgZiA9IHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdDoge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMFxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGYuc3RhcnQueCA9IGYubGFzdC54ID0gZi5lbmQueCA9IGV2dC5wYWdlWCB8fCBldnQuY2xpZW50WDtcbiAgICAgIGYuc3RhcnQueSA9IGYubGFzdC55ID0gZi5lbmQueSA9IGV2dC5wYWdlWSB8fCBldnQuY2xpZW50WTtcbiAgICAgIGZpbmdlckRhdGFbaWRdID0gZjtcbiAgICAgIHJldHVybiBmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGZpbmdlciBkYXRhIGZvciBhIHBhcnRpY3VsYXIgZXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2dCBUaGUgZXZlbnQgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHRvdWNoL2ZpbmdlciBkYXRhIHRvIHVwYWR0ZVxuICAgICAqIEByZXR1cm4gYSBmaW5nZXIgZGF0YSBvYmplY3QuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlRmluZ2VyRGF0YShldnQpIHtcbiAgICAgIHZhciBpZCA9IGV2dC5pZGVudGlmaWVyICE9PSB1bmRlZmluZWQgPyBldnQuaWRlbnRpZmllciA6IDA7XG4gICAgICB2YXIgZiA9IGdldEZpbmdlckRhdGEoaWQpO1xuXG4gICAgICBpZiAoZiA9PT0gbnVsbCkge1xuICAgICAgICBmID0gY3JlYXRlRmluZ2VyRGF0YShpZCwgZXZ0KTtcbiAgICAgIH1cblxuICAgICAgZi5sYXN0LnggPSBmLmVuZC54O1xuICAgICAgZi5sYXN0LnkgPSBmLmVuZC55O1xuXG4gICAgICBmLmVuZC54ID0gZXZ0LnBhZ2VYIHx8IGV2dC5jbGllbnRYO1xuICAgICAgZi5lbmQueSA9IGV2dC5wYWdlWSB8fCBldnQuY2xpZW50WTtcblxuICAgICAgcmV0dXJuIGY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZpbmdlciBkYXRhIG9iamVjdCBieSBpdHMgZXZlbnQgSUQuXG4gICAgICogRWFjaCB0b3VjaCBldmVudCBoYXMgYW4gaWRlbnRpZmllciBwcm9wZXJ0eSwgd2hpY2ggaXMgdXNlZFxuICAgICAqIHRvIHRyYWNrIHJlcGVhdCB0b3VjaGVzXG4gICAgICogQHBhcmFtIHtpbnR9IGlkIFRoZSB1bmlxdWUgaWQgb2YgdGhlIGZpbmdlciBpbiB0aGUgc2VxdWVuY2Ugb2YgdG91Y2ggZXZlbnRzLlxuICAgICAqIEByZXR1cm4gYSBmaW5nZXIgZGF0YSBvYmplY3QuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RmluZ2VyRGF0YShpZCkge1xuICAgICAgcmV0dXJuIGZpbmdlckRhdGFbaWRdIHx8IG51bGw7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXhpbXVtIGRpc3RhbmNlIHN3aXBlZCBpbiB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxuICAgICAqIElmIHRoZSBuZXcgdmFsdWUgaXMgbG93ZXIgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSwgdGhlIG1heCB2YWx1ZSBpcyBub3QgY2hhbmdlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZVxuICAgICAqIEBwYXJhbSB7aW50fSAgZGlzdGFuY2UgVGhlIGRpc3RhbmNlIG9mIHRoZSBzd2lwZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldE1heERpc3RhbmNlKGRpcmVjdGlvbiwgZGlzdGFuY2UpIHtcbiAgICAgIGlmKGRpcmVjdGlvbj09Tk9ORSkgcmV0dXJuO1xuICAgICAgZGlzdGFuY2UgPSBNYXRoLm1heChkaXN0YW5jZSwgZ2V0TWF4RGlzdGFuY2UoZGlyZWN0aW9uKSk7XG4gICAgICBtYXhpbXVtc01hcFtkaXJlY3Rpb25dLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0cyB0aGUgbWF4aW11bSBkaXN0YW5jZSBzd2lwZWQgaW4gdGhlIGdpdmVuIGRpcmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZVxuICAgICAqIEByZXR1cm4gaW50ICBUaGUgZGlzdGFuY2Ugb2YgdGhlIHN3aXBlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF4RGlzdGFuY2UoZGlyZWN0aW9uKSB7XG4gICAgICBpZiAobWF4aW11bXNNYXBbZGlyZWN0aW9uXSkgcmV0dXJuIG1heGltdW1zTWFwW2RpcmVjdGlvbl0uZGlzdGFuY2U7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0cyBhIG1hcCBvZiBkaXJlY3Rpb25zIHRvIG1heGltdW0gc3dpcGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJuIE9iamVjdCBBIGRpY3Rpb25hcnkgb2YgbWF4aW11bSB2YWx1ZXMsIGluZGV4ZWQgYnkgZGlyZWN0aW9uLlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1heGltdW1zRGF0YSgpIHtcbiAgICAgIHZhciBtYXhEYXRhID0ge307XG4gICAgICBtYXhEYXRhW0xFRlRdID0gY3JlYXRlTWF4aW11bVZPKExFRlQpO1xuICAgICAgbWF4RGF0YVtSSUdIVF0gPSBjcmVhdGVNYXhpbXVtVk8oUklHSFQpO1xuICAgICAgbWF4RGF0YVtVUF0gPSBjcmVhdGVNYXhpbXVtVk8oVVApO1xuICAgICAgbWF4RGF0YVtET1dOXSA9IGNyZWF0ZU1heGltdW1WTyhET1dOKTtcblxuICAgICAgcmV0dXJuIG1heERhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBtYXhpbXVtIHN3aXBlZCB2YWx1ZXMgZm9yIGEgZ2l2ZW4gc3dpcGUgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBkaXJlY3Rpb24gdGhhdCB0aGVzZSB2YWx1ZXMgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBAcmV0dXJuIE9iamVjdCBNYXhpbXVtIHZhbHVlc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1heGltdW1WTyhkaXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpcmVjdGlvbjogZGlyLFxuICAgICAgICBkaXN0YW5jZTogMFxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy9cbiAgICAvLyBNQVRIUyAvIFVUSUxTXG4gICAgLy9cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZHVyYXRpb24gb2YgdGhlIHN3aXBlXG4gICAgICogQHJldHVybiBpbnRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVEdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiAyIHRvdWNoZXMgKHBpbmNoKVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIGludDtcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2Uoc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcbiAgICAgIHZhciBkaWZmWCA9IE1hdGguYWJzKHN0YXJ0UG9pbnQueCAtIGVuZFBvaW50LngpO1xuICAgICAgdmFyIGRpZmZZID0gTWF0aC5hYnMoc3RhcnRQb2ludC55IC0gZW5kUG9pbnQueSk7XG5cbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGguc3FydChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgem9vbSBmYWN0b3IgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCBkaXN0YW5jZXNcbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnREaXN0YW5jZSBEaXN0YW5jZSAoYmV0d2VlbiAyIGZpbmdlcnMpIHRoZSB1c2VyIHN0YXJ0ZWQgcGluY2hpbmcgYXRcbiAgICAgKiBAcGFyYW0ge2ludH0gZW5kRGlzdGFuY2UgRGlzdGFuY2UgKGJldHdlZW4gMiBmaW5nZXJzKSB0aGUgdXNlciBlbmRlZCBwaW5jaGluZyBhdFxuICAgICAqIEByZXR1cm4gZmxvYXQgVGhlIHpvb20gdmFsdWUgZnJvbSAwIHRvIDEuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUGluY2hab29tKHN0YXJ0RGlzdGFuY2UsIGVuZERpc3RhbmNlKSB7XG4gICAgICB2YXIgcGVyY2VudCA9IChlbmREaXN0YW5jZSAvIHN0YXJ0RGlzdGFuY2UpICogMTtcbiAgICAgIHJldHVybiBwZXJjZW50LnRvRml4ZWQoMik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwaW5jaCBkaXJlY3Rpb24sIGVpdGhlciBJTiBvciBPVVQgZm9yIHRoZSBnaXZlbiBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHN0cmluZyBFaXRoZXIge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5JTn0gb3Ige0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5PVVR9XG4gICAgICogQHNlZSAkLmZuLnN3aXBlLmRpcmVjdGlvbnNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQaW5jaERpcmVjdGlvbigpIHtcbiAgICAgIGlmIChwaW5jaFpvb20gPCAxKSB7XG4gICAgICAgIHJldHVybiBPVVQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSU47XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGxlbmd0aCAvIGRpc3RhbmNlIG9mIHRoZSBzd2lwZVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIGludFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RhbmNlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3coZW5kUG9pbnQueCAtIHN0YXJ0UG9pbnQueCwgMikgKyBNYXRoLnBvdyhlbmRQb2ludC55IC0gc3RhcnRQb2ludC55LCAyKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgYW5nbGUgb2YgdGhlIHN3aXBlXG4gICAgICogQHBhcmFtIHtwb2ludH0gc3RhcnRQb2ludCBBIHBvaW50IG9iamVjdCBjb250YWluaW5nIHggYW5kIHkgY28tb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHtwb2ludH0gZW5kUG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEByZXR1cm4gaW50XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlQW5nbGUoc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcbiAgICAgIHZhciB4ID0gc3RhcnRQb2ludC54IC0gZW5kUG9pbnQueDtcbiAgICAgIHZhciB5ID0gZW5kUG9pbnQueSAtIHN0YXJ0UG9pbnQueTtcbiAgICAgIHZhciByID0gTWF0aC5hdGFuMih5LCB4KTsgLy9yYWRpYW5zXG4gICAgICB2YXIgYW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTsgLy9kZWdyZWVzXG5cbiAgICAgIC8vZW5zdXJlIHZhbHVlIGlzIHBvc2l0aXZlXG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgIGFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoYW5nbGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYW5nbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlXG4gICAgICogVGhpcyB3aWxsIGFsc28gY2FsbCBjYWxjdWxhdGVBbmdsZSB0byBnZXQgdGhlIGxhdGVzdCBhbmdsZSBvZiBzd2lwZVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIHN0cmluZyBFaXRoZXIge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5MRUZUfSAvIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuUklHSFR9IC8ge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5ET1dOfSAvIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuVVB9XG4gICAgICogQHNlZSAkLmZuLnN3aXBlLmRpcmVjdGlvbnNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVEaXJlY3Rpb24oc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcblxuICAgICAgaWYoIGNvbXBhcmVQb2ludHMoc3RhcnRQb2ludCwgZW5kUG9pbnQpICkge1xuICAgICAgICByZXR1cm4gTk9ORTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuZ2xlID0gY2FsY3VsYXRlQW5nbGUoc3RhcnRQb2ludCwgZW5kUG9pbnQpO1xuXG4gICAgICBpZiAoKGFuZ2xlIDw9IDQ1KSAmJiAoYW5nbGUgPj0gMCkpIHtcbiAgICAgICAgcmV0dXJuIExFRlQ7XG4gICAgICB9IGVsc2UgaWYgKChhbmdsZSA8PSAzNjApICYmIChhbmdsZSA+PSAzMTUpKSB7XG4gICAgICAgIHJldHVybiBMRUZUO1xuICAgICAgfSBlbHNlIGlmICgoYW5nbGUgPj0gMTM1KSAmJiAoYW5nbGUgPD0gMjI1KSkge1xuICAgICAgICByZXR1cm4gUklHSFQ7XG4gICAgICB9IGVsc2UgaWYgKChhbmdsZSA+IDQ1KSAmJiAoYW5nbGUgPCAxMzUpKSB7XG4gICAgICAgIHJldHVybiBET1dOO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVQO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIE1TIHRpbWUgc3RhbXAgb2YgdGhlIGN1cnJlbnQgdGltZVxuICAgICAqIEByZXR1cm4gaW50XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCkge1xuICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICByZXR1cm4gbm93LmdldFRpbWUoKTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGJvdW5kcyBvYmplY3Qgd2l0aCBsZWZ0LCByaWdodCwgdG9wIGFuZCBib3R0b20gcHJvcGVydGllcyBmb3IgdGhlIGVsZW1lbnQgc3BlY2lmaWVkLlxuICAgICAqIEBwYXJhbSB7RG9tTm9kZX0gVGhlIERPTSBub2RlIHRvIGdldCB0aGUgYm91bmRzIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRib3VuZHMoZWwpIHtcbiAgICAgIGVsID0gJChlbCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gZWwub2Zmc2V0KCk7XG5cbiAgICAgIHZhciBib3VuZHMgPSB7XG4gICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxuICAgICAgICByaWdodDogb2Zmc2V0LmxlZnQgKyBlbC5vdXRlcldpZHRoKCksXG4gICAgICAgIHRvcDogb2Zmc2V0LnRvcCxcbiAgICAgICAgYm90dG9tOiBvZmZzZXQudG9wICsgZWwub3V0ZXJIZWlnaHQoKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYm91bmRzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBwb2ludCBvYmplY3QgaXMgaW4gdGhlIGJvdW5kcyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBvaW50IEEgcG9pbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7aW50fSBwb2ludC54IFRoZSB4IHZhbHVlIG9mIHRoZSBwb2ludC5cbiAgICAgKiBAcGFyYW0ge2ludH0gcG9pbnQueSBUaGUgeCB2YWx1ZSBvZiB0aGUgcG9pbnQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGJvdW5kcyBUaGUgYm91bmRzIG9iamVjdCB0byB0ZXN0XG4gICAgICogQHBhcmFtIHtpbnR9IGJvdW5kcy5sZWZ0IFRoZSBsZWZ0bW9zdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7aW50fSBib3VuZHMucmlnaHQgVGhlIHJpZ2h0dG1vc3QgdmFsdWVcbiAgICAgKiBAcGFyYW0ge2ludH0gYm91bmRzLnRvcCBUaGUgdG9wbW9zdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7aW50fSBib3VuZHMuYm90dG9tIFRoZSBib3R0b21tb3N0IHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbkJvdW5kcyhwb2ludCwgYm91bmRzKSB7XG4gICAgICByZXR1cm4gKHBvaW50LnggPiBib3VuZHMubGVmdCAmJiBwb2ludC54IDwgYm91bmRzLnJpZ2h0ICYmIHBvaW50LnkgPiBib3VuZHMudG9wICYmIHBvaW50LnkgPCBib3VuZHMuYm90dG9tKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSB0d28gcG9pbnRzIGFyZSBlcXVhbFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludCBBIHBvaW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcG9pbnQgQiBwb2ludCBvYmplY3QuXG4gICAgICogQHJldHVybiB0cnVlIG9mIHRoZSBwb2ludHMgbWF0Y2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKHBvaW50QSwgcG9pbnRCKSB7XG4gICAgICByZXR1cm4gKHBvaW50QS54ID09IHBvaW50Qi54ICYmIHBvaW50QS55ID09IHBvaW50Qi55KTtcbiAgICB9XG5cblxuICB9XG5cblxuXG5cbiAgLyoqXG4gICAqIEEgY2F0Y2ggYWxsIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIGFsbCBzd2lwZSBkaXJlY3Rpb25zLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRoZSB1c2VyIHN3aXBlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgc3dpcGVkXG4gICAqIEBwYXJhbSB7aW50fSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2YgdGhlIHN3aXBlIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge2ludH0gZmluZ2VyQ291bnQgVGhlIG51bWJlciBvZiBmaW5nZXJzIHVzZWQuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5maW5nZXJzfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZmluZ2VyRGF0YSBUaGUgY29vcmRpbmF0ZXMgb2YgZmluZ2VycyBpbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudERpcmVjdGlvbiBUaGUgY3VycmVudCBkaXJlY3Rpb24gdGhlIHVzZXIgaXMgc3dpcGluZy5cbiAgICovXG5cblxuXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJsZWZ0XCIgc3dpcGVzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlTGVmdFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwicmlnaHRcIiBzd2lwZXMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjc3dpcGVSaWdodFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwidXBcIiBzd2lwZXMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjc3dpcGVVcFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwiZG93blwiIHN3aXBlcy5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNzd2lwZURvd25cbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgc3dpcGVkIGluLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICogQHBhcmFtIHtpbnR9IGRpc3RhbmNlIFRoZSBkaXN0YW5jZSB0aGUgdXNlciBzd2lwZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgZXZlcnkgcGhhc2Ugb2YgdGhlIHN3aXBlLiBUaGlzIGhhbmRsZXIgaXMgY29uc3RhbnRseSBmaXJlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBwaW5jaC5cbiAgICogVGhpcyBpcyB0cmlnZ2VyZWQgcmVnYXJkbGVzcyBvZiBzd2lwZSB0aHJlc2hvbGRzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlU3RhdHVzXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBoYXNlIFRoZSBwaGFzZSBvZiB0aGUgc3dpcGUgZXZlbnQuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5waGFzZXN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFRoaXMgaXMgbnVsbCBpZiB0aGUgdXNlciBoYXMgeWV0IHRvIG1vdmUuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZC4gVGhpcyBpcyAwIGlmIHRoZSB1c2VyIGhhcyB5ZXQgdG8gbW92ZS5cbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgcGluY2ggaW4gZXZlbnRzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3BpbmNoSW5cbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgcGluY2hlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgcGluY2hlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtpbnR9IHpvb20gVGhlIHpvb20vc2NhbGUgbGV2ZWwgdGhlIHVzZXIgcGluY2hlZCB0b28sIDAtMS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIHBpbmNoIG91dCBldmVudHMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjcGluY2hPdXRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgcGluY2hlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgcGluY2hlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtpbnR9IHpvb20gVGhlIHpvb20vc2NhbGUgbGV2ZWwgdGhlIHVzZXIgcGluY2hlZCB0b28sIDAtMS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIGFsbCBwaW5jaCBldmVudHMuIFRoaXMgaGFuZGxlciBpcyBjb25zdGFudGx5IGZpcmVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHBpbmNoLiBUaGlzIGlzIHRyaWdnZXJlZCByZWdhcmRsZXNzIG9mIHRocmVzaG9sZHMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjcGluY2hTdGF0dXNcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgcGluY2hlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgcGluY2hlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtpbnR9IHpvb20gVGhlIHpvb20vc2NhbGUgbGV2ZWwgdGhlIHVzZXIgcGluY2hlZCB0b28sIDAtMS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgY2xpY2sgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgc2ltcGx5IGNsaWNrcywgcmF0aGVyIHRoYW4gc3dpcGVzIG9uIGFuIGVsZW1lbnQuXG4gICAqIFRoaXMgaXMgZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuNi4yLCBhbnkgYXNzaWdubWVudCB0byBjbGljayB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSB0YXAgaGFuZGxlci5cbiAgICogWW91IGNhbm5vdCB1c2UgPGNvZGU+b248L2NvZGU+IHRvIGJpbmQgdG8gdGhpcyBldmVudCBhcyB0aGUgZGVmYXVsdCBqUSA8Y29kZT5jbGljazwvY29kZT4gZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG4gICAqIFVzZSB0aGUgPGNvZGU+dGFwPC9jb2RlPiBldmVudCBpbnN0ZWFkLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI2NsaWNrXG4gICAqIEBldmVudFxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuNi4yLCBwbGVhc2UgdXNlIHtAbGluayAkLmZuLnN3aXBlI3RhcH0gaW5zdGVhZFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtEb21PYmplY3R9IHRhcmdldCBUaGUgZWxlbWVudCBjbGlja2VkIG9uLlxuICAgKi9cblxuICAvKipcbiAgICogQSBjbGljayAvIHRhcCBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBzaW1wbHkgY2xpY2tzIG9yIHRhcHMsIHJhdGhlciB0aGFuIHN3aXBlcyBvbiBhbiBlbGVtZW50LlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3RhcFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7RG9tT2JqZWN0fSB0YXJnZXQgVGhlIGVsZW1lbnQgY2xpY2tlZCBvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEgZG91YmxlIHRhcCBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBkb3VibGUgY2xpY2tzIG9yIHRhcHMgb24gYW4gZWxlbWVudC5cbiAgICogWW91IGNhbiBzZXQgdGhlIHRpbWUgZGVsYXkgZm9yIGEgZG91YmxlIHRhcCB3aXRoIHRoZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNkb3VibGVUYXBUaHJlc2hvbGR9IHByb3BlcnR5LlxuICAgKiBOb3RlOiBJZiB5b3Ugc2V0IGJvdGggPGNvZGU+ZG91YmxlVGFwPC9jb2RlPiBhbmQgPGNvZGU+dGFwPC9jb2RlPiBoYW5kbGVycywgdGhlIDxjb2RlPnRhcDwvY29kZT4gZXZlbnQgd2lsbCBiZSBkZWxheWVkIGJ5IHRoZSA8Y29kZT5kb3VibGVUYXBUaHJlc2hvbGQ8L2NvZGU+XG4gICAqIGFzIHRoZSBzY3JpcHQgbmVlZHMgdG8gY2hlY2sgaWYgaXRzIGEgZG91YmxlIHRhcC5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNkb3VibGVUYXBcbiAgICogQHNlZSAgJC5mbi5zd2lwZS5kZWZhdWx0cyNkb3VibGVUYXBUaHJlc2hvbGRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0RvbU9iamVjdH0gdGFyZ2V0IFRoZSBlbGVtZW50IGNsaWNrZWQgb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGxvbmcgdGFwIGhhbmRsZXIgdHJpZ2dlcmVkIG9uY2UgYSB0YXAgaGFzIGJlZW4gcmVsZWFzZSBpZiB0aGUgdGFwIHdhcyBsb25nZXIgdGhhbiB0aGUgbG9uZ1RhcFRocmVzaG9sZC5cbiAgICogWW91IGNhbiBzZXQgdGhlIHRpbWUgZGVsYXkgZm9yIGEgbG9uZyB0YXAgd2l0aCB0aGUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZH0gcHJvcGVydHkuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjbG9uZ1RhcFxuICAgKiBAc2VlICAkLmZuLnN3aXBlLmRlZmF1bHRzI2xvbmdUYXBUaHJlc2hvbGRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0RvbU9iamVjdH0gdGFyZ2V0IFRoZSBlbGVtZW50IGNsaWNrZWQgb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhvbGQgdGFwIGhhbmRsZXIgdHJpZ2dlcmVkIGFzIHNvb24gYXMgdGhlIGxvbmdUYXBUaHJlc2hvbGQgaXMgcmVhY2hlZFxuICAgKiBZb3UgY2FuIHNldCB0aGUgdGltZSBkZWxheSBmb3IgYSBsb25nIHRhcCB3aXRoIHRoZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNsb25nVGFwVGhyZXNob2xkfSBwcm9wZXJ0eS5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNob2xkXG4gICAqIEBzZWUgICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7RG9tT2JqZWN0fSB0YXJnZXQgVGhlIGVsZW1lbnQgY2xpY2tlZCBvbi5cbiAgICovXG5cbn0pKTtcbiIsIi8qKlxuICogYnhTbGlkZXIgdjQuMi4xZFxuICogQ29weXJpZ2h0IDIwMTMtMjAxNyBTdGV2ZW4gV2FuZGVyc2tpXG4gKiBXcml0dGVuIHdoaWxlIGRyaW5raW5nIEJlbGdpYW4gYWxlcyBhbmQgbGlzdGVuaW5nIHRvIGphenpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVClcbiAqL1xuXG47KGZ1bmN0aW9uKCQpIHtcblxuICB2YXIgZGVmYXVsdHMgPSB7XG5cbiAgICAvLyBHRU5FUkFMXG4gICAgbW9kZTogJ2hvcml6b250YWwnLFxuICAgIHNsaWRlU2VsZWN0b3I6ICcnLFxuICAgIGluZmluaXRlTG9vcDogdHJ1ZSxcbiAgICBoaWRlQ29udHJvbE9uRW5kOiBmYWxzZSxcbiAgICBzcGVlZDogNTAwLFxuICAgIGVhc2luZzogbnVsbCxcbiAgICBzbGlkZU1hcmdpbjogMCxcbiAgICBzdGFydFNsaWRlOiAwLFxuICAgIHJhbmRvbVN0YXJ0OiBmYWxzZSxcbiAgICBjYXB0aW9uczogZmFsc2UsXG4gICAgdGlja2VyOiBmYWxzZSxcbiAgICB0aWNrZXJIb3ZlcjogZmFsc2UsXG4gICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgIGFkYXB0aXZlSGVpZ2h0U3BlZWQ6IDUwMCxcbiAgICB2aWRlbzogZmFsc2UsXG4gICAgdXNlQ1NTOiB0cnVlLFxuICAgIHByZWxvYWRJbWFnZXM6ICd2aXNpYmxlJyxcbiAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgIHNsaWRlWkluZGV4OiA1MCxcbiAgICB3cmFwcGVyQ2xhc3M6ICdieC13cmFwcGVyJyxcblxuICAgIC8vIFRPVUNIXG4gICAgdG91Y2hFbmFibGVkOiB0cnVlLFxuICAgIHN3aXBlVGhyZXNob2xkOiA1MCxcbiAgICBvbmVUb09uZVRvdWNoOiB0cnVlLFxuICAgIHByZXZlbnREZWZhdWx0U3dpcGVYOiB0cnVlLFxuICAgIHByZXZlbnREZWZhdWx0U3dpcGVZOiBmYWxzZSxcblxuICAgIC8vIEFDQ0VTU0lCSUxJVFlcbiAgICBhcmlhTGl2ZTogdHJ1ZSxcbiAgICBhcmlhSGlkZGVuOiB0cnVlLFxuXG4gICAgLy8gS0VZQk9BUkRcbiAgICBrZXlib2FyZEVuYWJsZWQ6IGZhbHNlLFxuXG4gICAgLy8gUEFHRVJcbiAgICBwYWdlcjogdHJ1ZSxcbiAgICBwYWdlclR5cGU6ICdmdWxsJyxcbiAgICBwYWdlclNob3J0U2VwYXJhdG9yOiAnIC8gJyxcbiAgICBwYWdlclNlbGVjdG9yOiBudWxsLFxuICAgIGJ1aWxkUGFnZXI6IG51bGwsXG4gICAgcGFnZXJDdXN0b206IG51bGwsXG5cbiAgICAvLyBDT05UUk9MU1xuICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgIG5leHRUZXh0OiAnTmV4dCcsXG4gICAgcHJldlRleHQ6ICdQcmV2JyxcbiAgICBuZXh0U2VsZWN0b3I6IG51bGwsXG4gICAgcHJldlNlbGVjdG9yOiBudWxsLFxuICAgIGF1dG9Db250cm9sczogZmFsc2UsXG4gICAgc3RhcnRUZXh0OiAnU3RhcnQnLFxuICAgIHN0b3BUZXh0OiAnU3RvcCcsXG4gICAgYXV0b0NvbnRyb2xzQ29tYmluZTogZmFsc2UsXG4gICAgYXV0b0NvbnRyb2xzU2VsZWN0b3I6IG51bGwsXG5cbiAgICAvLyBBVVRPXG4gICAgYXV0bzogZmFsc2UsXG4gICAgcGF1c2U6IDQwMDAsXG4gICAgYXV0b1N0YXJ0OiB0cnVlLFxuICAgIGF1dG9EaXJlY3Rpb246ICduZXh0JyxcbiAgICBzdG9wQXV0b09uQ2xpY2s6IGZhbHNlLFxuICAgIGF1dG9Ib3ZlcjogZmFsc2UsXG4gICAgYXV0b0RlbGF5OiAwLFxuICAgIGF1dG9TbGlkZUZvck9uZVBhZ2U6IGZhbHNlLFxuXG4gICAgLy8gQ0FST1VTRUxcbiAgICBtaW5TbGlkZXM6IDEsXG4gICAgbWF4U2xpZGVzOiAxLFxuICAgIG1vdmVTbGlkZXM6IDAsXG4gICAgc2xpZGVXaWR0aDogMCxcbiAgICBzaHJpbmtJdGVtczogZmFsc2UsXG5cbiAgICAvLyBDQUxMQkFDS1NcbiAgICBvblNsaWRlckxvYWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlQmVmb3JlOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZUFmdGVyOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgb25TbGlkZU5leHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICBvblNsaWRlUHJldjogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgIG9uU2xpZGVyUmVzaXplOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG5cdG9uQXV0b0NoYW5nZTogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IC8vY2FsbHMgd2hlbiBhdXRvIHNsaWRlcyBzdGFydHMgYW5kIHN0b3BzXG4gIH07XG5cbiAgJC5mbi5ieFNsaWRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKS5ieFNsaWRlcihvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgbmFtZXNwYWNlIHRvIGJlIHVzZWQgdGhyb3VnaG91dCB0aGUgcGx1Z2luXG4gICAgdmFyIHNsaWRlciA9IHt9LFxuICAgIC8vIHNldCBhIHJlZmVyZW5jZSB0byBvdXIgc2xpZGVyIGVsZW1lbnRcbiAgICBlbCA9IHRoaXMsXG4gICAgLy8gZ2V0IHRoZSBvcmlnaW5hbCB3aW5kb3cgZGltZW5zICh0aGFua3MgYSBsb3QgSUUpXG4gICAgd2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKSxcbiAgICB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG5cbiAgICAvLyBSZXR1cm4gaWYgc2xpZGVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcbiAgICBpZiAoJChlbCkuZGF0YSgnYnhTbGlkZXInKSkgeyByZXR1cm47IH1cblxuICAgIC8qKlxuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICogPSBQUklWQVRFIEZVTkNUSU9OU1xuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBuYW1lc3BhY2Ugc2V0dGluZ3MgdG8gYmUgdXNlZCB0aHJvdWdob3V0IHBsdWdpblxuICAgICAqL1xuICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBSZXR1cm4gaWYgc2xpZGVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWRcbiAgICAgIGlmICgkKGVsKS5kYXRhKCdieFNsaWRlcicpKSB7IHJldHVybjsgfVxuICAgICAgLy8gbWVyZ2UgdXNlci1zdXBwbGllZCBvcHRpb25zIHdpdGggdGhlIGRlZmF1bHRzXG4gICAgICBzbGlkZXIuc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgLy8gcGFyc2Ugc2xpZGVXaWR0aCBzZXR0aW5nXG4gICAgICBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA9IHBhcnNlSW50KHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoKTtcbiAgICAgIC8vIHN0b3JlIHRoZSBvcmlnaW5hbCBjaGlsZHJlblxuICAgICAgc2xpZGVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4oc2xpZGVyLnNldHRpbmdzLnNsaWRlU2VsZWN0b3IpO1xuICAgICAgLy8gY2hlY2sgaWYgYWN0dWFsIG51bWJlciBvZiBzbGlkZXMgaXMgbGVzcyB0aGFuIG1pblNsaWRlcyAvIG1heFNsaWRlc1xuICAgICAgaWYgKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggPCBzbGlkZXIuc2V0dGluZ3MubWluU2xpZGVzKSB7IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgPSBzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoOyB9XG4gICAgICBpZiAoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCA8IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpIHsgc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IH1cbiAgICAgIC8vIGlmIHJhbmRvbSBzdGFydCwgc2V0IHRoZSBzdGFydFNsaWRlIHNldHRpbmcgdG8gcmFuZG9tIG51bWJlclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5yYW5kb21TdGFydCkgeyBzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNsaWRlci5jaGlsZHJlbi5sZW5ndGgpOyB9XG4gICAgICAvLyBzdG9yZSBhY3RpdmUgc2xpZGUgaW5mb3JtYXRpb25cbiAgICAgIHNsaWRlci5hY3RpdmUgPSB7IGluZGV4OiBzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSB9O1xuICAgICAgLy8gc3RvcmUgaWYgdGhlIHNsaWRlciBpcyBpbiBjYXJvdXNlbCBtb2RlIChkaXNwbGF5aW5nIC8gbW92aW5nIG11bHRpcGxlIHNsaWRlcylcbiAgICAgIHNsaWRlci5jYXJvdXNlbCA9IHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgPiAxIHx8IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPiAxO1xuICAgICAgLy8gaWYgY2Fyb3VzZWwsIGZvcmNlIHByZWxvYWRJbWFnZXMgPSAnYWxsJ1xuICAgICAgaWYgKHNsaWRlci5jYXJvdXNlbCkgeyBzbGlkZXIuc2V0dGluZ3MucHJlbG9hZEltYWdlcyA9ICdhbGwnOyB9XG4gICAgICAvLyBjYWxjdWxhdGUgdGhlIG1pbiAvIG1heCB3aWR0aCB0aHJlc2hvbGRzIGJhc2VkIG9uIG1pbiAvIG1heCBudW1iZXIgb2Ygc2xpZGVzXG4gICAgICAvLyB1c2VkIHRvIHNldHVwIGFuZCB1cGRhdGUgY2Fyb3VzZWwgc2xpZGVzIGRpbWVuc2lvbnNcbiAgICAgIHNsaWRlci5taW5UaHJlc2hvbGQgPSAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoKSArICgoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpICogc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTtcbiAgICAgIHNsaWRlci5tYXhUaHJlc2hvbGQgPSAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyAqIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoKSArICgoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyAtIDEpICogc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKTtcbiAgICAgIC8vIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzbGlkZXIgKGlmIGN1cnJlbnRseSBhbmltYXRpbmcsIHdvcmtpbmcgaXMgdHJ1ZSlcbiAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICAvLyBpbml0aWFsaXplIHRoZSBjb250cm9scyBvYmplY3RcbiAgICAgIHNsaWRlci5jb250cm9scyA9IHt9O1xuICAgICAgLy8gaW5pdGlhbGl6ZSBhbiBhdXRvIGludGVydmFsXG4gICAgICBzbGlkZXIuaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3BlcnR5IHRvIHVzZSBmb3IgdHJhbnNpdGlvbnNcbiAgICAgIHNsaWRlci5hbmltUHJvcCA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnID8gJ3RvcCcgOiAnbGVmdCc7XG4gICAgICAvLyBkZXRlcm1pbmUgaWYgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIGNhbiBiZSB1c2VkXG4gICAgICBzbGlkZXIudXNpbmdDU1MgPSBzbGlkZXIuc2V0dGluZ3MudXNlQ1NTICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBjcmVhdGUgb3VyIHRlc3QgZGl2IGVsZW1lbnRcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAvLyBjc3MgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgIHByb3BzID0gWydXZWJraXRQZXJzcGVjdGl2ZScsICdNb3pQZXJzcGVjdGl2ZScsICdPUGVyc3BlY3RpdmUnLCAnbXNQZXJzcGVjdGl2ZSddO1xuICAgICAgICAvLyB0ZXN0IGZvciBlYWNoIHByb3BlcnR5XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGl2LnN0eWxlW3Byb3BzW2ldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzbGlkZXIuY3NzUHJlZml4ID0gcHJvcHNbaV0ucmVwbGFjZSgnUGVyc3BlY3RpdmUnLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHNsaWRlci5hbmltUHJvcCA9ICctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSgpKTtcbiAgICAgIC8vIGlmIHZlcnRpY2FsIG1vZGUgYWx3YXlzIG1ha2UgbWF4U2xpZGVzIGFuZCBtaW5TbGlkZXMgZXF1YWxcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlczsgfVxuICAgICAgLy8gc2F2ZSBvcmlnaW5hbCBzdHlsZSBkYXRhXG4gICAgICBlbC5kYXRhKCdvcmlnU3R5bGUnLCBlbC5hdHRyKCdzdHlsZScpKTtcbiAgICAgIGVsLmNoaWxkcmVuKHNsaWRlci5zZXR0aW5ncy5zbGlkZVNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScsICQodGhpcykuYXR0cignc3R5bGUnKSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gcGVyZm9ybSBhbGwgRE9NIC8gQ1NTIG1vZGlmaWNhdGlvbnNcbiAgICAgIHNldHVwKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFsbCBET00gYW5kIENTUyBtb2RpZmljYXRpb25zXG4gICAgICovXG4gICAgdmFyIHNldHVwID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJlbG9hZFNlbGVjdG9yID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlKTsgLy8gc2V0IHRoZSBkZWZhdWx0IHByZWxvYWQgc2VsZWN0b3IgKHZpc2libGUpXG5cbiAgICAgIC8vIHdyYXAgZWwgaW4gYSB3cmFwcGVyXG4gICAgICBlbC53cmFwKCc8ZGl2IGNsYXNzPVwiJyArIHNsaWRlci5zZXR0aW5ncy53cmFwcGVyQ2xhc3MgKyAnXCI+PGRpdiBjbGFzcz1cImJ4LXZpZXdwb3J0XCI+PC9kaXY+PC9kaXY+Jyk7XG4gICAgICAvLyBzdG9yZSBhIG5hbWVzcGFjZSByZWZlcmVuY2UgdG8gLmJ4LXZpZXdwb3J0XG4gICAgICBzbGlkZXIudmlld3BvcnQgPSBlbC5wYXJlbnQoKTtcblxuICAgICAgLy8gYWRkIGFyaWEtbGl2ZSBpZiB0aGUgc2V0dGluZyBpcyBlbmFibGVkIGFuZCB0aWNrZXIgbW9kZSBpcyBkaXNhYmxlZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hcmlhTGl2ZSAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICBzbGlkZXIudmlld3BvcnQuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgfVxuICAgICAgLy8gYWRkIGEgbG9hZGluZyBkaXYgdG8gZGlzcGxheSB3aGlsZSBpbWFnZXMgYXJlIGxvYWRpbmdcbiAgICAgIHNsaWRlci5sb2FkZXIgPSAkKCc8ZGl2IGNsYXNzPVwiYngtbG9hZGluZ1wiIC8+Jyk7XG4gICAgICBzbGlkZXIudmlld3BvcnQucHJlcGVuZChzbGlkZXIubG9hZGVyKTtcbiAgICAgIC8vIHNldCBlbCB0byBhIG1hc3NpdmUgd2lkdGgsIHRvIGhvbGQgYW55IG5lZWRlZCBzbGlkZXNcbiAgICAgIC8vIGFsc28gc3RyaXAgYW55IG1hcmdpbiBhbmQgcGFkZGluZyBmcm9tIGVsXG4gICAgICBlbC5jc3Moe1xuICAgICAgICB3aWR0aDogc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoICogMTAwMCArIDIxNSkgKyAnJScgOiAnYXV0bycsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9KTtcbiAgICAgIC8vIGlmIHVzaW5nIENTUywgYWRkIHRoZSBlYXNpbmcgcHJvcGVydHlcbiAgICAgIGlmIChzbGlkZXIudXNpbmdDU1MgJiYgc2xpZGVyLnNldHRpbmdzLmVhc2luZykge1xuICAgICAgICBlbC5jc3MoJy0nICsgc2xpZGVyLmNzc1ByZWZpeCArICctdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCBzbGlkZXIuc2V0dGluZ3MuZWFzaW5nKTtcbiAgICAgIC8vIGlmIG5vdCB1c2luZyBDU1MgYW5kIG5vIGVhc2luZyB2YWx1ZSB3YXMgc3VwcGxpZWQsIHVzZSB0aGUgZGVmYXVsdCBKUyBhbmltYXRpb24gZWFzaW5nIChzd2luZylcbiAgICAgIH0gZWxzZSBpZiAoIXNsaWRlci5zZXR0aW5ncy5lYXNpbmcpIHtcbiAgICAgICAgc2xpZGVyLnNldHRpbmdzLmVhc2luZyA9ICdzd2luZyc7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIG1vZGlmaWNhdGlvbnMgdG8gdGhlIHZpZXdwb3J0ICguYngtdmlld3BvcnQpXG4gICAgICBzbGlkZXIudmlld3BvcnQuY3NzKHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSk7XG4gICAgICBzbGlkZXIudmlld3BvcnQucGFyZW50KCkuY3NzKHtcbiAgICAgICAgbWF4V2lkdGg6IGdldFZpZXdwb3J0TWF4V2lkdGgoKVxuICAgICAgfSk7XG4gICAgICAvLyBhcHBseSBjc3MgdG8gYWxsIHNsaWRlciBjaGlsZHJlblxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmNzcyh7XG4gICAgICAgIC8vIHRoZSBmbG9hdCBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCB3b3JkIGluIGNvbXByZXNzb3JzIGxpa2UgWVVJIGNvbXByZXNzb3IgYW5kIG5lZWQgdG8gYmUgcXVvdGVkICM0OFxuICAgICAgICAnZmxvYXQnOiBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ2xlZnQnIDogJ25vbmUnLFxuICAgICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0pO1xuICAgICAgLy8gYXBwbHkgdGhlIGNhbGN1bGF0ZWQgd2lkdGggYWZ0ZXIgdGhlIGZsb2F0IGlzIGFwcGxpZWQgdG8gcHJldmVudCBzY3JvbGxiYXIgaW50ZXJmZXJlbmNlXG4gICAgICBzbGlkZXIuY2hpbGRyZW4uY3NzKCd3aWR0aCcsIGdldFNsaWRlV2lkdGgoKSk7XG4gICAgICAvLyBpZiBzbGlkZU1hcmdpbiBpcyBzdXBwbGllZCwgYWRkIHRoZSBjc3NcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnICYmIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbiA+IDApIHsgc2xpZGVyLmNoaWxkcmVuLmNzcygnbWFyZ2luUmlnaHQnLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pOyB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgJiYgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkgeyBzbGlkZXIuY2hpbGRyZW4uY3NzKCdtYXJnaW5Cb3R0b20nLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pOyB9XG4gICAgICAvLyBpZiBcImZhZGVcIiBtb2RlLCBhZGQgcG9zaXRpb25pbmcgYW5kIHotaW5kZXggQ1NTXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdmYWRlJykge1xuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uY3NzKHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBwcmVwYXJlIHRoZSB6LWluZGV4IG9uIHRoZSBzaG93aW5nIGVsZW1lbnRcbiAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlKS5jc3Moe3pJbmRleDogc2xpZGVyLnNldHRpbmdzLnNsaWRlWkluZGV4LCBkaXNwbGF5OiAnYmxvY2snfSk7XG4gICAgICB9XG4gICAgICAvLyBjcmVhdGUgYW4gZWxlbWVudCB0byBjb250YWluIGFsbCBzbGlkZXIgY29udHJvbHMgKHBhZ2VyLCBzdGFydCAvIHN0b3AsIGV0YylcbiAgICAgIHNsaWRlci5jb250cm9scy5lbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9sc1wiIC8+Jyk7XG4gICAgICAvLyBpZiBjYXB0aW9ucyBhcmUgcmVxdWVzdGVkLCBhZGQgdGhlbVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jYXB0aW9ucykgeyBhcHBlbmRDYXB0aW9ucygpOyB9XG4gICAgICAvLyBjaGVjayBpZiBzdGFydFNsaWRlIGlzIGxhc3Qgc2xpZGVcbiAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IHNsaWRlci5zZXR0aW5ncy5zdGFydFNsaWRlID09PSBnZXRQYWdlclF0eSgpIC0gMTtcbiAgICAgIC8vIGlmIHZpZGVvIGlzIHRydWUsIHNldCB1cCB0aGUgZml0VmlkcyBwbHVnaW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MudmlkZW8pIHsgZWwuZml0VmlkcygpOyB9XG5cdCAgLy9wcmVsb2FkSW1hZ2VzXG5cdCAgaWYgKHNsaWRlci5zZXR0aW5ncy5wcmVsb2FkSW1hZ2VzID09PSAnbm9uZScpIHsgXG5cdFx0ICBwcmVsb2FkU2VsZWN0b3IgPSBudWxsOyBcblx0ICB9XG4gICAgICBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MucHJlbG9hZEltYWdlcyA9PT0gJ2FsbCcgfHwgc2xpZGVyLnNldHRpbmdzLnRpY2tlcikgeyBcblx0XHQgIHByZWxvYWRTZWxlY3RvciA9IHNsaWRlci5jaGlsZHJlbjsgXG5cdCAgfVxuICAgICAgLy8gb25seSBjaGVjayBmb3IgY29udHJvbCBhZGRpdGlvbiBpZiBub3QgaW4gXCJ0aWNrZXJcIiBtb2RlXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgLy8gaWYgY29udHJvbHMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyBhcHBlbmRDb250cm9scygpOyB9XG4gICAgICAgIC8vIGlmIGF1dG8gaXMgdHJ1ZSwgYW5kIGF1dG8gY29udHJvbHMgYXJlIHJlcXVlc3RlZCwgYWRkIHRoZW1cbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMpIHsgYXBwZW5kQ29udHJvbHNBdXRvKCk7IH1cbiAgICAgICAgLy8gaWYgcGFnZXIgaXMgcmVxdWVzdGVkLCBhZGQgaXRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyBhcHBlbmRQYWdlcigpOyB9XG4gICAgICAgIC8vIGlmIGFueSBjb250cm9sIG9wdGlvbiBpcyByZXF1ZXN0ZWQsIGFkZCB0aGUgY29udHJvbHMgd3JhcHBlclxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmNvbnRyb2xzIHx8IHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgfHwgc2xpZGVyLnNldHRpbmdzLnBhZ2VyKSB7IHNsaWRlci52aWV3cG9ydC5hZnRlcihzbGlkZXIuY29udHJvbHMuZWwpOyB9XG4gICAgICAvLyBpZiB0aWNrZXIgbW9kZSwgZG8gbm90IGFsbG93IGEgcGFnZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlci5zZXR0aW5ncy5wYWdlciA9IGZhbHNlO1xuICAgICAgfVxuXHQgIGlmIChwcmVsb2FkU2VsZWN0b3IgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRFbGVtZW50cyhwcmVsb2FkU2VsZWN0b3IsIHN0YXJ0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGxvYWRFbGVtZW50cyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRvdGFsID0gc2VsZWN0b3IuZmluZCgnaW1nOm5vdChbc3JjPVwiXCJdKSwgaWZyYW1lJykubGVuZ3RoLFxuICAgICAgY291bnQgPSAwO1xuICAgICAgaWYgKHRvdGFsID09PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGVjdG9yLmZpbmQoJ2ltZzpub3QoW3NyYz1cIlwiXSksIGlmcmFtZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICQodGhpcykub25lKCdsb2FkIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPT09IHRvdGFsKSB7IGNhbGxiYWNrKCk7IH1cbiAgICAgICAgfSkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb21wbGV0ZSB8fCB0aGlzLnNyYyA9PSAnJykgeyAkKHRoaXMpLnRyaWdnZXIoJ2xvYWQnKTsgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgc2xpZGVyXG4gICAgICovXG4gICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBpbmZpbml0ZSBsb29wLCBwcmVwYXJlIGFkZGl0aW9uYWwgc2xpZGVzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ2ZhZGUnICYmICFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7XG4gICAgICAgIHZhciBzbGljZSAgICA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnID8gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyA6IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMsXG4gICAgICAgIHNsaWNlQXBwZW5kICA9IHNsaWRlci5jaGlsZHJlbi5zbGljZSgwLCBzbGljZSkuY2xvbmUodHJ1ZSkuYWRkQ2xhc3MoJ2J4LWNsb25lJyksXG4gICAgICAgIHNsaWNlUHJlcGVuZCA9IHNsaWRlci5jaGlsZHJlbi5zbGljZSgtc2xpY2UpLmNsb25lKHRydWUpLmFkZENsYXNzKCdieC1jbG9uZScpO1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHtcbiAgICAgICAgICBzbGljZUFwcGVuZC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICAgIHNsaWNlUHJlcGVuZC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsLmFwcGVuZChzbGljZUFwcGVuZCkucHJlcGVuZChzbGljZVByZXBlbmQpO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIHRoZSBsb2FkaW5nIERPTSBlbGVtZW50XG4gICAgICBzbGlkZXIubG9hZGVyLnJlbW92ZSgpO1xuICAgICAgLy8gc2V0IHRoZSBsZWZ0IC8gdG9wIHBvc2l0aW9uIG9mIFwiZWxcIlxuICAgICAgc2V0U2xpZGVQb3NpdGlvbigpO1xuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGFsd2F5cyB1c2UgYWRhcHRpdmVIZWlnaHQgdG8gcHJldmVudCBvZGQgYmVoYXZpb3JcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHQgPSB0cnVlOyB9XG4gICAgICAvLyBzZXQgdGhlIHZpZXdwb3J0IGhlaWdodFxuICAgICAgc2xpZGVyLnZpZXdwb3J0LmhlaWdodChnZXRWaWV3cG9ydEhlaWdodCgpKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSBldmVyeXRoaW5nIGlzIHBvc2l0aW9uZWQganVzdCByaWdodCAoc2FtZSBhcyBhIHdpbmRvdyByZXNpemUpXG4gICAgICBlbC5yZWRyYXdTbGlkZXIoKTtcbiAgICAgIC8vIG9uU2xpZGVyTG9hZCBjYWxsYmFja1xuICAgICAgc2xpZGVyLnNldHRpbmdzLm9uU2xpZGVyTG9hZC5jYWxsKGVsLCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgIC8vIHNsaWRlciBoYXMgYmVlbiBmdWxseSBpbml0aWFsaXplZFxuICAgICAgc2xpZGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIC8vIGFkZCB0aGUgcmVzaXplIGNhbGwgdG8gdGhlIHdpbmRvd1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5yZXNwb25zaXZlKSB7ICQod2luZG93KS5vbigncmVzaXplJywgcmVzaXplV2luZG93KTsgfVxuICAgICAgLy8gaWYgYXV0byBpcyB0cnVlIGFuZCBoYXMgbW9yZSB0aGFuIDEgcGFnZSwgc3RhcnQgdGhlIHNob3dcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0byAmJiBzbGlkZXIuc2V0dGluZ3MuYXV0b1N0YXJ0ICYmIChnZXRQYWdlclF0eSgpID4gMSB8fCBzbGlkZXIuc2V0dGluZ3MuYXV0b1NsaWRlRm9yT25lUGFnZSkpIHsgaW5pdEF1dG8oKTsgfVxuICAgICAgLy8gaWYgdGlja2VyIGlzIHRydWUsIHN0YXJ0IHRoZSB0aWNrZXJcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IGluaXRUaWNrZXIoKTsgfVxuICAgICAgLy8gaWYgcGFnZXIgaXMgcmVxdWVzdGVkLCBtYWtlIHRoZSBhcHByb3ByaWF0ZSBwYWdlciBsaW5rIGFjdGl2ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlcikgeyB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuc2V0dGluZ3Muc3RhcnRTbGlkZSk7IH1cbiAgICAgIC8vIGNoZWNrIGZvciBhbnkgdXBkYXRlcyB0byB0aGUgY29udHJvbHMgKGxpa2UgaGlkZUNvbnRyb2xPbkVuZCB1cGRhdGVzKVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyB1cGRhdGVEaXJlY3Rpb25Db250cm9scygpOyB9XG4gICAgICAvLyBpZiB0b3VjaEVuYWJsZWQgaXMgdHJ1ZSwgc2V0dXAgdGhlIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50b3VjaEVuYWJsZWQgJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHsgaW5pdFRvdWNoKCk7IH1cbiAgICAgIC8vIGlmIGtleWJvYXJkRW5hYmxlZCBpcyB0cnVlLCBzZXR1cCB0aGUga2V5Ym9hcmQgZXZlbnRzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmtleWJvYXJkRW5hYmxlZCAmJiAhc2xpZGVyLnNldHRpbmdzLnRpY2tlcikge1xuICAgICAgICAkKGRvY3VtZW50KS5rZXlkb3duKGtleVByZXNzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LCB1c2VkIHRvIGRldGVybWluZSBlaXRoZXIgYWRhcHRpdmVIZWlnaHQgb3IgdGhlIG1heEhlaWdodCB2YWx1ZVxuICAgICAqL1xuICAgIHZhciBnZXRWaWV3cG9ydEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhlaWdodCA9IDA7XG4gICAgICAvLyBmaXJzdCBkZXRlcm1pbmUgd2hpY2ggY2hpbGRyZW4gKHNsaWRlcykgc2hvdWxkIGJlIHVzZWQgaW4gb3VyIGhlaWdodCBjYWxjdWxhdGlvblxuICAgICAgdmFyIGNoaWxkcmVuID0gJCgpO1xuICAgICAgLy8gaWYgbW9kZSBpcyBub3QgXCJ2ZXJ0aWNhbFwiIGFuZCBhZGFwdGl2ZUhlaWdodCBpcyBmYWxzZSwgaW5jbHVkZSBhbGwgY2hpbGRyZW5cbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSAhPT0gJ3ZlcnRpY2FsJyAmJiAhc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0KSB7XG4gICAgICAgIGNoaWxkcmVuID0gc2xpZGVyLmNoaWxkcmVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgbm90IGNhcm91c2VsLCByZXR1cm4gdGhlIHNpbmdsZSBhY3RpdmUgY2hpbGRcbiAgICAgICAgaWYgKCFzbGlkZXIuY2Fyb3VzZWwpIHtcbiAgICAgICAgICBjaGlsZHJlbiA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICAgICAgLy8gaWYgY2Fyb3VzZWwsIHJldHVybiBhIHNsaWNlIG9mIGNoaWxkcmVuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZ2V0IHRoZSBpbmRpdmlkdWFsIHNsaWRlIGluZGV4XG4gICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzID09PSAxID8gc2xpZGVyLmFjdGl2ZS5pbmRleCA6IHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKTtcbiAgICAgICAgICAvLyBhZGQgdGhlIGN1cnJlbnQgc2xpZGUgdG8gdGhlIGNoaWxkcmVuXG4gICAgICAgICAgY2hpbGRyZW4gPSBzbGlkZXIuY2hpbGRyZW4uZXEoY3VycmVudEluZGV4KTtcbiAgICAgICAgICAvLyBjeWNsZSB0aHJvdWdoIHRoZSByZW1haW5pbmcgXCJzaG93aW5nXCIgc2xpZGVzXG4gICAgICAgICAgZm9yIChpID0gMTsgaSA8PSBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpZiBsb29wZWQgYmFjayB0byB0aGUgc3RhcnRcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyBpID49IHNsaWRlci5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5hZGQoc2xpZGVyLmNoaWxkcmVuLmVxKGkgLSAxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmFkZChzbGlkZXIuY2hpbGRyZW4uZXEoY3VycmVudEluZGV4ICsgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGNhbGN1bGF0ZSB0aGUgc3VtIG9mIHRoZSBoZWlnaHRzIG9mIHRoZSBjaGlsZHJlblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIGNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICBoZWlnaHQgKz0gJCh0aGlzKS5vdXRlckhlaWdodCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gYWRkIHVzZXItc3VwcGxpZWQgbWFyZ2luc1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luID4gMCkge1xuICAgICAgICAgIGhlaWdodCArPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4gKiAoc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcyAtIDEpO1xuICAgICAgICB9XG4gICAgICAvLyBpZiBub3QgXCJ2ZXJ0aWNhbFwiIG1vZGUsIGNhbGN1bGF0ZSB0aGUgbWF4IGhlaWdodCBvZiB0aGUgY2hpbGRyZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGNoaWxkcmVuLm1hcChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJCh0aGlzKS5vdXRlckhlaWdodChmYWxzZSk7XG4gICAgICAgIH0pLmdldCgpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5jc3MoJ2JveC1zaXppbmcnKSA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIGhlaWdodCArPSBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdwYWRkaW5nLWJvdHRvbScpKSArXG4gICAgICAgICAgICAgIHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm9yZGVyLXRvcC13aWR0aCcpKSArIHBhcnNlRmxvYXQoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm9yZGVyLWJvdHRvbS13aWR0aCcpKTtcbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnZpZXdwb3J0LmNzcygnYm94LXNpemluZycpID09PSAncGFkZGluZy1ib3gnKSB7XG4gICAgICAgIGhlaWdodCArPSBwYXJzZUZsb2F0KHNsaWRlci52aWV3cG9ydC5jc3MoJ3BhZGRpbmctdG9wJykpICsgcGFyc2VGbG9hdChzbGlkZXIudmlld3BvcnQuY3NzKCdwYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCB3aWR0aCB0byBiZSB1c2VkIGZvciB0aGUgb3V0ZXIgd3JhcHBlciAvIHZpZXdwb3J0XG4gICAgICovXG4gICAgdmFyIGdldFZpZXdwb3J0TWF4V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aCA9ICcxMDAlJztcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA+IDApIHtcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICB3aWR0aCA9IChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICogc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGgpICsgKChzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gMSkgKiBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpZHRoID0gc2xpZGVyLnNldHRpbmdzLnNsaWRlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2FsY3VsYXRlZCB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIGVhY2ggc2xpZGVcbiAgICAgKi9cbiAgICB2YXIgZ2V0U2xpZGVXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5ld0VsV2lkdGggPSBzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCwgLy8gc3RhcnQgd2l0aCBhbnkgdXNlci1zdXBwbGllZCBzbGlkZSB3aWR0aFxuICAgICAgd3JhcFdpZHRoICAgICAgPSBzbGlkZXIudmlld3BvcnQud2lkdGgoKTsgICAgLy8gZ2V0IHRoZSBjdXJyZW50IHZpZXdwb3J0IHdpZHRoXG4gICAgICAvLyBpZiBzbGlkZSB3aWR0aCB3YXMgbm90IHN1cHBsaWVkLCBvciBpcyBsYXJnZXIgdGhhbiB0aGUgdmlld3BvcnQgdXNlIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID09PSAwIHx8XG4gICAgICAgIChzbGlkZXIuc2V0dGluZ3Muc2xpZGVXaWR0aCA+IHdyYXBXaWR0aCAmJiAhc2xpZGVyLmNhcm91c2VsKSB8fFxuICAgICAgICBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBuZXdFbFdpZHRoID0gd3JhcFdpZHRoO1xuICAgICAgLy8gaWYgY2Fyb3VzZWwsIHVzZSB0aGUgdGhyZXNob2xkcyB0byBkZXRlcm1pbmUgdGhlIHdpZHRoXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMgPiAxICYmIHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgaWYgKHdyYXBXaWR0aCA+IHNsaWRlci5tYXhUaHJlc2hvbGQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3RWxXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmICh3cmFwV2lkdGggPCBzbGlkZXIubWluVGhyZXNob2xkKSB7XG4gICAgICAgICAgbmV3RWxXaWR0aCA9ICh3cmFwV2lkdGggLSAoc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luICogKHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXMgLSAxKSkpIC8gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3Muc2hyaW5rSXRlbXMpIHtcbiAgICAgICAgICBuZXdFbFdpZHRoID0gTWF0aC5mbG9vcigod3JhcFdpZHRoICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luKSAvIChNYXRoLmNlaWwoKHdyYXBXaWR0aCArIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikgLyAobmV3RWxXaWR0aCArIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbikpKSAtIHNsaWRlci5zZXR0aW5ncy5zbGlkZU1hcmdpbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdFbFdpZHRoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2xpZGVzIGN1cnJlbnRseSB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydCAoaW5jbHVkZXMgcGFydGlhbGx5IHZpc2libGUgc2xpZGVzKVxuICAgICAqL1xuICAgIHZhciBnZXROdW1iZXJTbGlkZXNTaG93aW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2xpZGVzU2hvd2luZyA9IDEsXG4gICAgICBjaGlsZFdpZHRoID0gbnVsbDtcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnICYmIHNsaWRlci5zZXR0aW5ncy5zbGlkZVdpZHRoID4gMCkge1xuICAgICAgICAvLyBpZiB2aWV3cG9ydCBpcyBzbWFsbGVyIHRoYW4gbWluVGhyZXNob2xkLCByZXR1cm4gbWluU2xpZGVzXG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQud2lkdGgoKSA8IHNsaWRlci5taW5UaHJlc2hvbGQpIHtcbiAgICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgICAgLy8gaWYgdmlld3BvcnQgaXMgbGFyZ2VyIHRoYW4gbWF4VGhyZXNob2xkLCByZXR1cm4gbWF4U2xpZGVzXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgPiBzbGlkZXIubWF4VGhyZXNob2xkKSB7XG4gICAgICAgICAgc2xpZGVzU2hvd2luZyA9IHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXM7XG4gICAgICAgIC8vIGlmIHZpZXdwb3J0IGlzIGJldHdlZW4gbWluIC8gbWF4IHRocmVzaG9sZHMsIGRpdmlkZSB2aWV3cG9ydCB3aWR0aCBieSBmaXJzdCBjaGlsZCB3aWR0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkV2lkdGggPSBzbGlkZXIuY2hpbGRyZW4uZmlyc3QoKS53aWR0aCgpICsgc2xpZGVyLnNldHRpbmdzLnNsaWRlTWFyZ2luO1xuICAgICAgICAgIHNsaWRlc1Nob3dpbmcgPSBNYXRoLmZsb29yKChzbGlkZXIudmlld3BvcnQud2lkdGgoKSArXG4gICAgICAgICAgICBzbGlkZXIuc2V0dGluZ3Muc2xpZGVNYXJnaW4pIC8gY2hpbGRXaWR0aCkgfHwgMTtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgXCJ2ZXJ0aWNhbFwiIG1vZGUsIHNsaWRlcyBzaG93aW5nIHdpbGwgYWx3YXlzIGJlIG1pblNsaWRlc1xuICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZXNTaG93aW5nID0gc2xpZGVyLnNldHRpbmdzLm1pblNsaWRlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGlkZXNTaG93aW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcGFnZXMgKG9uZSBmdWxsIHZpZXdwb3J0IG9mIHNsaWRlcyBpcyBvbmUgXCJwYWdlXCIpXG4gICAgICovXG4gICAgdmFyIGdldFBhZ2VyUXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFnZXJRdHkgPSAwLFxuICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICBjb3VudGVyID0gMDtcbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgaXMgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPiAwKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcGFnZXJRdHkgPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIGdldE1vdmVCeSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3aGVuIGJyZWFrcG9pbnQgZ29lcyBhYm92ZSBjaGlsZHJlbiBsZW5ndGgsIGNvdW50ZXIgaXMgdGhlIG51bWJlciBvZiBwYWdlc1xuICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgICAgICAgICAgY291bnRlciArPSBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA8PSBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCkgPyBzbGlkZXIuc2V0dGluZ3MubW92ZVNsaWRlcyA6IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKTtcbiAgICAgICAgICB9XG5cdFx0ICByZXR1cm4gY291bnRlcjtcbiAgICAgICAgfVxuICAgICAgLy8gaWYgbW92ZVNsaWRlcyBpcyAwIChhdXRvKSBkaXZpZGUgY2hpbGRyZW4gbGVuZ3RoIGJ5IHNpZGVzIHNob3dpbmcsIHRoZW4gcm91bmQgdXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VyUXR5ID0gTWF0aC5jZWlsKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggLyBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhZ2VyUXR5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgaW5kaXZpZHVhbCBzbGlkZXMgYnkgd2hpY2ggdG8gc2hpZnQgdGhlIHNsaWRlclxuICAgICAqL1xuICAgIHZhciBnZXRNb3ZlQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIG1vdmVTbGlkZXMgd2FzIHNldCBieSB0aGUgdXNlciBhbmQgbW92ZVNsaWRlcyBpcyBsZXNzIHRoYW4gbnVtYmVyIG9mIHNsaWRlcyBzaG93aW5nXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPiAwICYmIHNsaWRlci5zZXR0aW5ncy5tb3ZlU2xpZGVzIDw9IGdldE51bWJlclNsaWRlc1Nob3dpbmcoKSkge1xuICAgICAgICByZXR1cm4gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXM7XG4gICAgICB9XG4gICAgICAvLyBpZiBtb3ZlU2xpZGVzIGlzIDAgKGF1dG8pXG4gICAgICByZXR1cm4gZ2V0TnVtYmVyU2xpZGVzU2hvd2luZygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzbGlkZXIncyAoZWwpIGxlZnQgb3IgdG9wIHBvc2l0aW9uXG4gICAgICovXG4gICAgdmFyIHNldFNsaWRlUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiwgbGFzdENoaWxkLCBsYXN0U2hvd2luZ0luZGV4O1xuICAgICAgLy8gaWYgbGFzdCBzbGlkZSwgbm90IGluZmluaXRlIGxvb3AsIGFuZCBudW1iZXIgb2YgY2hpbGRyZW4gaXMgbGFyZ2VyIHRoYW4gc3BlY2lmaWVkIG1heFNsaWRlc1xuICAgICAgaWYgKHNsaWRlci5jaGlsZHJlbi5sZW5ndGggPiBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzICYmIHNsaWRlci5hY3RpdmUubGFzdCAmJiAhc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCdzIHBvc2l0aW9uXG4gICAgICAgICAgbGFzdENoaWxkID0gc2xpZGVyLmNoaWxkcmVuLmxhc3QoKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAgIC8vIHNldCB0aGUgbGVmdCBwb3NpdGlvblxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoLShwb3NpdGlvbi5sZWZ0IC0gKHNsaWRlci52aWV3cG9ydC53aWR0aCgpIC0gbGFzdENoaWxkLm91dGVyV2lkdGgoKSkpLCAncmVzZXQnLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBzaG93aW5nIGluZGV4J3MgcG9zaXRpb25cbiAgICAgICAgICBsYXN0U2hvd2luZ0luZGV4ID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEobGFzdFNob3dpbmdJbmRleCkucG9zaXRpb24oKTtcbiAgICAgICAgICAvLyBzZXQgdGhlIHRvcCBwb3NpdGlvblxuICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIG5vdCBsYXN0IHNsaWRlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBzaG93aW5nIHNsaWRlXG4gICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKHNsaWRlci5hY3RpdmUuaW5kZXggKiBnZXRNb3ZlQnkoKSkucG9zaXRpb24oKTtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGxhc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IGdldFBhZ2VyUXR5KCkgLSAxKSB7IHNsaWRlci5hY3RpdmUubGFzdCA9IHRydWU7IH1cbiAgICAgICAgLy8gc2V0IHRoZSByZXNwZWN0aXZlIHBvc2l0aW9uXG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHsgc2V0UG9zaXRpb25Qcm9wZXJ0eSgtcG9zaXRpb24ubGVmdCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgICBlbHNlIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ3ZlcnRpY2FsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi50b3AsICdyZXNldCcsIDApOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZWwncyBhbmltYXRpbmcgcHJvcGVydHkgcG9zaXRpb24gKHdoaWNoIGluIHR1cm4gd2lsbCBzb21ldGltZXMgYW5pbWF0ZSBlbCkuXG4gICAgICogSWYgdXNpbmcgQ1NTLCBzZXRzIHRoZSB0cmFuc2Zvcm0gcHJvcGVydHkuIElmIG5vdCB1c2luZyBDU1MsIHNldHMgdGhlIHRvcCAvIGxlZnQgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgKGludClcbiAgICAgKiAgLSB0aGUgYW5pbWF0aW5nIHByb3BlcnR5J3MgdmFsdWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIChzdHJpbmcpICdzbGlkZScsICdyZXNldCcsICd0aWNrZXInXG4gICAgICogIC0gdGhlIHR5cGUgb2YgaW5zdGFuY2UgZm9yIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGR1cmF0aW9uIChpbnQpXG4gICAgICogIC0gdGhlIGFtb3VudCBvZiB0aW1lIChpbiBtcykgdGhlIHRyYW5zaXRpb24gc2hvdWxkIG9jY3VweVxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmFtcyAoYXJyYXkpIG9wdGlvbmFsXG4gICAgICogIC0gYW4gb3B0aW9uYWwgcGFyYW1ldGVyIGNvbnRhaW5pbmcgYW55IHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gYmUgcGFzc2VkIGluXG4gICAgICovXG4gICAgdmFyIHNldFBvc2l0aW9uUHJvcGVydHkgPSBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgZHVyYXRpb24sIHBhcmFtcykge1xuICAgICAgdmFyIGFuaW1hdGVPYmosIHByb3BWYWx1ZTtcbiAgICAgIC8vIHVzZSBDU1MgdHJhbnNmb3JtXG4gICAgICBpZiAoc2xpZGVyLnVzaW5nQ1NTKSB7XG4gICAgICAgIC8vIGRldGVybWluZSB0aGUgdHJhbnNsYXRlM2QgdmFsdWVcbiAgICAgICAgcHJvcFZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICd2ZXJ0aWNhbCcgPyAndHJhbnNsYXRlM2QoMCwgJyArIHZhbHVlICsgJ3B4LCAwKScgOiAndHJhbnNsYXRlM2QoJyArIHZhbHVlICsgJ3B4LCAwLCAwKSc7XG4gICAgICAgIC8vIGFkZCB0aGUgQ1NTIHRyYW5zaXRpb24tZHVyYXRpb25cbiAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tZHVyYXRpb24nLCBkdXJhdGlvbiAvIDEwMDAgKyAncycpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgIC8vIHNldCB0aGUgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCBwcm9wVmFsdWUpO1xuICAgICAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgLy8gYWRkIGEgY2FsbGJhY2sgbWV0aG9kIC0gZXhlY3V0ZXMgd2hlbiBDU1MgdHJhbnNpdGlvbiBjb21wbGV0ZXNcbiAgICAgICAgICAgIGVsLm9uKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBpdCdzIHRoZSBjb3JyZWN0IG9uZVxuICAgICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKGVsKSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICBlbC5vZmYoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBNU1RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgdXBkYXRlQWZ0ZXJTbGlkZVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vZHVyYXRpb24gPSAwXG4gICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzZXQnKSB7XG4gICAgICAgICAgZWwuY3NzKHNsaWRlci5hbmltUHJvcCwgcHJvcFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGlja2VyJykge1xuICAgICAgICAgIC8vIG1ha2UgdGhlIHRyYW5zaXRpb24gdXNlICdsaW5lYXInXG4gICAgICAgICAgZWwuY3NzKCctJyArIHNsaWRlci5jc3NQcmVmaXggKyAnLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJywgJ2xpbmVhcicpO1xuICAgICAgICAgIGVsLmNzcyhzbGlkZXIuYW5pbVByb3AsIHByb3BWYWx1ZSk7XG4gICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICBlbC5vbigndHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIE1TVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgaXQncyB0aGUgY29ycmVjdCBvbmVcbiAgICAgICAgICAgICAgaWYgKCEkKGUudGFyZ2V0KS5pcyhlbCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgZWwub2ZmKCd0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBwb3NpdGlvblxuICAgICAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHBhcmFtcy5yZXNldFZhbHVlLCAncmVzZXQnLCAwKTtcbiAgICAgICAgICAgICAgLy8gc3RhcnQgdGhlIGxvb3AgYWdhaW5cbiAgICAgICAgICAgICAgdGlja2VyTG9vcCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy9kdXJhdGlvbiA9IDBcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkocGFyYW1zLnJlc2V0VmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgICAgdGlja2VyTG9vcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgLy8gdXNlIEpTIGFuaW1hdGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGVPYmogPSB7fTtcbiAgICAgICAgYW5pbWF0ZU9ialtzbGlkZXIuYW5pbVByb3BdID0gdmFsdWU7XG4gICAgICAgIGlmICh0eXBlID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgZWwuYW5pbWF0ZShhbmltYXRlT2JqLCBkdXJhdGlvbiwgc2xpZGVyLnNldHRpbmdzLmVhc2luZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyZXNldCcpIHtcbiAgICAgICAgICBlbC5jc3Moc2xpZGVyLmFuaW1Qcm9wLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3RpY2tlcicpIHtcbiAgICAgICAgICBlbC5hbmltYXRlKGFuaW1hdGVPYmosIGR1cmF0aW9uLCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHBhcmFtcy5yZXNldFZhbHVlLCAncmVzZXQnLCAwKTtcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcmVjdXJzaXZlIGxvb3AgYWZ0ZXIgYW5pbWF0aW9uXG4gICAgICAgICAgICB0aWNrZXJMb29wKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGVzIHRoZSBwYWdlciB3aXRoIHByb3BlciBhbW91bnQgb2YgcGFnZXNcbiAgICAgKi9cbiAgICB2YXIgcG9wdWxhdGVQYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhZ2VySHRtbCA9ICcnLFxuICAgICAgbGlua0NvbnRlbnQgPSAnJyxcbiAgICAgIHBhZ2VyUXR5ID0gZ2V0UGFnZXJRdHkoKTtcbiAgICAgIC8vIGxvb3AgdGhyb3VnaCBlYWNoIHBhZ2VyIGl0ZW1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZXJRdHk7IGkrKykge1xuICAgICAgICBsaW5rQ29udGVudCA9ICcnO1xuICAgICAgICAvLyBpZiBhIGJ1aWxkUGFnZXIgZnVuY3Rpb24gaXMgc3VwcGxpZWQsIHVzZSBpdCB0byBnZXQgcGFnZXIgbGluayB2YWx1ZSwgZWxzZSB1c2UgaW5kZXggKyAxXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlciAmJiAkLmlzRnVuY3Rpb24oc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIpIHx8IHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkge1xuICAgICAgICAgIGxpbmtDb250ZW50ID0gc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIoaSk7XG4gICAgICAgICAgc2xpZGVyLnBhZ2VyRWwuYWRkQ2xhc3MoJ2J4LWN1c3RvbS1wYWdlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpbmtDb250ZW50ID0gaSArIDE7XG4gICAgICAgICAgc2xpZGVyLnBhZ2VyRWwuYWRkQ2xhc3MoJ2J4LWRlZmF1bHQtcGFnZXInKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB2YXIgbGlua0NvbnRlbnQgPSBzbGlkZXIuc2V0dGluZ3MuYnVpbGRQYWdlciAmJiAkLmlzRnVuY3Rpb24oc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIpID8gc2xpZGVyLnNldHRpbmdzLmJ1aWxkUGFnZXIoaSkgOiBpICsgMTtcbiAgICAgICAgLy8gYWRkIHRoZSBtYXJrdXAgdG8gdGhlIHN0cmluZ1xuICAgICAgICBwYWdlckh0bWwgKz0gJzxkaXYgY2xhc3M9XCJieC1wYWdlci1pdGVtXCI+PGEgaHJlZj1cIlwiIGRhdGEtc2xpZGUtaW5kZXg9XCInICsgaSArICdcIiBjbGFzcz1cImJ4LXBhZ2VyLWxpbmtcIj4nICsgbGlua0NvbnRlbnQgKyAnPC9hPjwvZGl2Pic7XG4gICAgICB9XG4gICAgICAvLyBwb3B1bGF0ZSB0aGUgcGFnZXIgZWxlbWVudCB3aXRoIHBhZ2VyIGxpbmtzXG4gICAgICBzbGlkZXIucGFnZXJFbC5odG1sKHBhZ2VySHRtbCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhlIHBhZ2VyIHRvIHRoZSBjb250cm9scyBlbGVtZW50XG4gICAgICovXG4gICAgdmFyIGFwcGVuZFBhZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkge1xuICAgICAgICAvLyBjcmVhdGUgdGhlIHBhZ2VyIERPTSBlbGVtZW50XG4gICAgICAgIHNsaWRlci5wYWdlckVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LXBhZ2VyXCIgLz4nKTtcbiAgICAgICAgLy8gaWYgYSBwYWdlciBzZWxlY3RvciB3YXMgc3VwcGxpZWQsIHBvcHVsYXRlIGl0IHdpdGggdGhlIHBhZ2VyXG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucGFnZXJTZWxlY3Rvcikge1xuICAgICAgICAgICQoc2xpZGVyLnNldHRpbmdzLnBhZ2VyU2VsZWN0b3IpLmh0bWwoc2xpZGVyLnBhZ2VyRWwpO1xuICAgICAgICAvLyBpZiBubyBwYWdlciBzZWxlY3RvciB3YXMgc3VwcGxpZWQsIGFkZCBpdCBhZnRlciB0aGUgd3JhcHBlclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlci5jb250cm9scy5lbC5hZGRDbGFzcygnYngtaGFzLXBhZ2VyJykuYXBwZW5kKHNsaWRlci5wYWdlckVsKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgcGFnZXJcbiAgICAgICAgcG9wdWxhdGVQYWdlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVyLnBhZ2VyRWwgPSAkKHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSk7XG4gICAgICB9XG4gICAgICAvLyBhc3NpZ24gdGhlIHBhZ2VyIGNsaWNrIGJpbmRpbmdcbiAgICAgIHNsaWRlci5wYWdlckVsLm9uKCdjbGljayB0b3VjaGVuZCcsICdhJywgY2xpY2tQYWdlckJpbmQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIHByZXYgLyBuZXh0IGNvbnRyb2xzIHRvIHRoZSBjb250cm9scyBlbGVtZW50XG4gICAgICovXG4gICAgdmFyIGFwcGVuZENvbnRyb2xzID0gZnVuY3Rpb24oKSB7XG4gICAgICBzbGlkZXIuY29udHJvbHMubmV4dCA9ICQoJzxhIGNsYXNzPVwiYngtbmV4dFwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLm5leHRUZXh0ICsgJzwvYT4nKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5wcmV2ID0gJCgnPGEgY2xhc3M9XCJieC1wcmV2XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3MucHJldlRleHQgKyAnPC9hPicpO1xuICAgICAgLy8gYWRkIGNsaWNrIGFjdGlvbnMgdG8gdGhlIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5vbignY2xpY2sgdG91Y2hlbmQnLCBjbGlja05leHRCaW5kKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5wcmV2Lm9uKCdjbGljayB0b3VjaGVuZCcsIGNsaWNrUHJldkJpbmQpO1xuICAgICAgLy8gaWYgbmV4dFNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubmV4dFNlbGVjdG9yKSB7XG4gICAgICAgICQoc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3RvcikuYXBwZW5kKHNsaWRlci5jb250cm9scy5uZXh0KTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHByZXZTZWxlY3RvciB3YXMgc3VwcGxpZWQsIHBvcHVsYXRlIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3Rvcikge1xuICAgICAgICAkKHNsaWRlci5zZXR0aW5ncy5wcmV2U2VsZWN0b3IpLmFwcGVuZChzbGlkZXIuY29udHJvbHMucHJldik7XG4gICAgICB9XG4gICAgICAvLyBpZiBubyBjdXN0b20gc2VsZWN0b3JzIHdlcmUgc3VwcGxpZWRcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLm5leHRTZWxlY3RvciAmJiAhc2xpZGVyLnNldHRpbmdzLnByZXZTZWxlY3Rvcikge1xuICAgICAgICAvLyBhZGQgdGhlIGNvbnRyb2xzIHRvIHRoZSBET01cbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWRpcmVjdGlvblwiIC8+Jyk7XG4gICAgICAgIC8vIGFkZCB0aGUgY29udHJvbCBlbGVtZW50cyB0byB0aGUgZGlyZWN0aW9uRWxcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsLmFwcGVuZChzbGlkZXIuY29udHJvbHMucHJldikuYXBwZW5kKHNsaWRlci5jb250cm9scy5uZXh0KTtcbiAgICAgICAgLy8gc2xpZGVyLnZpZXdwb3J0LmFwcGVuZChzbGlkZXIuY29udHJvbHMuZGlyZWN0aW9uRWwpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuZWwuYWRkQ2xhc3MoJ2J4LWhhcy1jb250cm9scy1kaXJlY3Rpb24nKS5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLmRpcmVjdGlvbkVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBzdGFydCAvIHN0b3AgYXV0byBjb250cm9scyB0byB0aGUgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBhcHBlbmRDb250cm9sc0F1dG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHNsaWRlci5jb250cm9scy5zdGFydCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvLWl0ZW1cIj48YSBjbGFzcz1cImJ4LXN0YXJ0XCIgaHJlZj1cIlwiPicgKyBzbGlkZXIuc2V0dGluZ3Muc3RhcnRUZXh0ICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgIHNsaWRlci5jb250cm9scy5zdG9wID0gJCgnPGRpdiBjbGFzcz1cImJ4LWNvbnRyb2xzLWF1dG8taXRlbVwiPjxhIGNsYXNzPVwiYngtc3RvcFwiIGhyZWY9XCJcIj4nICsgc2xpZGVyLnNldHRpbmdzLnN0b3BUZXh0ICsgJzwvYT48L2Rpdj4nKTtcbiAgICAgIC8vIGFkZCB0aGUgY29udHJvbHMgdG8gdGhlIERPTVxuICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCA9ICQoJzxkaXYgY2xhc3M9XCJieC1jb250cm9scy1hdXRvXCIgLz4nKTtcbiAgICAgIC8vIG9uIGNsaWNrIGFjdGlvbnMgdG8gdGhlIGNvbnRyb2xzXG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLm9uKCdjbGljaycsICcuYngtc3RhcnQnLCBjbGlja1N0YXJ0QmluZCk7XG4gICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLm9uKCdjbGljaycsICcuYngtc3RvcCcsIGNsaWNrU3RvcEJpbmQpO1xuICAgICAgLy8gaWYgYXV0b0NvbnRyb2xzQ29tYmluZSwgaW5zZXJ0IG9ubHkgdGhlIFwic3RhcnRcIiBjb250cm9sXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9sc0NvbWJpbmUpIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmF1dG9FbC5hcHBlbmQoc2xpZGVyLmNvbnRyb2xzLnN0YXJ0KTtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgZmFsc2UsIGluc2VydCBib3RoIGNvbnRyb2xzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RhcnQpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuc3RvcCk7XG4gICAgICB9XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIHNlbGVjdG9yIHdhcyBzdXBwbGllZCwgcG9wdWxhdGUgaXQgd2l0aCB0aGUgY29udHJvbHNcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzU2VsZWN0b3IpIHtcbiAgICAgICAgJChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzU2VsZWN0b3IpLmh0bWwoc2xpZGVyLmNvbnRyb2xzLmF1dG9FbCk7XG4gICAgICAvLyBpZiBhdXRvIGNvbnRyb2xzIHNlbGVjdG9yIHdhcyBub3Qgc3VwcGxpZWQsIGFkZCBpdCBhZnRlciB0aGUgd3JhcHBlclxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLmFkZENsYXNzKCdieC1oYXMtY29udHJvbHMtYXV0bycpLmFwcGVuZChzbGlkZXIuY29udHJvbHMuYXV0b0VsKTtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZSB0aGUgYXV0byBjb250cm9sc1xuICAgICAgdXBkYXRlQXV0b0NvbnRyb2xzKHNsaWRlci5zZXR0aW5ncy5hdXRvU3RhcnQgPyAnc3RvcCcgOiAnc3RhcnQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBpbWFnZSBjYXB0aW9ucyB0byB0aGUgRE9NXG4gICAgICovXG4gICAgdmFyIGFwcGVuZENhcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBjeWNsZSB0aHJvdWdoIGVhY2ggY2hpbGRcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIC8vIGdldCB0aGUgaW1hZ2UgdGl0bGUgYXR0cmlidXRlXG4gICAgICAgIHZhciB0aXRsZSA9ICQodGhpcykuZmluZCgnaW1nOmZpcnN0JykuYXR0cigndGl0bGUnKTtcbiAgICAgICAgLy8gYXBwZW5kIHRoZSBjYXB0aW9uXG4gICAgICAgIGlmICh0aXRsZSAhPT0gdW5kZWZpbmVkICYmICgnJyArIHRpdGxlKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKHRoaXMpLmFwcGVuZCgnPGRpdiBjbGFzcz1cImJ4LWNhcHRpb25cIj48c3Bhbj4nICsgdGl0bGUgKyAnPC9zcGFuPjwvZGl2PicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgbmV4dCBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja05leHRCaW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5lbC5oYXNDbGFzcygnZGlzYWJsZWQnKSkgeyByZXR1cm47IH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gJiYgc2xpZGVyLnNldHRpbmdzLnN0b3BBdXRvT25DbGljaykgeyBlbC5zdG9wQXV0bygpOyB9XG4gICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHByZXYgYmluZGluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgY2xpY2tQcmV2QmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuZWwuaGFzQ2xhc3MoJ2Rpc2FibGVkJykpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBpZiBhdXRvIHNob3cgaXMgcnVubmluZywgc3RvcCBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvICYmIHNsaWRlci5zZXR0aW5ncy5zdG9wQXV0b09uQ2xpY2spIHsgZWwuc3RvcEF1dG8oKTsgfVxuICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBzdGFydCBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1N0YXJ0QmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGVsLnN0YXJ0QXV0bygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBzdG9wIGJpbmRpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGNsaWNrU3RvcEJpbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlbC5zdG9wQXV0bygpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBwYWdlciBiaW5kaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSAoZXZlbnQpXG4gICAgICogIC0gRE9NIGV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjbGlja1BhZ2VyQmluZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYWdlckxpbmssIHBhZ2VySW5kZXg7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG8gc2hvdyBpcyBydW5uaW5nLCBzdG9wIGl0XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG8gICYmIHNsaWRlci5zZXR0aW5ncy5zdG9wQXV0b09uQ2xpY2spIHsgZWwuc3RvcEF1dG8oKTsgfVxuICAgICAgcGFnZXJMaW5rID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgaWYgKHBhZ2VyTGluay5hdHRyKCdkYXRhLXNsaWRlLWluZGV4JykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYWdlckluZGV4ID0gcGFyc2VJbnQocGFnZXJMaW5rLmF0dHIoJ2RhdGEtc2xpZGUtaW5kZXgnKSk7XG4gICAgICAgIC8vIGlmIGNsaWNrZWQgcGFnZXIgbGluayBpcyBub3QgYWN0aXZlLCBjb250aW51ZSB3aXRoIHRoZSBnb1RvU2xpZGUgY2FsbFxuICAgICAgICBpZiAocGFnZXJJbmRleCAhPT0gc2xpZGVyLmFjdGl2ZS5pbmRleCkgeyBlbC5nb1RvU2xpZGUocGFnZXJJbmRleCk7IH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcGFnZXIgbGlua3Mgd2l0aCBhbiBhY3RpdmUgY2xhc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZUluZGV4IChpbnQpXG4gICAgICogIC0gaW5kZXggb2Ygc2xpZGUgdG8gbWFrZSBhY3RpdmVcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlUGFnZXJBY3RpdmUgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG4gICAgICAvLyBpZiBcInNob3J0XCIgcGFnZXIgdHlwZVxuICAgICAgdmFyIGxlbiA9IHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7IC8vIG5iIG9mIGNoaWxkcmVuXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyVHlwZSA9PT0gJ3Nob3J0Jykge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyA+IDEpIHtcbiAgICAgICAgICBsZW4gPSBNYXRoLmNlaWwoc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAvIHNsaWRlci5zZXR0aW5ncy5tYXhTbGlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlci5wYWdlckVsLmh0bWwoKHNsaWRlSW5kZXggKyAxKSArIHNsaWRlci5zZXR0aW5ncy5wYWdlclNob3J0U2VwYXJhdG9yICsgbGVuKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIGFsbCBwYWdlciBhY3RpdmUgY2xhc3Nlc1xuICAgICAgc2xpZGVyLnBhZ2VyRWwuZmluZCgnYScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIC8vIGFwcGx5IHRoZSBhY3RpdmUgY2xhc3MgZm9yIGFsbCBwYWdlcnNcbiAgICAgIHNsaWRlci5wYWdlckVsLmVhY2goZnVuY3Rpb24oaSwgZWwpIHsgJChlbCkuZmluZCgnYScpLmVxKHNsaWRlSW5kZXgpLmFkZENsYXNzKCdhY3RpdmUnKTsgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIG5lZWRlZCBhY3Rpb25zIGFmdGVyIGEgc2xpZGUgdHJhbnNpdGlvblxuICAgICAqL1xuICAgIHZhciB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGUgbG9vcCBpcyB0cnVlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSAnJztcbiAgICAgICAgLy8gZmlyc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIG5ldyBwb3NpdGlvblxuICAgICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmVxKDApLnBvc2l0aW9uKCk7XG4gICAgICAgIC8vIGNhcm91c2VsLCBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gZ2V0UGFnZXJRdHkoKSAtIDEgJiYgc2xpZGVyLmNhcm91c2VsKSB7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEoKGdldFBhZ2VyUXR5KCkgLSAxKSAqIGdldE1vdmVCeSgpKS5wb3NpdGlvbigpO1xuICAgICAgICAvLyBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSkucG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJykgeyBzZXRQb3NpdGlvblByb3BlcnR5KC1wb3NpdGlvbi5sZWZ0LCAncmVzZXQnLCAwKTsgfVxuICAgICAgICAgIGVsc2UgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAndmVydGljYWwnKSB7IHNldFBvc2l0aW9uUHJvcGVydHkoLXBvc2l0aW9uLnRvcCwgJ3Jlc2V0JywgMCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZGVjbGFyZSB0aGF0IHRoZSB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlXG4gICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlO1xuICAgICAgLy8gb25TbGlkZUFmdGVyIGNhbGxiYWNrXG4gICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZUFmdGVyLmNhbGwoZWwsIHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuYWN0aXZlLmluZGV4KSwgc2xpZGVyLm9sZEluZGV4LCBzbGlkZXIuYWN0aXZlLmluZGV4KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYXV0byBjb250cm9scyBzdGF0ZSAoZWl0aGVyIGFjdGl2ZSwgb3IgY29tYmluZWQgc3dpdGNoKVxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXRlIChzdHJpbmcpIFwic3RhcnRcIiwgXCJzdG9wXCJcbiAgICAgKiAgLSB0aGUgbmV3IHN0YXRlIG9mIHRoZSBhdXRvIHNob3dcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlQXV0b0NvbnRyb2xzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgdHJ1ZSwgcmVwbGFjZSB0aGUgY3VycmVudCBjb250cm9sIHdpdGggdGhlIG5ldyBzdGF0ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHNDb21iaW5lKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuaHRtbChzbGlkZXIuY29udHJvbHNbc3RhdGVdKTtcbiAgICAgIC8vIGlmIGF1dG9Db250cm9sc0NvbWJpbmUgaXMgZmFsc2UsIGFwcGx5IHRoZSBcImFjdGl2ZVwiIGNsYXNzIHRvIHRoZSBhcHByb3ByaWF0ZSBjb250cm9sXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXIuY29udHJvbHMuYXV0b0VsLmZpbmQoJ2EnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5hdXRvRWwuZmluZCgnYTpub3QoLmJ4LScgKyBzdGF0ZSArICcpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBkaXJlY3Rpb24gY29udHJvbHMgKGNoZWNrcyBpZiBlaXRoZXIgc2hvdWxkIGJlIGhpZGRlbilcbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlRGlyZWN0aW9uQ29udHJvbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChnZXRQYWdlclF0eSgpID09PSAxKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5wcmV2LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLnNldHRpbmdzLmhpZGVDb250cm9sT25FbmQpIHtcbiAgICAgICAgLy8gaWYgZmlyc3Qgc2xpZGVcbiAgICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDApIHtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMucHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICBzbGlkZXIuY29udHJvbHMubmV4dC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gaWYgbGFzdCBzbGlkZVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IGdldFBhZ2VyUXR5KCkgLSAxKSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGlmIGFueSBzbGlkZSBpbiB0aGUgbWlkZGxlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgc2xpZGVyLmNvbnRyb2xzLm5leHQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXHQvKiBhdXRvIHN0YXJ0IGFuZCBzdG9wIGZ1bmN0aW9ucyAqL1xuXHR2YXIgd2luZG93Rm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7IGVsLnN0YXJ0QXV0bygpOyB9O1xuXHR2YXIgd2luZG93Qmx1ckhhbmRsZXIgPSBmdW5jdGlvbigpIHsgZWwuc3RvcEF1dG8oKTsgfTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgYXV0byBwcm9jZXNzXG4gICAgICovXG4gICAgdmFyIGluaXRBdXRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBpZiBhdXRvRGVsYXkgd2FzIHN1cHBsaWVkLCBsYXVuY2ggdGhlIGF1dG8gc2hvdyB1c2luZyBhIHNldFRpbWVvdXQoKSBjYWxsXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EZWxheSA+IDApIHtcbiAgICAgICAgc2V0VGltZW91dChlbC5zdGFydEF1dG8sIHNsaWRlci5zZXR0aW5ncy5hdXRvRGVsYXkpO1xuICAgICAgLy8gaWYgYXV0b0RlbGF5IHdhcyBub3Qgc3VwcGxpZWQsIHN0YXJ0IHRoZSBhdXRvIHNob3cgbm9ybWFsbHlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0YXJ0QXV0bygpO1xuXG4gICAgICAgIC8vYWRkIGZvY3VzIGFuZCBibHVyIGV2ZW50cyB0byBlbnN1cmUgaXRzIHJ1bm5pbmcgaWYgdGltZW91dCBnZXRzIHBhdXNlZFxuICAgICAgICAkKHdpbmRvdykuZm9jdXMod2luZG93Rm9jdXNIYW5kbGVyKS5ibHVyKHdpbmRvd0JsdXJIYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIGF1dG9Ib3ZlciBpcyByZXF1ZXN0ZWRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0hvdmVyKSB7XG4gICAgICAgIC8vIG9uIGVsIGhvdmVyXG4gICAgICAgIGVsLmhvdmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIGlmIHRoZSBhdXRvIHNob3cgaXMgY3VycmVudGx5IHBsYXlpbmcgKGhhcyBhbiBhY3RpdmUgaW50ZXJ2YWwpXG4gICAgICAgICAgaWYgKHNsaWRlci5pbnRlcnZhbCkge1xuICAgICAgICAgICAgLy8gc3RvcCB0aGUgYXV0byBzaG93IGFuZCBwYXNzIHRydWUgYXJndW1lbnQgd2hpY2ggd2lsbCBwcmV2ZW50IGNvbnRyb2wgdXBkYXRlXG4gICAgICAgICAgICBlbC5zdG9wQXV0byh0cnVlKTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhdXRvUGF1c2VkIHZhbHVlIHdoaWNoIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVsYXRpdmUgXCJtb3VzZW91dFwiIGV2ZW50XG4gICAgICAgICAgICBzbGlkZXIuYXV0b1BhdXNlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyBpZiB0aGUgYXV0b1BhdXNlZCB2YWx1ZSB3YXMgY3JlYXRlZCBiZSB0aGUgcHJpb3IgXCJtb3VzZW92ZXJcIiBldmVudFxuICAgICAgICAgIGlmIChzbGlkZXIuYXV0b1BhdXNlZCkge1xuICAgICAgICAgICAgLy8gc3RhcnQgdGhlIGF1dG8gc2hvdyBhbmQgcGFzcyB0cnVlIGFyZ3VtZW50IHdoaWNoIHdpbGwgcHJldmVudCBjb250cm9sIHVwZGF0ZVxuICAgICAgICAgICAgZWwuc3RhcnRBdXRvKHRydWUpO1xuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGF1dG9QYXVzZWQgdmFsdWVcbiAgICAgICAgICAgIHNsaWRlci5hdXRvUGF1c2VkID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgdGlja2VyIHByb2Nlc3NcbiAgICAgKi9cbiAgICB2YXIgaW5pdFRpY2tlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSAwLFxuICAgICAgcG9zaXRpb24sIHRyYW5zZm9ybSwgdmFsdWUsIGlkeCwgcmF0aW8sIHByb3BlcnR5LCBuZXdTcGVlZCwgdG90YWxEaW1lbnM7XG4gICAgICAvLyBpZiBhdXRvRGlyZWN0aW9uIGlzIFwibmV4dFwiLCBhcHBlbmQgYSBjbG9uZSBvZiB0aGUgZW50aXJlIHNsaWRlclxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgZWwuYXBwZW5kKHNsaWRlci5jaGlsZHJlbi5jbG9uZSgpLmFkZENsYXNzKCdieC1jbG9uZScpKTtcbiAgICAgIC8vIGlmIGF1dG9EaXJlY3Rpb24gaXMgXCJwcmV2XCIsIHByZXBlbmQgYSBjbG9uZSBvZiB0aGUgZW50aXJlIHNsaWRlciwgYW5kIHNldCB0aGUgbGVmdCBwb3NpdGlvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucHJlcGVuZChzbGlkZXIuY2hpbGRyZW4uY2xvbmUoKS5hZGRDbGFzcygnYngtY2xvbmUnKSk7XG4gICAgICAgIHBvc2l0aW9uID0gc2xpZGVyLmNoaWxkcmVuLmZpcnN0KCkucG9zaXRpb24oKTtcbiAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtcG9zaXRpb24ubGVmdCA6IC1wb3NpdGlvbi50b3A7XG4gICAgICB9XG4gICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHN0YXJ0UG9zaXRpb24sICdyZXNldCcsIDApO1xuICAgICAgLy8gZG8gbm90IGFsbG93IGNvbnRyb2xzIGluIHRpY2tlciBtb2RlXG4gICAgICBzbGlkZXIuc2V0dGluZ3MucGFnZXIgPSBmYWxzZTtcbiAgICAgIHNsaWRlci5zZXR0aW5ncy5jb250cm9scyA9IGZhbHNlO1xuICAgICAgc2xpZGVyLnNldHRpbmdzLmF1dG9Db250cm9scyA9IGZhbHNlO1xuICAgICAgLy8gaWYgYXV0b0hvdmVyIGlzIHJlcXVlc3RlZFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy50aWNrZXJIb3Zlcikge1xuICAgICAgICBpZiAoc2xpZGVyLnVzaW5nQ1NTKSB7XG4gICAgICAgICAgaWR4ID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IDQgOiA1O1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5ob3ZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IGVsLmNzcygnLScgKyBzbGlkZXIuY3NzUHJlZml4ICsgJy10cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh0cmFuc2Zvcm0uc3BsaXQoJywnKVtpZHhdKTtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdG90YWxEaW1lbnMgPSAwO1xuICAgICAgICAgICAgc2xpZGVyLmNoaWxkcmVuLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgdG90YWxEaW1lbnMgKz0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICQodGhpcykub3V0ZXJXaWR0aCh0cnVlKSA6ICQodGhpcykub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc3BlZWQgcmF0aW8gKHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBuZXcgc3BlZWQgdG8gZmluaXNoIHRoZSBwYXVzZWQgYW5pbWF0aW9uKVxuICAgICAgICAgICAgcmF0aW8gPSBzbGlkZXIuc2V0dGluZ3Muc3BlZWQgLyB0b3RhbERpbWVucztcbiAgICAgICAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm9wZXJ0eSB0byB1c2VcbiAgICAgICAgICAgIHByb3BlcnR5ID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBuZXcgc3BlZWRcbiAgICAgICAgICAgIG5ld1NwZWVkID0gcmF0aW8gKiAodG90YWxEaW1lbnMgLSAoTWF0aC5hYnMocGFyc2VJbnQodmFsdWUpKSkpO1xuICAgICAgICAgICAgdGlja2VyTG9vcChuZXdTcGVlZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gb24gZWwgaG92ZXJcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuaG92ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbC5zdG9wKCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHRvdGFsIHdpZHRoIG9mIGNoaWxkcmVuICh1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgc3BlZWQgcmF0aW8pXG4gICAgICAgICAgICB0b3RhbERpbWVucyA9IDA7XG4gICAgICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICB0b3RhbERpbWVucyArPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJCh0aGlzKS5vdXRlcldpZHRoKHRydWUpIDogJCh0aGlzKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzcGVlZCByYXRpbyAodXNlZCB0byBkZXRlcm1pbmUgdGhlIG5ldyBzcGVlZCB0byBmaW5pc2ggdGhlIHBhdXNlZCBhbmltYXRpb24pXG4gICAgICAgICAgICByYXRpbyA9IHNsaWRlci5zZXR0aW5ncy5zcGVlZCAvIHRvdGFsRGltZW5zO1xuICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3BlcnR5IHRvIHVzZVxuICAgICAgICAgICAgcHJvcGVydHkgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIG5ldyBzcGVlZFxuICAgICAgICAgICAgbmV3U3BlZWQgPSByYXRpbyAqICh0b3RhbERpbWVucyAtIChNYXRoLmFicyhwYXJzZUludChlbC5jc3MocHJvcGVydHkpKSkpKTtcbiAgICAgICAgICAgIHRpY2tlckxvb3AobmV3U3BlZWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBzdGFydCB0aGUgdGlja2VyIGxvb3BcbiAgICAgIHRpY2tlckxvb3AoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUnVucyBhIGNvbnRpbnVvdXMgbG9vcCwgbmV3cyB0aWNrZXItc3R5bGVcbiAgICAgKi9cbiAgICB2YXIgdGlja2VyTG9vcCA9IGZ1bmN0aW9uKHJlc3VtZVNwZWVkKSB7XG4gICAgICB2YXIgc3BlZWQgPSByZXN1bWVTcGVlZCA/IHJlc3VtZVNwZWVkIDogc2xpZGVyLnNldHRpbmdzLnNwZWVkLFxuICAgICAgcG9zaXRpb24gPSB7bGVmdDogMCwgdG9wOiAwfSxcbiAgICAgIHJlc2V0ID0ge2xlZnQ6IDAsIHRvcDogMH0sXG4gICAgICBhbmltYXRlUHJvcGVydHksIHJlc2V0VmFsdWUsIHBhcmFtcztcblxuICAgICAgLy8gaWYgXCJuZXh0XCIgYW5pbWF0ZSBsZWZ0IHBvc2l0aW9uIHRvIGxhc3QgY2hpbGQsIHRoZW4gcmVzZXQgbGVmdCB0byAwXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmF1dG9EaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBwb3NpdGlvbiA9IGVsLmZpbmQoJy5ieC1jbG9uZScpLmZpcnN0KCkucG9zaXRpb24oKTtcbiAgICAgIC8vIGlmIFwicHJldlwiIGFuaW1hdGUgbGVmdCBwb3NpdGlvbiB0byAwLCB0aGVuIHJlc2V0IGxlZnQgdG8gZmlyc3Qgbm9uLWNsb25lIGNoaWxkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNldCA9IHNsaWRlci5jaGlsZHJlbi5maXJzdCgpLnBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgICBhbmltYXRlUHJvcGVydHkgPSBzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnID8gLXBvc2l0aW9uLmxlZnQgOiAtcG9zaXRpb24udG9wO1xuICAgICAgcmVzZXRWYWx1ZSA9IHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcgPyAtcmVzZXQubGVmdCA6IC1yZXNldC50b3A7XG4gICAgICBwYXJhbXMgPSB7cmVzZXRWYWx1ZTogcmVzZXRWYWx1ZX07XG4gICAgICBzZXRQb3NpdGlvblByb3BlcnR5KGFuaW1hdGVQcm9wZXJ0eSwgJ3RpY2tlcicsIHNwZWVkLCBwYXJhbXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBlbCBpcyBvbiBzY3JlZW5cbiAgICAgKi9cbiAgICB2YXIgaXNPblNjcmVlbiA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgd2luID0gJCh3aW5kb3cpLFxuICAgICAgdmlld3BvcnQgPSB7XG4gICAgICAgIHRvcDogd2luLnNjcm9sbFRvcCgpLFxuICAgICAgICBsZWZ0OiB3aW4uc2Nyb2xsTGVmdCgpXG4gICAgICB9LFxuICAgICAgYm91bmRzID0gZWwub2Zmc2V0KCk7XG5cbiAgICAgIHZpZXdwb3J0LnJpZ2h0ID0gdmlld3BvcnQubGVmdCArIHdpbi53aWR0aCgpO1xuICAgICAgdmlld3BvcnQuYm90dG9tID0gdmlld3BvcnQudG9wICsgd2luLmhlaWdodCgpO1xuICAgICAgYm91bmRzLnJpZ2h0ID0gYm91bmRzLmxlZnQgKyBlbC5vdXRlcldpZHRoKCk7XG4gICAgICBib3VuZHMuYm90dG9tID0gYm91bmRzLnRvcCArIGVsLm91dGVySGVpZ2h0KCk7XG5cbiAgICAgIHJldHVybiAoISh2aWV3cG9ydC5yaWdodCA8IGJvdW5kcy5sZWZ0IHx8IHZpZXdwb3J0LmxlZnQgPiBib3VuZHMucmlnaHQgfHwgdmlld3BvcnQuYm90dG9tIDwgYm91bmRzLnRvcCB8fCB2aWV3cG9ydC50b3AgPiBib3VuZHMuYm90dG9tKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGtleWJvYXJkIGV2ZW50c1xuICAgICAqL1xuICAgIHZhciBrZXlQcmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBhY3RpdmVFbGVtZW50VGFnID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICB0YWdGaWx0ZXJzID0gJ2lucHV0fHRleHRhcmVhJyxcbiAgICAgIHAgPSBuZXcgUmVnRXhwKGFjdGl2ZUVsZW1lbnRUYWcsWydpJ10pLFxuICAgICAgcmVzdWx0ID0gcC5leGVjKHRhZ0ZpbHRlcnMpO1xuXG4gICAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgaXNPblNjcmVlbihlbCkpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHtcbiAgICAgICAgICBjbGlja05leHRCaW5kKGUpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM3KSB7XG4gICAgICAgICAgY2xpY2tQcmV2QmluZChlKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdG91Y2ggZXZlbnRzXG4gICAgICovXG4gICAgdmFyIGluaXRUb3VjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW5pdGlhbGl6ZSBvYmplY3QgdG8gY29udGFpbiBhbGwgdG91Y2ggdmFsdWVzXG4gICAgICBzbGlkZXIudG91Y2ggPSB7XG4gICAgICAgIHN0YXJ0OiB7eDogMCwgeTogMH0sXG4gICAgICAgIGVuZDoge3g6IDAsIHk6IDB9XG4gICAgICB9O1xuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCd0b3VjaHN0YXJ0IE1TUG9pbnRlckRvd24gcG9pbnRlcmRvd24nLCBvblRvdWNoU3RhcnQpO1xuXG4gICAgICAvL2ZvciBicm93c2VycyB0aGF0IGhhdmUgaW1wbGVtZW50ZWQgcG9pbnRlciBldmVudHMgYW5kIGZpcmUgYSBjbGljayBhZnRlclxuICAgICAgLy9ldmVyeSBwb2ludGVydXAgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHBvaW50ZXJ1cCBpcyBvbiBzYW1lIHNjcmVlbiBsb2NhdGlvbiBhcyBwb2ludGVyZG93biBvciBub3RcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vbignY2xpY2snLCAnLmJ4c2xpZGVyIGEnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuaGFzQ2xhc3MoJ2NsaWNrLWRpc2FibGVkJykpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgc2xpZGVyLnZpZXdwb3J0LnJlbW92ZUNsYXNzKCdjbGljay1kaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgXCJ0b3VjaHN0YXJ0XCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIHdhdGNoIG9ubHkgZm9yIGxlZnQgbW91c2UsIHRvdWNoIGNvbnRhY3QgYW5kIHBlbiBjb250YWN0XG4gICAgICAvLyB0b3VjaHN0YXJ0IGV2ZW50IG9iamVjdCBkb2VzbmB0IGhhdmUgYnV0dG9uIHByb3BlcnR5XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgJiYgZS5idXR0b24gIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy9kaXNhYmxlIHNsaWRlciBjb250cm9scyB3aGlsZSB1c2VyIGlzIGludGVyYWN0aW5nIHdpdGggc2xpZGVzIHRvIGF2b2lkIHNsaWRlciBmcmVlemUgdGhhdCBoYXBwZW5zIG9uIHRvdWNoIGRldmljZXMgd2hlbiBhIHNsaWRlIHN3aXBlIGhhcHBlbnMgaW1tZWRpYXRlbHkgYWZ0ZXIgaW50ZXJhY3Rpbmcgd2l0aCBzbGlkZXIgY29udHJvbHNcbiAgICAgIHNsaWRlci5jb250cm9scy5lbC5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblxuICAgICAgaWYgKHNsaWRlci53b3JraW5nKSB7XG4gICAgICAgIHNsaWRlci5jb250cm9scy5lbC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2hlbiB0b3VjaCBzdGFydHNcbiAgICAgICAgc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zID0gZWwucG9zaXRpb24oKTtcbiAgICAgICAgdmFyIG9yaWcgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgIHRvdWNoUG9pbnRzID0gKHR5cGVvZiBvcmlnLmNoYW5nZWRUb3VjaGVzICE9PSAndW5kZWZpbmVkJykgPyBvcmlnLmNoYW5nZWRUb3VjaGVzIDogW29yaWddO1xuXHRcdHZhciBjaHJvbWVQb2ludGVyRXZlbnRzID0gdHlwZW9mIFBvaW50ZXJFdmVudCA9PT0gJ2Z1bmN0aW9uJzsgXG5cdFx0aWYgKGNocm9tZVBvaW50ZXJFdmVudHMpIHsgXG5cdFx0XHRpZiAob3JpZy5wb2ludGVySWQgPT09IHVuZGVmaW5lZCkgeyBcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBcblx0XHR9XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3RhcnRpbmcgdG91Y2ggeCwgeSBjb29yZGluYXRlc1xuICAgICAgICBzbGlkZXIudG91Y2guc3RhcnQueCA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYO1xuICAgICAgICBzbGlkZXIudG91Y2guc3RhcnQueSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VZO1xuXG4gICAgICAgIGlmIChzbGlkZXIudmlld3BvcnQuZ2V0KDApLnNldFBvaW50ZXJDYXB0dXJlKSB7XG4gICAgICAgICAgc2xpZGVyLnBvaW50ZXJJZCA9IG9yaWcucG9pbnRlcklkO1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5nZXQoMCkuc2V0UG9pbnRlckNhcHR1cmUoc2xpZGVyLnBvaW50ZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RvcmUgb3JpZ2luYWwgZXZlbnQgZGF0YSBmb3IgY2xpY2sgZml4YXRpb25cbiAgICAgICAgc2xpZGVyLm9yaWdpbmFsQ2xpY2tUYXJnZXQgPSBvcmlnLm9yaWdpbmFsVGFyZ2V0IHx8IG9yaWcudGFyZ2V0O1xuICAgICAgICBzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbiA9IG9yaWcuYnV0dG9uO1xuICAgICAgICBzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbnMgPSBvcmlnLmJ1dHRvbnM7XG4gICAgICAgIHNsaWRlci5vcmlnaW5hbEV2ZW50VHlwZSA9IG9yaWcudHlwZTtcbiAgICAgICAgLy8gYXQgdGhpcyBtb21lbnQgd2UgZG9uYHQga25vdyB3aGF0IGl0IGlzIGNsaWNrIG9yIHN3aXBlXG4gICAgICAgIHNsaWRlci5oYXNNb3ZlID0gZmFsc2U7XG4gICAgICAgIC8vIG9uIGEgXCJ0b3VjaG1vdmVcIiBldmVudCB0byB0aGUgdmlld3BvcnRcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9uKCd0b3VjaG1vdmUgTVNQb2ludGVyTW92ZSBwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICAgICAgLy8gb24gYSBcInRvdWNoZW5kXCIgZXZlbnQgdG8gdGhlIHZpZXdwb3J0XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5vbigndG91Y2hlbmQgTVNQb2ludGVyVXAgcG9pbnRlcnVwJywgb25Ub3VjaEVuZCk7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5vbignTVNQb2ludGVyQ2FuY2VsIHBvaW50ZXJjYW5jZWwnLCBvblBvaW50ZXJDYW5jZWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWwgUG9pbnRlciBmb3IgV2luZG93cyBQaG9uZVxuICAgICAqXG4gICAgICogQHBhcmFtIGUgKGV2ZW50KVxuICAgICAqICAtIERPTSBldmVudCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgb25Qb2ludGVyQ2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLyogb25Qb2ludGVyQ2FuY2VsIGhhbmRsZXIgaXMgbmVlZGVkIHRvIGRlYWwgd2l0aCBzaXR1YXRpb25zIHdoZW4gYSB0b3VjaGVuZFxuICAgICAgZG9lc24ndCBmaXJlIGFmdGVyIGEgdG91Y2hzdGFydCAodGhpcyBoYXBwZW5zIG9uIHdpbmRvd3MgcGhvbmVzIG9ubHkpICovXG4gICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy5sZWZ0LCAncmVzZXQnLCAwKTtcblxuICAgICAgLy9yZW1vdmUgaGFuZGxlcnNcbiAgICAgIHNsaWRlci5jb250cm9scy5lbC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vZmYoJ01TUG9pbnRlckNhbmNlbCBwb2ludGVyY2FuY2VsJywgb25Qb2ludGVyQ2FuY2VsKTtcbiAgICAgIHNsaWRlci52aWV3cG9ydC5vZmYoJ3RvdWNobW92ZSBNU1BvaW50ZXJNb3ZlIHBvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgICAgc2xpZGVyLnZpZXdwb3J0Lm9mZigndG91Y2hlbmQgTVNQb2ludGVyVXAgcG9pbnRlcnVwJywgb25Ub3VjaEVuZCk7XG4gICAgICBpZiAoc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5yZWxlYXNlUG9pbnRlckNhcHR1cmUpIHtcbiAgICAgICAgc2xpZGVyLnZpZXdwb3J0LmdldCgwKS5yZWxlYXNlUG9pbnRlckNhcHR1cmUoc2xpZGVyLnBvaW50ZXJJZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIFwidG91Y2htb3ZlXCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hNb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG9yaWcgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICB0b3VjaFBvaW50cyA9ICh0eXBlb2Ygb3JpZy5jaGFuZ2VkVG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpID8gb3JpZy5jaGFuZ2VkVG91Y2hlcyA6IFtvcmlnXSxcbiAgICAgIC8vIGlmIHNjcm9sbGluZyBvbiB5IGF4aXMsIGRvIG5vdCBwcmV2ZW50IGRlZmF1bHRcbiAgICAgIHhNb3ZlbWVudCA9IE1hdGguYWJzKHRvdWNoUG9pbnRzWzBdLnBhZ2VYIC0gc2xpZGVyLnRvdWNoLnN0YXJ0LngpLFxuICAgICAgeU1vdmVtZW50ID0gTWF0aC5hYnModG91Y2hQb2ludHNbMF0ucGFnZVkgLSBzbGlkZXIudG91Y2guc3RhcnQueSksXG4gICAgICB2YWx1ZSA9IDAsXG4gICAgICBjaGFuZ2UgPSAwO1xuICAgICAgLy8gdGhpcyBpcyBzd2lwZVxuICAgICAgc2xpZGVyLmhhc01vdmUgPSB0cnVlO1xuXG4gICAgICAvLyB4IGF4aXMgc3dpcGVcbiAgICAgIGlmICgoeE1vdmVtZW50ICogMykgPiB5TW92ZW1lbnQgJiYgc2xpZGVyLnNldHRpbmdzLnByZXZlbnREZWZhdWx0U3dpcGVYKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIHkgYXhpcyBzd2lwZVxuICAgICAgfSBlbHNlIGlmICgoeU1vdmVtZW50ICogMykgPiB4TW92ZW1lbnQgJiYgc2xpZGVyLnNldHRpbmdzLnByZXZlbnREZWZhdWx0U3dpcGVZKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlICE9PSAnZmFkZScgJiYgc2xpZGVyLnNldHRpbmdzLm9uZVRvT25lVG91Y2gpIHtcbiAgICAgICAgLy8gaWYgaG9yaXpvbnRhbCwgZHJhZyBhbG9uZyB4IGF4aXNcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBjaGFuZ2UgPSB0b3VjaFBvaW50c1swXS5wYWdlWCAtIHNsaWRlci50b3VjaC5zdGFydC54O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQgKyBjaGFuZ2U7XG4gICAgICAgIC8vIGlmIHZlcnRpY2FsLCBkcmFnIGFsb25nIHkgYXhpc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZSA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VZIC0gc2xpZGVyLnRvdWNoLnN0YXJ0Lnk7XG4gICAgICAgICAgdmFsdWUgPSBzbGlkZXIudG91Y2gub3JpZ2luYWxQb3MudG9wICsgY2hhbmdlO1xuICAgICAgICB9XG4gICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBcInRvdWNoZW5kXCJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlIChldmVudClcbiAgICAgKiAgLSBET00gZXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIG9uVG91Y2hFbmQgPSBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzbGlkZXIudmlld3BvcnQub2ZmKCd0b3VjaG1vdmUgTVNQb2ludGVyTW92ZSBwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICAgIC8vZW5hYmxlIHNsaWRlciBjb250cm9scyBhcyBzb29uIGFzIHVzZXIgc3RvcHMgaW50ZXJhY2luZyB3aXRoIHNsaWRlc1xuICAgICAgc2xpZGVyLmNvbnRyb2xzLmVsLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgdmFyIG9yaWcgICAgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICB0b3VjaFBvaW50cyA9ICh0eXBlb2Ygb3JpZy5jaGFuZ2VkVG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpID8gb3JpZy5jaGFuZ2VkVG91Y2hlcyA6IFtvcmlnXSxcbiAgICAgIHZhbHVlICAgICAgID0gMCxcbiAgICAgIGRpc3RhbmNlICAgID0gMDtcbiAgICAgIC8vIHJlY29yZCBlbmQgeCwgeSBwb3NpdGlvbnNcbiAgICAgIHNsaWRlci50b3VjaC5lbmQueCA9IHRvdWNoUG9pbnRzWzBdLnBhZ2VYO1xuICAgICAgc2xpZGVyLnRvdWNoLmVuZC55ID0gdG91Y2hQb2ludHNbMF0ucGFnZVk7XG4gICAgICAvLyBpZiBmYWRlIG1vZGUsIGNoZWNrIGlmIGFic29sdXRlIHggZGlzdGFuY2UgY2xlYXJzIHRoZSB0aHJlc2hvbGRcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2ZhZGUnKSB7XG4gICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoc2xpZGVyLnRvdWNoLnN0YXJ0LnggLSBzbGlkZXIudG91Y2guZW5kLngpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPj0gc2xpZGVyLnNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XG4gICAgICAgICAgaWYgKHNsaWRlci50b3VjaC5zdGFydC54ID4gc2xpZGVyLnRvdWNoLmVuZC54KSB7XG4gICAgICAgICAgICBlbC5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwuc3RvcEF1dG8oKTtcbiAgICAgICAgfVxuICAgICAgLy8gbm90IGZhZGUgbW9kZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIGRpc3RhbmNlIGFuZCBlbCdzIGFuaW1hdGUgcHJvcGVydHlcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5tb2RlID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBkaXN0YW5jZSA9IHNsaWRlci50b3VjaC5lbmQueCAtIHNsaWRlci50b3VjaC5zdGFydC54O1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnRvdWNoLm9yaWdpbmFsUG9zLmxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlzdGFuY2UgPSBzbGlkZXIudG91Y2guZW5kLnkgLSBzbGlkZXIudG91Y2guc3RhcnQueTtcbiAgICAgICAgICB2YWx1ZSA9IHNsaWRlci50b3VjaC5vcmlnaW5hbFBvcy50b3A7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbm90IGluZmluaXRlIGxvb3AgYW5kIGZpcnN0IC8gbGFzdCBzbGlkZSwgZG8gbm90IGF0dGVtcHQgYSBzbGlkZSB0cmFuc2l0aW9uXG4gICAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiAoKHNsaWRlci5hY3RpdmUuaW5kZXggPT09IDAgJiYgZGlzdGFuY2UgPiAwKSB8fCAoc2xpZGVyLmFjdGl2ZS5sYXN0ICYmIGRpc3RhbmNlIDwgMCkpKSB7XG4gICAgICAgICAgc2V0UG9zaXRpb25Qcm9wZXJ0eSh2YWx1ZSwgJ3Jlc2V0JywgMjAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjaGVjayBpZiBkaXN0YW5jZSBjbGVhcnMgdGhyZXNob2xkXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA+PSBzbGlkZXIuc2V0dGluZ3Muc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IDApIHtcbiAgICAgICAgICAgICAgZWwuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWwuZ29Ub1ByZXZTbGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuc3RvcEF1dG8oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZWwuYW5pbWF0ZShwcm9wZXJ0eSwgMjAwKTtcbiAgICAgICAgICAgIHNldFBvc2l0aW9uUHJvcGVydHkodmFsdWUsICdyZXNldCcsIDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbGlkZXIudmlld3BvcnQub2ZmKCd0b3VjaGVuZCBNU1BvaW50ZXJVcCBwb2ludGVydXAnLCBvblRvdWNoRW5kKTtcblxuICAgICAgaWYgKHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKSB7XG4gICAgICAgIHNsaWRlci52aWV3cG9ydC5nZXQoMCkucmVsZWFzZVBvaW50ZXJDYXB0dXJlKHNsaWRlci5wb2ludGVySWQpO1xuICAgICAgfVxuICAgICAgLy8gaWYgc2xpZGVyIGhhZCBzd2lwZSB3aXRoIGxlZnQgbW91c2UsIHRvdWNoIGNvbnRhY3QgYW5kIHBlbiBjb250YWN0XG4gICAgICBpZiAoc2xpZGVyLmhhc01vdmUgPT09IGZhbHNlICYmIChzbGlkZXIub3JpZ2luYWxDbGlja0J1dHRvbiA9PT0gMCB8fCBzbGlkZXIub3JpZ2luYWxFdmVudFR5cGUgPT09ICd0b3VjaHN0YXJ0JykpIHtcbiAgICAgICAgLy8gdHJpZ2dlciBjbGljayBldmVudCAoZml4IGZvciBGaXJlZm94NTkgYW5kIFBvaW50ZXJFdmVudCBzdGFuZGFyZCBjb21wYXRpYmlsaXR5KVxuICAgICAgICAkKHNsaWRlci5vcmlnaW5hbENsaWNrVGFyZ2V0KS50cmlnZ2VyKHtcbiAgICAgICAgICB0eXBlOiAnY2xpY2snLFxuICAgICAgICAgIGJ1dHRvbjogc2xpZGVyLm9yaWdpbmFsQ2xpY2tCdXR0b24sXG4gICAgICAgICAgYnV0dG9uczogc2xpZGVyLm9yaWdpbmFsQ2xpY2tCdXR0b25zXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBXaW5kb3cgcmVzaXplIGV2ZW50IGNhbGxiYWNrXG4gICAgICovXG4gICAgdmFyIHJlc2l6ZVdpbmRvdyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHNsaWRlciBpc24ndCBpbml0aWFsaXplZC5cbiAgICAgIGlmICghc2xpZGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgLy8gRGVsYXkgaWYgc2xpZGVyIHdvcmtpbmcuXG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcpIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQocmVzaXplV2luZG93LCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBnZXQgdGhlIG5ldyB3aW5kb3cgZGltZW5zIChhZ2FpbiwgdGhhbmsgeW91IElFKVxuICAgICAgICB2YXIgd2luZG93V2lkdGhOZXcgPSAkKHdpbmRvdykud2lkdGgoKSxcbiAgICAgICAgd2luZG93SGVpZ2h0TmV3ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCBpdCBpcyBhIHRydWUgd2luZG93IHJlc2l6ZVxuICAgICAgICAvLyAqd2UgbXVzdCBjaGVjayB0aGlzIGJlY2F1c2Ugb3VyIGRpbm9zYXVyIGZyaWVuZCBJRSBmaXJlcyBhIHdpbmRvdyByZXNpemUgZXZlbnQgd2hlbiBjZXJ0YWluIERPTSBlbGVtZW50c1xuICAgICAgICAvLyBhcmUgcmVzaXplZC4gQ2FuIHlvdSBqdXN0IGRpZSBhbHJlYWR5PypcbiAgICAgICAgaWYgKHdpbmRvd1dpZHRoICE9PSB3aW5kb3dXaWR0aE5ldyB8fCB3aW5kb3dIZWlnaHQgIT09IHdpbmRvd0hlaWdodE5ldykge1xuICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHdpbmRvdyBkaW1lbnNcbiAgICAgICAgICB3aW5kb3dXaWR0aCA9IHdpbmRvd1dpZHRoTmV3O1xuICAgICAgICAgIHdpbmRvd0hlaWdodCA9IHdpbmRvd0hlaWdodE5ldztcbiAgICAgICAgICAvLyB1cGRhdGUgYWxsIGR5bmFtaWMgZWxlbWVudHNcbiAgICAgICAgICBlbC5yZWRyYXdTbGlkZXIoKTtcbiAgICAgICAgICAvLyBDYWxsIHVzZXIgcmVzaXplIGhhbmRsZXJcbiAgICAgICAgICBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZXJSZXNpemUuY2FsbChlbCwgc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBhcmlhLWhpZGRlbj10cnVlIGF0dHJpYnV0ZSB0byBlYWNoIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGFydFZpc2libGVJbmRleCAoaW50KVxuICAgICAqICAtIHRoZSBmaXJzdCB2aXNpYmxlIGVsZW1lbnQncyBpbmRleFxuICAgICAqL1xuICAgIHZhciBhcHBseUFyaWFIaWRkZW5BdHRyaWJ1dGVzID0gZnVuY3Rpb24oc3RhcnRWaXNpYmxlSW5kZXgpIHtcbiAgICAgIHZhciBudW1iZXJPZlNsaWRlc1Nob3dpbmcgPSBnZXROdW1iZXJTbGlkZXNTaG93aW5nKCk7XG4gICAgICAvLyBvbmx5IGFwcGx5IGF0dHJpYnV0ZXMgaWYgdGhlIHNldHRpbmcgaXMgZW5hYmxlZCBhbmQgbm90IGluIHRpY2tlciBtb2RlXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4gJiYgIXNsaWRlci5zZXR0aW5ncy50aWNrZXIpIHtcbiAgICAgICAgLy8gYWRkIGFyaWEtaGlkZGVuPXRydWUgdG8gYWxsIGVsZW1lbnRzXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIC8vIGdldCB0aGUgdmlzaWJsZSBlbGVtZW50cyBhbmQgY2hhbmdlIHRvIGFyaWEtaGlkZGVuPWZhbHNlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5zbGljZShzdGFydFZpc2libGVJbmRleCwgc3RhcnRWaXNpYmxlSW5kZXggKyBudW1iZXJPZlNsaWRlc1Nob3dpbmcpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5kZXggYWNjb3JkaW5nIHRvIHByZXNlbnQgcGFnZSByYW5nZVxuICAgICAqXG4gICAgICogQHBhcmFtIHNsaWRlT25kZXggKGludClcbiAgICAgKiAgLSB0aGUgZGVzaXJlZCBzbGlkZSBpbmRleFxuICAgICAqL1xuICAgIHZhciBzZXRTbGlkZUluZGV4ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuaW5maW5pdGVMb29wKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFBhZ2VyUXR5KCkgLSAxO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgLy93ZSBkb24ndCBnbyB0byB1bmRlZmluZWQgc2xpZGVzXG4gICAgICAgICAgcmV0dXJuIHNsaWRlci5hY3RpdmUuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIC8vIGlmIHNsaWRlSW5kZXggaXMgZ3JlYXRlciB0aGFuIGNoaWxkcmVuIGxlbmd0aCwgc2V0IGFjdGl2ZSBpbmRleCB0byAwICh0aGlzIGhhcHBlbnMgZHVyaW5nIGluZmluaXRlIGxvb3ApXG4gICAgICB9IGVsc2UgaWYgKHNsaWRlSW5kZXggPj0gZ2V0UGFnZXJRdHkoKSkge1xuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vd2UgZG9uJ3QgbW92ZSB0byB1bmRlZmluZWQgcGFnZXNcbiAgICAgICAgICByZXR1cm4gc2xpZGVyLmFjdGl2ZS5pbmRleDtcbiAgICAgICAgfVxuICAgICAgLy8gc2V0IGFjdGl2ZSBpbmRleCB0byByZXF1ZXN0ZWQgc2xpZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzbGlkZUluZGV4O1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAqID0gUFVCTElDIEZVTkNUSU9OU1xuICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBzbGlkZSB0cmFuc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgc2xpZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzbGlkZUluZGV4IChpbnQpXG4gICAgICogIC0gdGhlIGRlc3RpbmF0aW9uIHNsaWRlJ3MgaW5kZXggKHplcm8tYmFzZWQpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIChzdHJpbmcpXG4gICAgICogIC0gSU5URVJOQUwgVVNFIE9OTFkgLSB0aGUgZGlyZWN0aW9uIG9mIHRyYXZlbCAoXCJwcmV2XCIgLyBcIm5leHRcIilcbiAgICAgKi9cbiAgICBlbC5nb1RvU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICAgIC8vIG9uU2xpZGVCZWZvcmUsIG9uU2xpZGVOZXh0LCBvblNsaWRlUHJldiBjYWxsYmFja3NcbiAgICAgIC8vIEFsbG93IHRyYW5zaXRpb24gY2FuY2VsaW5nIGJhc2VkIG9uIHJldHVybmVkIHZhbHVlXG4gICAgICB2YXIgcGVyZm9ybVRyYW5zaXRpb24gPSB0cnVlLFxuICAgICAgbW92ZUJ5ID0gMCxcbiAgICAgIHBvc2l0aW9uID0ge2xlZnQ6IDAsIHRvcDogMH0sXG4gICAgICBsYXN0Q2hpbGQgPSBudWxsLFxuICAgICAgbGFzdFNob3dpbmdJbmRleCwgZXEsIHZhbHVlLCByZXF1ZXN0RWw7XG4gICAgICAvLyBzdG9yZSB0aGUgb2xkIGluZGV4XG4gICAgICBzbGlkZXIub2xkSW5kZXggPSBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgICAgLy9zZXQgbmV3IGluZGV4XG4gICAgICBzbGlkZXIuYWN0aXZlLmluZGV4ID0gc2V0U2xpZGVJbmRleChzbGlkZUluZGV4KTtcblxuICAgICAgLy8gaWYgcGx1Z2luIGlzIGN1cnJlbnRseSBpbiBtb3Rpb24sIGlnbm9yZSByZXF1ZXN0XG4gICAgICBpZiAoc2xpZGVyLndvcmtpbmcgfHwgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gc2xpZGVyLm9sZEluZGV4KSB7IHJldHVybjsgfVxuICAgICAgLy8gZGVjbGFyZSB0aGF0IHBsdWdpbiBpcyBpbiBtb3Rpb25cbiAgICAgIHNsaWRlci53b3JraW5nID0gdHJ1ZTtcblxuICAgICAgcGVyZm9ybVRyYW5zaXRpb24gPSBzbGlkZXIuc2V0dGluZ3Mub25TbGlkZUJlZm9yZS5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG5cbiAgICAgIC8vIElmIHRyYW5zaXRpb25zIGNhbmNlbGVkLCByZXNldCBhbmQgcmV0dXJuXG4gICAgICBpZiAodHlwZW9mIChwZXJmb3JtVHJhbnNpdGlvbikgIT09ICd1bmRlZmluZWQnICYmICFwZXJmb3JtVHJhbnNpdGlvbikge1xuICAgICAgICBzbGlkZXIuYWN0aXZlLmluZGV4ID0gc2xpZGVyLm9sZEluZGV4OyAvLyByZXN0b3JlIG9sZCBpbmRleFxuICAgICAgICBzbGlkZXIud29ya2luZyA9IGZhbHNlOyAvLyBpcyBub3QgaW4gbW90aW9uXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIC8vIFByZXZlbnQgY2FuY2VsaW5nIGluIGZ1dHVyZSBmdW5jdGlvbnMgb3IgbGFjayB0aGVyZS1vZiBmcm9tIG5lZ2F0aW5nIHByZXZpb3VzIGNvbW1hbmRzIHRvIGNhbmNlbFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5vblNsaWRlTmV4dC5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCkpIHtcbiAgICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIC8vIFByZXZlbnQgY2FuY2VsaW5nIGluIGZ1dHVyZSBmdW5jdGlvbnMgb3IgbGFjayB0aGVyZS1vZiBmcm9tIG5lZ2F0aW5nIHByZXZpb3VzIGNvbW1hbmRzIHRvIGNhbmNlbFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5vblNsaWRlUHJldi5jYWxsKGVsLCBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCksIHNsaWRlci5vbGRJbmRleCwgc2xpZGVyLmFjdGl2ZS5pbmRleCkpIHtcbiAgICAgICAgICBwZXJmb3JtVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGNoZWNrIGlmIGxhc3Qgc2xpZGVcbiAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IHNsaWRlci5hY3RpdmUuaW5kZXggPj0gZ2V0UGFnZXJRdHkoKSAtIDE7XG4gICAgICAvLyB1cGRhdGUgdGhlIHBhZ2VyIHdpdGggYWN0aXZlIGNsYXNzXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLnBhZ2VyIHx8IHNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkgeyB1cGRhdGVQYWdlckFjdGl2ZShzbGlkZXIuYWN0aXZlLmluZGV4KTsgfVxuICAgICAgLy8gLy8gY2hlY2sgZm9yIGRpcmVjdGlvbiBjb250cm9sIHVwZGF0ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5jb250cm9scykgeyB1cGRhdGVEaXJlY3Rpb25Db250cm9scygpOyB9XG4gICAgICAvLyBpZiBzbGlkZXIgaXMgc2V0IHRvIG1vZGU6IFwiZmFkZVwiXG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdmYWRlJykge1xuICAgICAgICAvLyBpZiBhZGFwdGl2ZUhlaWdodCBpcyB0cnVlIGFuZCBuZXh0IGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50IGhlaWdodCwgYW5pbWF0ZSB0byB0aGUgbmV3IGhlaWdodFxuICAgICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0ICYmIHNsaWRlci52aWV3cG9ydC5oZWlnaHQoKSAhPT0gZ2V0Vmlld3BvcnRIZWlnaHQoKSkge1xuICAgICAgICAgIHNsaWRlci52aWV3cG9ydC5hbmltYXRlKHtoZWlnaHQ6IGdldFZpZXdwb3J0SGVpZ2h0KCl9LCBzbGlkZXIuc2V0dGluZ3MuYWRhcHRpdmVIZWlnaHRTcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmFkZSBvdXQgdGhlIHZpc2libGUgY2hpbGQgYW5kIHJlc2V0IGl0cyB6LWluZGV4IHZhbHVlXG4gICAgICAgIHNsaWRlci5jaGlsZHJlbi5maWx0ZXIoJzp2aXNpYmxlJykuZmFkZU91dChzbGlkZXIuc2V0dGluZ3Muc3BlZWQpLmNzcyh7ekluZGV4OiAwfSk7XG4gICAgICAgIC8vIGZhZGUgaW4gdGhlIG5ld2x5IHJlcXVlc3RlZCBzbGlkZVxuICAgICAgICBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCkuY3NzKCd6SW5kZXgnLCBzbGlkZXIuc2V0dGluZ3Muc2xpZGVaSW5kZXggKyAxKS5mYWRlSW4oc2xpZGVyLnNldHRpbmdzLnNwZWVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkKHRoaXMpLmNzcygnekluZGV4Jywgc2xpZGVyLnNldHRpbmdzLnNsaWRlWkluZGV4KTtcbiAgICAgICAgICB1cGRhdGVBZnRlclNsaWRlVHJhbnNpdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgIC8vIHNsaWRlciBtb2RlIGlzIG5vdCBcImZhZGVcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgYWRhcHRpdmVIZWlnaHQgaXMgdHJ1ZSBhbmQgbmV4dCBoZWlnaHQgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudCBoZWlnaHQsIGFuaW1hdGUgdG8gdGhlIG5ldyBoZWlnaHRcbiAgICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hZGFwdGl2ZUhlaWdodCAmJiBzbGlkZXIudmlld3BvcnQuaGVpZ2h0KCkgIT09IGdldFZpZXdwb3J0SGVpZ2h0KCkpIHtcbiAgICAgICAgICBzbGlkZXIudmlld3BvcnQuYW5pbWF0ZSh7aGVpZ2h0OiBnZXRWaWV3cG9ydEhlaWdodCgpfSwgc2xpZGVyLnNldHRpbmdzLmFkYXB0aXZlSGVpZ2h0U3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGNhcm91c2VsIGFuZCBub3QgaW5maW5pdGUgbG9vcFxuICAgICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmNhcm91c2VsICYmIHNsaWRlci5hY3RpdmUubGFzdCkge1xuICAgICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MubW9kZSA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICAvLyBnZXQgdGhlIGxhc3QgY2hpbGQgcG9zaXRpb25cbiAgICAgICAgICAgIGxhc3RDaGlsZCA9IHNsaWRlci5jaGlsZHJlbi5lcShzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGFzdCBzbGlkZVxuICAgICAgICAgICAgbW92ZUJ5ID0gc2xpZGVyLnZpZXdwb3J0LndpZHRoKCkgLSBsYXN0Q2hpbGQub3V0ZXJXaWR0aCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBnZXQgbGFzdCBzaG93aW5nIGluZGV4IHBvc2l0aW9uXG4gICAgICAgICAgICBsYXN0U2hvd2luZ0luZGV4ID0gc2xpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIHNsaWRlci5zZXR0aW5ncy5taW5TbGlkZXM7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHNsaWRlci5jaGlsZHJlbi5lcShsYXN0U2hvd2luZ0luZGV4KS5wb3NpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBob3Jpem9udGFsIGNhcm91c2VsLCBnb2luZyBwcmV2aW91cyB3aGlsZSBvbiBmaXJzdCBzbGlkZSAoaW5maW5pdGVMb29wIG1vZGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVyLmNhcm91c2VsICYmIHNsaWRlci5hY3RpdmUubGFzdCAmJiBkaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjaGlsZCBwb3NpdGlvblxuICAgICAgICAgIGVxID0gc2xpZGVyLnNldHRpbmdzLm1vdmVTbGlkZXMgPT09IDEgPyBzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzIC0gZ2V0TW92ZUJ5KCkgOiAoKGdldFBhZ2VyUXR5KCkgLSAxKSAqIGdldE1vdmVCeSgpKSAtIChzbGlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gc2xpZGVyLnNldHRpbmdzLm1heFNsaWRlcyk7XG4gICAgICAgICAgbGFzdENoaWxkID0gZWwuY2hpbGRyZW4oJy5ieC1jbG9uZScpLmVxKGVxKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGxhc3RDaGlsZC5wb3NpdGlvbigpO1xuICAgICAgICAvLyBpZiBpbmZpbml0ZSBsb29wIGFuZCBcIk5leHRcIiBpcyBjbGlja2VkIG9uIHRoZSBsYXN0IHNsaWRlXG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIC8vIGdldCB0aGUgbGFzdCBjbG9uZSBwb3NpdGlvblxuICAgICAgICAgIHBvc2l0aW9uID0gZWwuZmluZCgnPiAuYngtY2xvbmUnKS5lcShzbGlkZXIuc2V0dGluZ3MubWF4U2xpZGVzKS5wb3NpdGlvbigpO1xuICAgICAgICAgIHNsaWRlci5hY3RpdmUubGFzdCA9IGZhbHNlO1xuICAgICAgICAvLyBub3JtYWwgbm9uLXplcm8gcmVxdWVzdHNcbiAgICAgICAgfSBlbHNlIGlmIChzbGlkZUluZGV4ID49IDApIHtcbiAgICAgICAgICAvL3BhcnNlSW50IGlzIGFwcGxpZWQgdG8gYWxsb3cgZmxvYXRzIGZvciBzbGlkZXMvcGFnZVxuICAgICAgICAgIHJlcXVlc3RFbCA9IHNsaWRlSW5kZXggKiBwYXJzZUludChnZXRNb3ZlQnkoKSk7XG4gICAgICAgICAgcG9zaXRpb24gPSBzbGlkZXIuY2hpbGRyZW4uZXEocmVxdWVzdEVsKS5wb3NpdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogSWYgdGhlIHBvc2l0aW9uIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICogKGUuZy4gaWYgeW91IGRlc3Ryb3kgdGhlIHNsaWRlciBvbiBhIG5leHQgY2xpY2spLFxuICAgICAgICAgKiBpdCBkb2Vzbid0IHRocm93IGFuIGVycm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiAocG9zaXRpb24pICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gc2xpZGVyLnNldHRpbmdzLm1vZGUgPT09ICdob3Jpem9udGFsJyA/IC0ocG9zaXRpb24ubGVmdCAtIG1vdmVCeSkgOiAtcG9zaXRpb24udG9wO1xuICAgICAgICAgIC8vIHBsdWdpbiB2YWx1ZXMgdG8gYmUgYW5pbWF0ZWRcbiAgICAgICAgICBzZXRQb3NpdGlvblByb3BlcnR5KHZhbHVlLCAnc2xpZGUnLCBzbGlkZXIuc2V0dGluZ3Muc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlci53b3JraW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHsgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyhzbGlkZXIuYWN0aXZlLmluZGV4ICogZ2V0TW92ZUJ5KCkpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb25zIHRvIHRoZSBuZXh0IHNsaWRlIGluIHRoZSBzaG93XG4gICAgICovXG4gICAgZWwuZ29Ub05leHRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgaW5maW5pdGVMb29wIGlzIGZhbHNlIGFuZCBsYXN0IHBhZ2UgaXMgc2hvd2luZywgZGlzcmVnYXJkIGNhbGxcbiAgICAgIGlmICghc2xpZGVyLnNldHRpbmdzLmluZmluaXRlTG9vcCAmJiBzbGlkZXIuYWN0aXZlLmxhc3QpIHsgcmV0dXJuOyB9XG5cdCAgaWYgKHNsaWRlci53b3JraW5nID09PSB0cnVlKXsgcmV0dXJuIDt9XG4gICAgICB2YXIgcGFnZXJJbmRleCA9IHBhcnNlSW50KHNsaWRlci5hY3RpdmUuaW5kZXgpICsgMTtcbiAgICAgIGVsLmdvVG9TbGlkZShwYWdlckluZGV4LCAnbmV4dCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgcHJldiBzbGlkZSBpbiB0aGUgc2hvd1xuICAgICAqL1xuICAgIGVsLmdvVG9QcmV2U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIGluZmluaXRlTG9vcCBpcyBmYWxzZSBhbmQgbGFzdCBwYWdlIGlzIHNob3dpbmcsIGRpc3JlZ2FyZCBjYWxsXG4gICAgICBpZiAoIXNsaWRlci5zZXR0aW5ncy5pbmZpbml0ZUxvb3AgJiYgc2xpZGVyLmFjdGl2ZS5pbmRleCA9PT0gMCkgeyByZXR1cm47IH1cblx0ICBpZiAoc2xpZGVyLndvcmtpbmcgPT09IHRydWUpeyByZXR1cm4gO31cbiAgICAgIHZhciBwYWdlckluZGV4ID0gcGFyc2VJbnQoc2xpZGVyLmFjdGl2ZS5pbmRleCkgLSAxO1xuICAgICAgZWwuZ29Ub1NsaWRlKHBhZ2VySW5kZXgsICdwcmV2Jyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgYXV0byBzaG93XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJldmVudENvbnRyb2xVcGRhdGUgKGJvb2xlYW4pXG4gICAgICogIC0gaWYgdHJ1ZSwgYXV0byBjb250cm9scyBzdGF0ZSB3aWxsIG5vdCBiZSB1cGRhdGVkXG4gICAgICovXG4gICAgZWwuc3RhcnRBdXRvID0gZnVuY3Rpb24ocHJldmVudENvbnRyb2xVcGRhdGUpIHtcbiAgICAgIC8vIGlmIGFuIGludGVydmFsIGFscmVhZHkgZXhpc3RzLCBkaXNyZWdhcmQgY2FsbFxuICAgICAgaWYgKHNsaWRlci5pbnRlcnZhbCkgeyByZXR1cm47IH1cbiAgICAgIC8vIGNyZWF0ZSBhbiBpbnRlcnZhbFxuICAgICAgc2xpZGVyLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0RpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgZWwuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgc2xpZGVyLnNldHRpbmdzLnBhdXNlKTtcblx0ICAvL2FsbGJhY2sgZm9yIHdoZW4gdGhlIGF1dG8gcm90YXRlIHN0YXR1cyBjaGFuZ2VzXG5cdCAgc2xpZGVyLnNldHRpbmdzLm9uQXV0b0NoYW5nZS5jYWxsKGVsLCB0cnVlKTtcbiAgICAgIC8vIGlmIGF1dG8gY29udHJvbHMgYXJlIGRpc3BsYXllZCBhbmQgcHJldmVudENvbnRyb2xVcGRhdGUgaXMgbm90IHRydWVcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MuYXV0b0NvbnRyb2xzICYmIHByZXZlbnRDb250cm9sVXBkYXRlICE9PSB0cnVlKSB7IHVwZGF0ZUF1dG9Db250cm9scygnc3RvcCcpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBhdXRvIHNob3dcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcmV2ZW50Q29udHJvbFVwZGF0ZSAoYm9vbGVhbilcbiAgICAgKiAgLSBpZiB0cnVlLCBhdXRvIGNvbnRyb2xzIHN0YXRlIHdpbGwgbm90IGJlIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBlbC5zdG9wQXV0byA9IGZ1bmN0aW9uKHByZXZlbnRDb250cm9sVXBkYXRlKSB7XG4gICAgICAvLyBpZiBzbGlkZXIgaXMgYXV0byBwYXVzZWQsIGp1c3QgY2xlYXIgdGhhdCBzdGF0ZVxuICAgICAgaWYgKHNsaWRlci5hdXRvUGF1c2VkKSBzbGlkZXIuYXV0b1BhdXNlZCA9IGZhbHNlO1xuICAgICAgLy8gaWYgbm8gaW50ZXJ2YWwgZXhpc3RzLCBkaXNyZWdhcmQgY2FsbFxuICAgICAgaWYgKCFzbGlkZXIuaW50ZXJ2YWwpIHsgcmV0dXJuOyB9XG4gICAgICAvLyBjbGVhciB0aGUgaW50ZXJ2YWxcbiAgICAgIGNsZWFySW50ZXJ2YWwoc2xpZGVyLmludGVydmFsKTtcbiAgICAgIHNsaWRlci5pbnRlcnZhbCA9IG51bGw7XG5cdCAgLy9hbGxiYWNrIGZvciB3aGVuIHRoZSBhdXRvIHJvdGF0ZSBzdGF0dXMgY2hhbmdlc1xuXHQgIHNsaWRlci5zZXR0aW5ncy5vbkF1dG9DaGFuZ2UuY2FsbChlbCwgZmFsc2UpO1xuICAgICAgLy8gaWYgYXV0byBjb250cm9scyBhcmUgZGlzcGxheWVkIGFuZCBwcmV2ZW50Q29udHJvbFVwZGF0ZSBpcyBub3QgdHJ1ZVxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5hdXRvQ29udHJvbHMgJiYgcHJldmVudENvbnRyb2xVcGRhdGUgIT09IHRydWUpIHsgdXBkYXRlQXV0b0NvbnRyb2xzKCdzdGFydCcpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY3VycmVudCBzbGlkZSBpbmRleCAoemVyby1iYXNlZClcbiAgICAgKi9cbiAgICBlbC5nZXRDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuYWN0aXZlLmluZGV4O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnQgc2xpZGUgZWxlbWVudFxuICAgICAqL1xuICAgIGVsLmdldEN1cnJlbnRTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGlkZXIuY2hpbGRyZW4uZXEoc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzbGlkZSBlbGVtZW50XG4gICAgICogQHBhcmFtIGluZGV4IChpbnQpXG4gICAgICogIC0gVGhlIGluZGV4ICh6ZXJvLWJhc2VkKSBvZiB0aGUgZWxlbWVudCB5b3Ugd2FudCByZXR1cm5lZC5cbiAgICAgKi9cbiAgICBlbC5nZXRTbGlkZUVsZW1lbnQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5lcShpbmRleCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbnVtYmVyIG9mIHNsaWRlcyBpbiBzaG93XG4gICAgICovXG4gICAgZWwuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBzbGlkZXIud29ya2luZyB2YXJpYWJsZVxuICAgICAqL1xuICAgIGVsLmlzV29ya2luZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNsaWRlci53b3JraW5nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYWxsIGR5bmFtaWMgc2xpZGVyIGVsZW1lbnRzXG4gICAgICovXG4gICAgZWwucmVkcmF3U2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyByZXNpemUgYWxsIGNoaWxkcmVuIGluIHJhdGlvIHRvIG5ldyBzY3JlZW4gc2l6ZVxuICAgICAgc2xpZGVyLmNoaWxkcmVuLmFkZChlbC5maW5kKCcuYngtY2xvbmUnKSkub3V0ZXJXaWR0aChnZXRTbGlkZVdpZHRoKCkpO1xuICAgICAgLy8gYWRqdXN0IHRoZSBoZWlnaHRcbiAgICAgIHNsaWRlci52aWV3cG9ydC5jc3MoJ2hlaWdodCcsIGdldFZpZXdwb3J0SGVpZ2h0KCkpO1xuICAgICAgLy8gdXBkYXRlIHRoZSBzbGlkZSBwb3NpdGlvblxuICAgICAgaWYgKCFzbGlkZXIuc2V0dGluZ3MudGlja2VyKSB7IHNldFNsaWRlUG9zaXRpb24oKTsgfVxuICAgICAgLy8gaWYgYWN0aXZlLmxhc3Qgd2FzIHRydWUgYmVmb3JlIHRoZSBzY3JlZW4gcmVzaXplLCB3ZSB3YW50XG4gICAgICAvLyB0byBrZWVwIGl0IGxhc3Qgbm8gbWF0dGVyIHdoYXQgc2NyZWVuIHNpemUgd2UgZW5kIG9uXG4gICAgICBpZiAoc2xpZGVyLmFjdGl2ZS5sYXN0KSB7IHNsaWRlci5hY3RpdmUuaW5kZXggPSBnZXRQYWdlclF0eSgpIC0gMTsgfVxuICAgICAgLy8gaWYgdGhlIGFjdGl2ZSBpbmRleCAocGFnZSkgbm8gbG9uZ2VyIGV4aXN0cyBkdWUgdG8gdGhlIHJlc2l6ZSwgc2ltcGx5IHNldCB0aGUgaW5kZXggYXMgbGFzdFxuICAgICAgaWYgKHNsaWRlci5hY3RpdmUuaW5kZXggPj0gZ2V0UGFnZXJRdHkoKSkgeyBzbGlkZXIuYWN0aXZlLmxhc3QgPSB0cnVlOyB9XG4gICAgICAvLyBpZiBhIHBhZ2VyIGlzIGJlaW5nIGRpc3BsYXllZCBhbmQgYSBjdXN0b20gcGFnZXIgaXMgbm90IGJlaW5nIHVzZWQsIHVwZGF0ZSBpdFxuICAgICAgaWYgKHNsaWRlci5zZXR0aW5ncy5wYWdlciAmJiAhc2xpZGVyLnNldHRpbmdzLnBhZ2VyQ3VzdG9tKSB7XG4gICAgICAgIHBvcHVsYXRlUGFnZXIoKTtcbiAgICAgICAgdXBkYXRlUGFnZXJBY3RpdmUoc2xpZGVyLmFjdGl2ZS5pbmRleCk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmFyaWFIaWRkZW4pIHsgYXBwbHlBcmlhSGlkZGVuQXR0cmlidXRlcyhzbGlkZXIuYWN0aXZlLmluZGV4ICogZ2V0TW92ZUJ5KCkpOyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIHNsaWRlciAocmV2ZXJ0IGV2ZXJ5dGhpbmcgYmFjayB0byBvcmlnaW5hbCBzdGF0ZSlcbiAgICAgKi9cbiAgICBlbC5kZXN0cm95U2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBkb24ndCBkbyBhbnl0aGluZyBpZiBzbGlkZXIgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWRcbiAgICAgIGlmICghc2xpZGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgc2xpZGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAkKCcuYngtY2xvbmUnLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIHNsaWRlci5jaGlsZHJlbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ1N0eWxlJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQodGhpcykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoJCh0aGlzKS5kYXRhKCdvcmlnU3R5bGUnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdTdHlsZScpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQodGhpcykucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIH1cbiAgICAgICQodGhpcykudW53cmFwKCkudW53cmFwKCk7XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLmVsKSB7IHNsaWRlci5jb250cm9scy5lbC5yZW1vdmUoKTsgfVxuICAgICAgaWYgKHNsaWRlci5jb250cm9scy5uZXh0KSB7IHNsaWRlci5jb250cm9scy5uZXh0LnJlbW92ZSgpOyB9XG4gICAgICBpZiAoc2xpZGVyLmNvbnRyb2xzLnByZXYpIHsgc2xpZGVyLmNvbnRyb2xzLnByZXYucmVtb3ZlKCk7IH1cbiAgICAgIGlmIChzbGlkZXIucGFnZXJFbCAmJiBzbGlkZXIuc2V0dGluZ3MuY29udHJvbHMgJiYgIXNsaWRlci5zZXR0aW5ncy5wYWdlckN1c3RvbSkgeyBzbGlkZXIucGFnZXJFbC5yZW1vdmUoKTsgfVxuICAgICAgJCgnLmJ4LWNhcHRpb24nLCB0aGlzKS5yZW1vdmUoKTtcbiAgICAgIGlmIChzbGlkZXIuY29udHJvbHMuYXV0b0VsKSB7IHNsaWRlci5jb250cm9scy5hdXRvRWwucmVtb3ZlKCk7IH1cbiAgICAgIGNsZWFySW50ZXJ2YWwoc2xpZGVyLmludGVydmFsKTtcbiAgICAgIGlmIChzbGlkZXIuc2V0dGluZ3MucmVzcG9uc2l2ZSkgeyAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCByZXNpemVXaW5kb3cpOyB9XG4gICAgICBpZiAoc2xpZGVyLnNldHRpbmdzLmtleWJvYXJkRW5hYmxlZCkgeyAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24nLCBrZXlQcmVzcyk7IH1cbiAgICAgIC8vcmVtb3ZlIHNlbGYgcmVmZXJlbmNlIGluIGRhdGFcbiAgICAgICQodGhpcykucmVtb3ZlRGF0YSgnYnhTbGlkZXInKTtcblx0ICAvLyByZW1vdmUgZ2xvYmFsIHdpbmRvdyBoYW5kbGVyc1xuXHQgICQod2luZG93KS5vZmYoJ2JsdXInLCB3aW5kb3dCbHVySGFuZGxlcikub2ZmKCdmb2N1cycsIHdpbmRvd0ZvY3VzSGFuZGxlcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbG9hZCB0aGUgc2xpZGVyIChyZXZlcnQgYWxsIERPTSBjaGFuZ2VzLCBhbmQgcmUtaW5pdGlhbGl6ZSlcbiAgICAgKi9cbiAgICBlbC5yZWxvYWRTbGlkZXIgPSBmdW5jdGlvbihzZXR0aW5ncykge1xuICAgICAgaWYgKHNldHRpbmdzICE9PSB1bmRlZmluZWQpIHsgb3B0aW9ucyA9IHNldHRpbmdzOyB9XG4gICAgICBlbC5kZXN0cm95U2xpZGVyKCk7XG4gICAgICBpbml0KCk7XG4gICAgICAvL3N0b3JlIHJlZmVyZW5jZSB0byBzZWxmIGluIG9yZGVyIHRvIGFjY2VzcyBwdWJsaWMgZnVuY3Rpb25zIGxhdGVyXG4gICAgICAkKGVsKS5kYXRhKCdieFNsaWRlcicsIHRoaXMpO1xuICAgIH07XG5cbiAgICBpbml0KCk7XG5cbiAgICAkKGVsKS5kYXRhKCdieFNsaWRlcicsIHRoaXMpO1xuXG4gICAgLy8gcmV0dXJucyB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbn0pKGpRdWVyeSk7XG4iLCIvKiFcbiAqIGZhbmN5Qm94IC0galF1ZXJ5IFBsdWdpblxuICogdmVyc2lvbjogMi4xLjUgKEZyaSwgMTQgSnVuIDIwMTMpXG4gKiByZXF1aXJlcyBqUXVlcnkgdjEuNiBvciBsYXRlclxuICpcbiAqIEV4YW1wbGVzIGF0IGh0dHA6Ly9mYW5jeWFwcHMuY29tL2ZhbmN5Ym94L1xuICogTGljZW5zZTogd3d3LmZhbmN5YXBwcy5jb20vZmFuY3lib3gvI2xpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMiBKYW5pcyBTa2FybmVsaXMgLSBqYW5pc0BmYW5jeWFwcHMuY29tXG4gKlxuICovXG5cbjsoZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsICQsIHVuZGVmaW5lZCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgSCA9ICQoXCJodG1sXCIpLFxuXHRcdFcgPSAkKHdpbmRvdyksXG5cdFx0RCA9ICQoZG9jdW1lbnQpLFxuXHRcdEYgPSAkLmZhbmN5Ym94ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0Ri5vcGVuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9LFxuXHRcdElFID0gIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL21zaWUvaSksXG5cdFx0ZGlkVXBkYXRlXHQ9IG51bGwsXG5cdFx0aXNUb3VjaFx0XHQ9IGRvY3VtZW50LmNyZWF0ZVRvdWNoICE9PSB1bmRlZmluZWQsXG5cblx0XHRpc1F1ZXJ5XHQ9IGZ1bmN0aW9uKG9iaikge1xuXHRcdFx0cmV0dXJuIG9iaiAmJiBvYmouaGFzT3duUHJvcGVydHkgJiYgb2JqIGluc3RhbmNlb2YgJDtcblx0XHR9LFxuXHRcdGlzU3RyaW5nID0gZnVuY3Rpb24oc3RyKSB7XG5cdFx0XHRyZXR1cm4gc3RyICYmICQudHlwZShzdHIpID09PSBcInN0cmluZ1wiO1xuXHRcdH0sXG5cdFx0aXNQZXJjZW50YWdlID0gZnVuY3Rpb24oc3RyKSB7XG5cdFx0XHRyZXR1cm4gaXNTdHJpbmcoc3RyKSAmJiBzdHIuaW5kZXhPZignJScpID4gMDtcblx0XHR9LFxuXHRcdGlzU2Nyb2xsYWJsZSA9IGZ1bmN0aW9uKGVsKSB7XG5cdFx0XHRyZXR1cm4gKGVsICYmICEoZWwuc3R5bGUub3ZlcmZsb3cgJiYgZWwuc3R5bGUub3ZlcmZsb3cgPT09ICdoaWRkZW4nKSAmJiAoKGVsLmNsaWVudFdpZHRoICYmIGVsLnNjcm9sbFdpZHRoID4gZWwuY2xpZW50V2lkdGgpIHx8IChlbC5jbGllbnRIZWlnaHQgJiYgZWwuc2Nyb2xsSGVpZ2h0ID4gZWwuY2xpZW50SGVpZ2h0KSkpO1xuXHRcdH0sXG5cdFx0Z2V0U2NhbGFyID0gZnVuY3Rpb24ob3JpZywgZGltKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBwYXJzZUludChvcmlnLCAxMCkgfHwgMDtcblxuXHRcdFx0aWYgKGRpbSAmJiBpc1BlcmNlbnRhZ2Uob3JpZykpIHtcblx0XHRcdFx0dmFsdWUgPSBGLmdldFZpZXdwb3J0KClbIGRpbSBdIC8gMTAwICogdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBNYXRoLmNlaWwodmFsdWUpO1xuXHRcdH0sXG5cdFx0Z2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwgZGltKSB7XG5cdFx0XHRyZXR1cm4gZ2V0U2NhbGFyKHZhbHVlLCBkaW0pICsgJ3B4Jztcblx0XHR9O1xuXG5cdCQuZXh0ZW5kKEYsIHtcblx0XHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGZhbmN5Qm94XG5cdFx0dmVyc2lvbjogJzIuMS41JyxcblxuXHRcdGRlZmF1bHRzOiB7XG5cdFx0XHRwYWRkaW5nIDogMTUsXG5cdFx0XHRtYXJnaW4gIDogMjAsXG5cblx0XHRcdHdpZHRoICAgICA6IDgwMCxcblx0XHRcdGhlaWdodCAgICA6IDYwMCxcblx0XHRcdG1pbldpZHRoICA6IDEwMCxcblx0XHRcdG1pbkhlaWdodCA6IDEwMCxcblx0XHRcdG1heFdpZHRoICA6IDk5OTksXG5cdFx0XHRtYXhIZWlnaHQgOiA5OTk5LFxuXHRcdFx0cGl4ZWxSYXRpbzogMSwgLy8gU2V0IHRvIDIgZm9yIHJldGluYSBkaXNwbGF5IHN1cHBvcnRcblxuXHRcdFx0YXV0b1NpemUgICA6IHRydWUsXG5cdFx0XHRhdXRvSGVpZ2h0IDogZmFsc2UsXG5cdFx0XHRhdXRvV2lkdGggIDogZmFsc2UsXG5cblx0XHRcdGF1dG9SZXNpemUgIDogdHJ1ZSxcblx0XHRcdGF1dG9DZW50ZXIgIDogIWlzVG91Y2gsXG5cdFx0XHRmaXRUb1ZpZXcgICA6IHRydWUsXG5cdFx0XHRhc3BlY3RSYXRpbyA6IGZhbHNlLFxuXHRcdFx0dG9wUmF0aW8gICAgOiAwLjUsXG5cdFx0XHRsZWZ0UmF0aW8gICA6IDAuNSxcblxuXHRcdFx0c2Nyb2xsaW5nIDogJ2F1dG8nLCAvLyAnYXV0bycsICd5ZXMnIG9yICdubydcblx0XHRcdHdyYXBDU1MgICA6ICcnLFxuXG5cdFx0XHRhcnJvd3MgICAgIDogdHJ1ZSxcblx0XHRcdGNsb3NlQnRuICAgOiB0cnVlLFxuXHRcdFx0Y2xvc2VDbGljayA6IGZhbHNlLFxuXHRcdFx0bmV4dENsaWNrICA6IGZhbHNlLFxuXHRcdFx0bW91c2VXaGVlbCA6IHRydWUsXG5cdFx0XHRhdXRvUGxheSAgIDogZmFsc2UsXG5cdFx0XHRwbGF5U3BlZWQgIDogMzAwMCxcblx0XHRcdHByZWxvYWQgICAgOiAzLFxuXHRcdFx0bW9kYWwgICAgICA6IGZhbHNlLFxuXHRcdFx0bG9vcCAgICAgICA6IHRydWUsXG5cblx0XHRcdGFqYXggIDoge1xuXHRcdFx0XHRkYXRhVHlwZSA6ICdodG1sJyxcblx0XHRcdFx0aGVhZGVycyAgOiB7ICdYLWZhbmN5Qm94JzogdHJ1ZSB9XG5cdFx0XHR9LFxuXHRcdFx0aWZyYW1lIDoge1xuXHRcdFx0XHRzY3JvbGxpbmcgOiAnYXV0bycsXG5cdFx0XHRcdHByZWxvYWQgICA6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRzd2YgOiB7XG5cdFx0XHRcdHdtb2RlOiAndHJhbnNwYXJlbnQnLFxuXHRcdFx0XHRhbGxvd2Z1bGxzY3JlZW4gICA6ICd0cnVlJyxcblx0XHRcdFx0YWxsb3dzY3JpcHRhY2Nlc3MgOiAnYWx3YXlzJ1xuXHRcdFx0fSxcblxuXHRcdFx0a2V5cyAgOiB7XG5cdFx0XHRcdG5leHQgOiB7XG5cdFx0XHRcdFx0MTMgOiAnbGVmdCcsIC8vIGVudGVyXG5cdFx0XHRcdFx0MzQgOiAndXAnLCAgIC8vIHBhZ2UgZG93blxuXHRcdFx0XHRcdDM5IDogJ2xlZnQnLCAvLyByaWdodCBhcnJvd1xuXHRcdFx0XHRcdDQwIDogJ3VwJyAgICAvLyBkb3duIGFycm93XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHByZXYgOiB7XG5cdFx0XHRcdFx0OCAgOiAncmlnaHQnLCAgLy8gYmFja3NwYWNlXG5cdFx0XHRcdFx0MzMgOiAnZG93bicsICAgLy8gcGFnZSB1cFxuXHRcdFx0XHRcdDM3IDogJ3JpZ2h0JywgIC8vIGxlZnQgYXJyb3dcblx0XHRcdFx0XHQzOCA6ICdkb3duJyAgICAvLyB1cCBhcnJvd1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRjbG9zZSAgOiBbMjddLCAvLyBlc2NhcGUga2V5XG5cdFx0XHRcdHBsYXkgICA6IFszMl0sIC8vIHNwYWNlIC0gc3RhcnQvc3RvcCBzbGlkZXNob3dcblx0XHRcdFx0dG9nZ2xlIDogWzcwXSAgLy8gbGV0dGVyIFwiZlwiIC0gdG9nZ2xlIGZ1bGxzY3JlZW5cblx0XHRcdH0sXG5cblx0XHRcdGRpcmVjdGlvbiA6IHtcblx0XHRcdFx0bmV4dCA6ICdsZWZ0Jyxcblx0XHRcdFx0cHJldiA6ICdyaWdodCdcblx0XHRcdH0sXG5cblx0XHRcdHNjcm9sbE91dHNpZGUgIDogdHJ1ZSxcblxuXHRcdFx0Ly8gT3ZlcnJpZGUgc29tZSBwcm9wZXJ0aWVzXG5cdFx0XHRpbmRleCAgIDogMCxcblx0XHRcdHR5cGUgICAgOiBudWxsLFxuXHRcdFx0aHJlZiAgICA6IG51bGwsXG5cdFx0XHRjb250ZW50IDogbnVsbCxcblx0XHRcdHRpdGxlICAgOiBudWxsLFxuXG5cdFx0XHQvLyBIVE1MIHRlbXBsYXRlc1xuXHRcdFx0dHBsOiB7XG5cdFx0XHRcdHdyYXAgICAgIDogJzxkaXYgY2xhc3M9XCJmYW5jeWJveC13cmFwXCIgdGFiSW5kZXg9XCItMVwiPjxkaXYgY2xhc3M9XCJmYW5jeWJveC1za2luXCI+PGRpdiBjbGFzcz1cImZhbmN5Ym94LW91dGVyXCI+PGRpdiBjbGFzcz1cImZhbmN5Ym94LWlubmVyXCI+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+Jyxcblx0XHRcdFx0aW1hZ2UgICAgOiAnPGltZyBjbGFzcz1cImZhbmN5Ym94LWltYWdlXCIgc3JjPVwie2hyZWZ9XCIgYWx0PVwiXCIgLz4nLFxuXHRcdFx0XHRpZnJhbWUgICA6ICc8aWZyYW1lIGlkPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIG5hbWU9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgY2xhc3M9XCJmYW5jeWJveC1pZnJhbWVcIiBmcmFtZWJvcmRlcj1cIjBcIiB2c3BhY2U9XCIwXCIgaHNwYWNlPVwiMFwiIHdlYmtpdEFsbG93RnVsbFNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dGdWxsU2NyZWVuJyArIChJRSA/ICcgYWxsb3d0cmFuc3BhcmVuY3k9XCJ0cnVlXCInIDogJycpICsgJz48L2lmcmFtZT4nLFxuXHRcdFx0XHRlcnJvciAgICA6ICc8cCBjbGFzcz1cImZhbmN5Ym94LWVycm9yXCI+VGhlIHJlcXVlc3RlZCBjb250ZW50IGNhbm5vdCBiZSBsb2FkZWQuPGJyLz5QbGVhc2UgdHJ5IGFnYWluIGxhdGVyLjwvcD4nLFxuXHRcdFx0XHRjbG9zZUJ0biA6ICc8YSB0aXRsZT1cIkNsb3NlXCIgY2xhc3M9XCJmYW5jeWJveC1pdGVtIGZhbmN5Ym94LWNsb3NlXCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPjwvYT4nLFxuXHRcdFx0XHRuZXh0ICAgICA6ICc8YSB0aXRsZT1cIk5leHRcIiBjbGFzcz1cImZhbmN5Ym94LW5hdiBmYW5jeWJveC1uZXh0XCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPjxzcGFuPjwvc3Bhbj48L2E+Jyxcblx0XHRcdFx0cHJldiAgICAgOiAnPGEgdGl0bGU9XCJQcmV2aW91c1wiIGNsYXNzPVwiZmFuY3lib3gtbmF2IGZhbmN5Ym94LXByZXZcIiBocmVmPVwiamF2YXNjcmlwdDo7XCI+PHNwYW4+PC9zcGFuPjwvYT4nLFxuXHRcdFx0XHRsb2FkaW5nICA6ICc8ZGl2IGlkPVwiZmFuY3lib3gtbG9hZGluZ1wiPjxkaXY+PC9kaXY+PC9kaXY+J1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUHJvcGVydGllcyBmb3IgZWFjaCBhbmltYXRpb24gdHlwZVxuXHRcdFx0Ly8gT3BlbmluZyBmYW5jeUJveFxuXHRcdFx0b3BlbkVmZmVjdCAgOiAnZmFkZScsIC8vICdlbGFzdGljJywgJ2ZhZGUnIG9yICdub25lJ1xuXHRcdFx0b3BlblNwZWVkICAgOiAyNTAsXG5cdFx0XHRvcGVuRWFzaW5nICA6ICdzd2luZycsXG5cdFx0XHRvcGVuT3BhY2l0eSA6IHRydWUsXG5cdFx0XHRvcGVuTWV0aG9kICA6ICd6b29tSW4nLFxuXG5cdFx0XHQvLyBDbG9zaW5nIGZhbmN5Qm94XG5cdFx0XHRjbG9zZUVmZmVjdCAgOiAnZmFkZScsIC8vICdlbGFzdGljJywgJ2ZhZGUnIG9yICdub25lJ1xuXHRcdFx0Y2xvc2VTcGVlZCAgIDogMjUwLFxuXHRcdFx0Y2xvc2VFYXNpbmcgIDogJ3N3aW5nJyxcblx0XHRcdGNsb3NlT3BhY2l0eSA6IHRydWUsXG5cdFx0XHRjbG9zZU1ldGhvZCAgOiAnem9vbU91dCcsXG5cblx0XHRcdC8vIENoYW5naW5nIG5leHQgZ2FsbGVyeSBpdGVtXG5cdFx0XHRuZXh0RWZmZWN0IDogJ2VsYXN0aWMnLCAvLyAnZWxhc3RpYycsICdmYWRlJyBvciAnbm9uZSdcblx0XHRcdG5leHRTcGVlZCAgOiAyNTAsXG5cdFx0XHRuZXh0RWFzaW5nIDogJ3N3aW5nJyxcblx0XHRcdG5leHRNZXRob2QgOiAnY2hhbmdlSW4nLFxuXG5cdFx0XHQvLyBDaGFuZ2luZyBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1cblx0XHRcdHByZXZFZmZlY3QgOiAnZWxhc3RpYycsIC8vICdlbGFzdGljJywgJ2ZhZGUnIG9yICdub25lJ1xuXHRcdFx0cHJldlNwZWVkICA6IDI1MCxcblx0XHRcdHByZXZFYXNpbmcgOiAnc3dpbmcnLFxuXHRcdFx0cHJldk1ldGhvZCA6ICdjaGFuZ2VPdXQnLFxuXG5cdFx0XHQvLyBFbmFibGUgZGVmYXVsdCBoZWxwZXJzXG5cdFx0XHRoZWxwZXJzIDoge1xuXHRcdFx0XHRvdmVybGF5IDogdHJ1ZSxcblx0XHRcdFx0dGl0bGUgICA6IHRydWVcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGxiYWNrc1xuXHRcdFx0b25DYW5jZWwgICAgIDogJC5ub29wLCAvLyBJZiBjYW5jZWxpbmdcblx0XHRcdGJlZm9yZUxvYWQgICA6ICQubm9vcCwgLy8gQmVmb3JlIGxvYWRpbmdcblx0XHRcdGFmdGVyTG9hZCAgICA6ICQubm9vcCwgLy8gQWZ0ZXIgbG9hZGluZ1xuXHRcdFx0YmVmb3JlU2hvdyAgIDogJC5ub29wLCAvLyBCZWZvcmUgY2hhbmdpbmcgaW4gY3VycmVudCBpdGVtXG5cdFx0XHRhZnRlclNob3cgICAgOiAkLm5vb3AsIC8vIEFmdGVyIG9wZW5pbmdcblx0XHRcdGJlZm9yZUNoYW5nZSA6ICQubm9vcCwgLy8gQmVmb3JlIGNoYW5naW5nIGdhbGxlcnkgaXRlbVxuXHRcdFx0YmVmb3JlQ2xvc2UgIDogJC5ub29wLCAvLyBCZWZvcmUgY2xvc2luZ1xuXHRcdFx0YWZ0ZXJDbG9zZSAgIDogJC5ub29wICAvLyBBZnRlciBjbG9zaW5nXG5cdFx0fSxcblxuXHRcdC8vQ3VycmVudCBzdGF0ZVxuXHRcdGdyb3VwICAgIDoge30sIC8vIFNlbGVjdGVkIGdyb3VwXG5cdFx0b3B0cyAgICAgOiB7fSwgLy8gR3JvdXAgb3B0aW9uc1xuXHRcdHByZXZpb3VzIDogbnVsbCwgIC8vIFByZXZpb3VzIGVsZW1lbnRcblx0XHRjb21pbmcgICA6IG51bGwsICAvLyBFbGVtZW50IGJlaW5nIGxvYWRlZFxuXHRcdGN1cnJlbnQgIDogbnVsbCwgIC8vIEN1cnJlbnRseSBsb2FkZWQgZWxlbWVudFxuXHRcdGlzQWN0aXZlIDogZmFsc2UsIC8vIElzIGFjdGl2YXRlZFxuXHRcdGlzT3BlbiAgIDogZmFsc2UsIC8vIElzIGN1cnJlbnRseSBvcGVuXG5cdFx0aXNPcGVuZWQgOiBmYWxzZSwgLy8gSGF2ZSBiZWVuIGZ1bGx5IG9wZW5lZCBhdCBsZWFzdCBvbmNlXG5cblx0XHR3cmFwICA6IG51bGwsXG5cdFx0c2tpbiAgOiBudWxsLFxuXHRcdG91dGVyIDogbnVsbCxcblx0XHRpbm5lciA6IG51bGwsXG5cblx0XHRwbGF5ZXIgOiB7XG5cdFx0XHR0aW1lciAgICA6IG51bGwsXG5cdFx0XHRpc0FjdGl2ZSA6IGZhbHNlXG5cdFx0fSxcblxuXHRcdC8vIExvYWRlcnNcblx0XHRhamF4TG9hZCAgIDogbnVsbCxcblx0XHRpbWdQcmVsb2FkIDogbnVsbCxcblxuXHRcdC8vIFNvbWUgY29sbGVjdGlvbnNcblx0XHR0cmFuc2l0aW9ucyA6IHt9LFxuXHRcdGhlbHBlcnMgICAgIDoge30sXG5cblx0XHQvKlxuXHRcdCAqXHRTdGF0aWMgbWV0aG9kc1xuXHRcdCAqL1xuXG5cdFx0b3BlbjogZnVuY3Rpb24gKGdyb3VwLCBvcHRzKSB7XG5cdFx0XHRpZiAoIWdyb3VwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCEkLmlzUGxhaW5PYmplY3Qob3B0cykpIHtcblx0XHRcdFx0b3B0cyA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbG9zZSBpZiBhbHJlYWR5IGFjdGl2ZVxuXHRcdFx0aWYgKGZhbHNlID09PSBGLmNsb3NlKHRydWUpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTm9ybWFsaXplIGdyb3VwXG5cdFx0XHRpZiAoISQuaXNBcnJheShncm91cCkpIHtcblx0XHRcdFx0Z3JvdXAgPSBpc1F1ZXJ5KGdyb3VwKSA/ICQoZ3JvdXApLmdldCgpIDogW2dyb3VwXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVjaGVjayBpZiB0aGUgdHlwZSBvZiBlYWNoIGVsZW1lbnQgaXMgYG9iamVjdGAgYW5kIHNldCBjb250ZW50IHR5cGUgKGltYWdlLCBhamF4LCBldGMpXG5cdFx0XHQkLmVhY2goZ3JvdXAsIGZ1bmN0aW9uKGksIGVsZW1lbnQpIHtcblx0XHRcdFx0dmFyIG9iaiA9IHt9LFxuXHRcdFx0XHRcdGhyZWYsXG5cdFx0XHRcdFx0dGl0bGUsXG5cdFx0XHRcdFx0Y29udGVudCxcblx0XHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRcdHJleixcblx0XHRcdFx0XHRocmVmUGFydHMsXG5cdFx0XHRcdFx0c2VsZWN0b3I7XG5cblx0XHRcdFx0aWYgKCQudHlwZShlbGVtZW50KSA9PT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRcdC8vIENoZWNrIGlmIGlzIERPTSBlbGVtZW50XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQubm9kZVR5cGUpIHtcblx0XHRcdFx0XHRcdGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChpc1F1ZXJ5KGVsZW1lbnQpKSB7XG5cdFx0XHRcdFx0XHRvYmogPSB7XG5cdFx0XHRcdFx0XHRcdGhyZWYgICAgOiBlbGVtZW50LmRhdGEoJ2ZhbmN5Ym94LWhyZWYnKSB8fCBlbGVtZW50LmF0dHIoJ2hyZWYnKSxcblx0XHRcdFx0XHRcdFx0dGl0bGUgICA6ICQoJzxkaXYvPicpLnRleHQoIGVsZW1lbnQuZGF0YSgnZmFuY3lib3gtdGl0bGUnKSB8fCBlbGVtZW50LmF0dHIoJ3RpdGxlJykgfHwgJycgKS5odG1sKCksXG5cdFx0XHRcdFx0XHRcdGlzRG9tICAgOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRlbGVtZW50IDogZWxlbWVudFxuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0aWYgKCQubWV0YWRhdGEpIHtcblx0XHRcdFx0XHRcdFx0JC5leHRlbmQodHJ1ZSwgb2JqLCBlbGVtZW50Lm1ldGFkYXRhKCkpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG9iaiA9IGVsZW1lbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aHJlZiAgPSBvcHRzLmhyZWYgIHx8IG9iai5ocmVmIHx8IChpc1N0cmluZyhlbGVtZW50KSA/IGVsZW1lbnQgOiBudWxsKTtcblx0XHRcdFx0dGl0bGUgPSBvcHRzLnRpdGxlICE9PSB1bmRlZmluZWQgPyBvcHRzLnRpdGxlIDogb2JqLnRpdGxlIHx8ICcnO1xuXG5cdFx0XHRcdGNvbnRlbnQgPSBvcHRzLmNvbnRlbnQgfHwgb2JqLmNvbnRlbnQ7XG5cdFx0XHRcdHR5cGUgICAgPSBjb250ZW50ID8gJ2h0bWwnIDogKG9wdHMudHlwZSAgfHwgb2JqLnR5cGUpO1xuXG5cdFx0XHRcdGlmICghdHlwZSAmJiBvYmouaXNEb20pIHtcblx0XHRcdFx0XHR0eXBlID0gZWxlbWVudC5kYXRhKCdmYW5jeWJveC10eXBlJyk7XG5cblx0XHRcdFx0XHRpZiAoIXR5cGUpIHtcblx0XHRcdFx0XHRcdHJleiAgPSBlbGVtZW50LnByb3AoJ2NsYXNzJykubWF0Y2goL2ZhbmN5Ym94XFwuKFxcdyspLyk7XG5cdFx0XHRcdFx0XHR0eXBlID0gcmV6ID8gcmV6WzFdIDogbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaXNTdHJpbmcoaHJlZikpIHtcblx0XHRcdFx0XHQvLyBUcnkgdG8gZ3Vlc3MgdGhlIGNvbnRlbnQgdHlwZVxuXHRcdFx0XHRcdGlmICghdHlwZSkge1xuXHRcdFx0XHRcdFx0aWYgKEYuaXNJbWFnZShocmVmKSkge1xuXHRcdFx0XHRcdFx0XHR0eXBlID0gJ2ltYWdlJztcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChGLmlzU1dGKGhyZWYpKSB7XG5cdFx0XHRcdFx0XHRcdHR5cGUgPSAnc3dmJztcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChocmVmLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG5cdFx0XHRcdFx0XHRcdHR5cGUgPSAnaW5saW5lJztcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuXHRcdFx0XHRcdFx0XHR0eXBlICAgID0gJ2h0bWwnO1xuXHRcdFx0XHRcdFx0XHRjb250ZW50ID0gZWxlbWVudDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTcGxpdCB1cmwgaW50byB0d28gcGllY2VzIHdpdGggc291cmNlIHVybCBhbmQgY29udGVudCBzZWxlY3RvciwgZS5nLFxuXHRcdFx0XHRcdC8vIFwiL215cGFnZS5odG1sICNteV9pZFwiIHdpbGwgbG9hZCBcIi9teXBhZ2UuaHRtbFwiIGFuZCBkaXNwbGF5IGVsZW1lbnQgaGF2aW5nIGlkIFwibXlfaWRcIlxuXHRcdFx0XHRcdGlmICh0eXBlID09PSAnYWpheCcpIHtcblx0XHRcdFx0XHRcdGhyZWZQYXJ0cyA9IGhyZWYuc3BsaXQoL1xccysvLCAyKTtcblx0XHRcdFx0XHRcdGhyZWYgICAgICA9IGhyZWZQYXJ0cy5zaGlmdCgpO1xuXHRcdFx0XHRcdFx0c2VsZWN0b3IgID0gaHJlZlBhcnRzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFjb250ZW50KSB7XG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09ICdpbmxpbmUnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaHJlZikge1xuXHRcdFx0XHRcdFx0XHRjb250ZW50ID0gJCggaXNTdHJpbmcoaHJlZikgPyBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSA6IGhyZWYgKTsgLy9zdHJpcCBmb3IgaWU3XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAob2JqLmlzRG9tKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRlbnQgPSBlbGVtZW50O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnaHRtbCcpIHtcblx0XHRcdFx0XHRcdGNvbnRlbnQgPSBocmVmO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICghdHlwZSAmJiAhaHJlZiAmJiBvYmouaXNEb20pIHtcblx0XHRcdFx0XHRcdHR5cGUgICAgPSAnaW5saW5lJztcblx0XHRcdFx0XHRcdGNvbnRlbnQgPSBlbGVtZW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCQuZXh0ZW5kKG9iaiwge1xuXHRcdFx0XHRcdGhyZWYgICAgIDogaHJlZixcblx0XHRcdFx0XHR0eXBlICAgICA6IHR5cGUsXG5cdFx0XHRcdFx0Y29udGVudCAgOiBjb250ZW50LFxuXHRcdFx0XHRcdHRpdGxlICAgIDogdGl0bGUsXG5cdFx0XHRcdFx0c2VsZWN0b3IgOiBzZWxlY3RvclxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRncm91cFsgaSBdID0gb2JqO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgZGVmYXVsdHNcblx0XHRcdEYub3B0cyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBGLmRlZmF1bHRzLCBvcHRzKTtcblxuXHRcdFx0Ly8gQWxsIG9wdGlvbnMgYXJlIG1lcmdlZCByZWN1cnNpdmUgZXhjZXB0IGtleXNcblx0XHRcdGlmIChvcHRzLmtleXMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRGLm9wdHMua2V5cyA9IG9wdHMua2V5cyA/ICQuZXh0ZW5kKHt9LCBGLmRlZmF1bHRzLmtleXMsIG9wdHMua2V5cykgOiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ri5ncm91cCA9IGdyb3VwO1xuXG5cdFx0XHRyZXR1cm4gRi5fc3RhcnQoRi5vcHRzLmluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQ2FuY2VsIGltYWdlIGxvYWRpbmcgb3IgYWJvcnQgYWpheCByZXF1ZXN0XG5cdFx0Y2FuY2VsOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgY29taW5nID0gRi5jb21pbmc7XG5cblx0XHRcdGlmIChjb21pbmcgJiYgZmFsc2UgPT09IEYudHJpZ2dlcignb25DYW5jZWwnKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdEYuaGlkZUxvYWRpbmcoKTtcblxuXHRcdFx0aWYgKCFjb21pbmcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoRi5hamF4TG9hZCkge1xuXHRcdFx0XHRGLmFqYXhMb2FkLmFib3J0KCk7XG5cdFx0XHR9XG5cblx0XHRcdEYuYWpheExvYWQgPSBudWxsO1xuXG5cdFx0XHRpZiAoRi5pbWdQcmVsb2FkKSB7XG5cdFx0XHRcdEYuaW1nUHJlbG9hZC5vbmxvYWQgPSBGLmltZ1ByZWxvYWQub25lcnJvciA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjb21pbmcud3JhcCkge1xuXHRcdFx0XHRjb21pbmcud3JhcC5zdG9wKHRydWUsIHRydWUpLnRyaWdnZXIoJ29uUmVzZXQnKS5yZW1vdmUoKTtcblx0XHRcdH1cblxuXHRcdFx0Ri5jb21pbmcgPSBudWxsO1xuXG5cdFx0XHQvLyBJZiB0aGUgZmlyc3QgaXRlbSBoYXMgYmVlbiBjYW5jZWxlZCwgdGhlbiBjbGVhciBldmVyeXRoaW5nXG5cdFx0XHRpZiAoIUYuY3VycmVudCkge1xuXHRcdFx0XHRGLl9hZnRlclpvb21PdXQoIGNvbWluZyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBTdGFydCBjbG9zaW5nIGFuaW1hdGlvbiBpZiBpcyBvcGVuOyByZW1vdmUgaW1tZWRpYXRlbHkgaWYgb3BlbmluZy9jbG9zaW5nXG5cdFx0Y2xvc2U6IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0Ri5jYW5jZWwoKTtcblxuXHRcdFx0aWYgKGZhbHNlID09PSBGLnRyaWdnZXIoJ2JlZm9yZUNsb3NlJykpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRGLnVuYmluZEV2ZW50cygpO1xuXG5cdFx0XHRpZiAoIUYuaXNBY3RpdmUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIUYuaXNPcGVuIHx8IGV2ZW50ID09PSB0cnVlKSB7XG5cdFx0XHRcdCQoJy5mYW5jeWJveC13cmFwJykuc3RvcCh0cnVlKS50cmlnZ2VyKCdvblJlc2V0JykucmVtb3ZlKCk7XG5cblx0XHRcdFx0Ri5fYWZ0ZXJab29tT3V0KCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdEYuaXNPcGVuID0gRi5pc09wZW5lZCA9IGZhbHNlO1xuXHRcdFx0XHRGLmlzQ2xvc2luZyA9IHRydWU7XG5cblx0XHRcdFx0JCgnLmZhbmN5Ym94LWl0ZW0sIC5mYW5jeWJveC1uYXYnKS5yZW1vdmUoKTtcblxuXHRcdFx0XHRGLndyYXAuc3RvcCh0cnVlLCB0cnVlKS5yZW1vdmVDbGFzcygnZmFuY3lib3gtb3BlbmVkJyk7XG5cblx0XHRcdFx0Ri50cmFuc2l0aW9uc1sgRi5jdXJyZW50LmNsb3NlTWV0aG9kIF0oKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlIHNsaWRlc2hvdzpcblx0XHQvLyAgICQuZmFuY3lib3gucGxheSgpOyAtIHRvZ2dsZSBzbGlkZXNob3dcblx0XHQvLyAgICQuZmFuY3lib3gucGxheSggdHJ1ZSApOyAtIHN0YXJ0XG5cdFx0Ly8gICAkLmZhbmN5Ym94LnBsYXkoIGZhbHNlICk7IC0gc3RvcFxuXHRcdHBsYXk6IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXHRcdFx0dmFyIGNsZWFyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dChGLnBsYXllci50aW1lcik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNldCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRjbGVhcigpO1xuXG5cdFx0XHRcdFx0aWYgKEYuY3VycmVudCAmJiBGLnBsYXllci5pc0FjdGl2ZSkge1xuXHRcdFx0XHRcdFx0Ri5wbGF5ZXIudGltZXIgPSBzZXRUaW1lb3V0KEYubmV4dCwgRi5jdXJyZW50LnBsYXlTcGVlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdG9wID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGNsZWFyKCk7XG5cblx0XHRcdFx0XHRELnVuYmluZCgnLnBsYXllcicpO1xuXG5cdFx0XHRcdFx0Ri5wbGF5ZXIuaXNBY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHRcdEYudHJpZ2dlcignb25QbGF5RW5kJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGlmIChGLmN1cnJlbnQgJiYgKEYuY3VycmVudC5sb29wIHx8IEYuY3VycmVudC5pbmRleCA8IEYuZ3JvdXAubGVuZ3RoIC0gMSkpIHtcblx0XHRcdFx0XHRcdEYucGxheWVyLmlzQWN0aXZlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0RC5iaW5kKHtcblx0XHRcdFx0XHRcdFx0J29uQ2FuY2VsLnBsYXllciBiZWZvcmVDbG9zZS5wbGF5ZXInIDogc3RvcCxcblx0XHRcdFx0XHRcdFx0J29uVXBkYXRlLnBsYXllcicgICA6IHNldCxcblx0XHRcdFx0XHRcdFx0J2JlZm9yZUxvYWQucGxheWVyJyA6IGNsZWFyXG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0c2V0KCk7XG5cblx0XHRcdFx0XHRcdEYudHJpZ2dlcignb25QbGF5U3RhcnQnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdGlmIChhY3Rpb24gPT09IHRydWUgfHwgKCFGLnBsYXllci5pc0FjdGl2ZSAmJiBhY3Rpb24gIT09IGZhbHNlKSkge1xuXHRcdFx0XHRzdGFydCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RvcCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBOYXZpZ2F0ZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxuXHRcdG5leHQ6IGZ1bmN0aW9uICggZGlyZWN0aW9uICkge1xuXHRcdFx0dmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQ7XG5cblx0XHRcdGlmIChjdXJyZW50KSB7XG5cdFx0XHRcdGlmICghaXNTdHJpbmcoZGlyZWN0aW9uKSkge1xuXHRcdFx0XHRcdGRpcmVjdGlvbiA9IGN1cnJlbnQuZGlyZWN0aW9uLm5leHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRGLmp1bXB0byhjdXJyZW50LmluZGV4ICsgMSwgZGlyZWN0aW9uLCAnbmV4dCcpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBOYXZpZ2F0ZSB0byBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1cblx0XHRwcmV2OiBmdW5jdGlvbiAoIGRpcmVjdGlvbiApIHtcblx0XHRcdHZhciBjdXJyZW50ID0gRi5jdXJyZW50O1xuXG5cdFx0XHRpZiAoY3VycmVudCkge1xuXHRcdFx0XHRpZiAoIWlzU3RyaW5nKGRpcmVjdGlvbikpIHtcblx0XHRcdFx0XHRkaXJlY3Rpb24gPSBjdXJyZW50LmRpcmVjdGlvbi5wcmV2O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ri5qdW1wdG8oY3VycmVudC5pbmRleCAtIDEsIGRpcmVjdGlvbiwgJ3ByZXYnKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTmF2aWdhdGUgdG8gZ2FsbGVyeSBpdGVtIGJ5IGluZGV4XG5cdFx0anVtcHRvOiBmdW5jdGlvbiAoIGluZGV4LCBkaXJlY3Rpb24sIHJvdXRlciApIHtcblx0XHRcdHZhciBjdXJyZW50ID0gRi5jdXJyZW50O1xuXG5cdFx0XHRpZiAoIWN1cnJlbnQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpbmRleCA9IGdldFNjYWxhcihpbmRleCk7XG5cblx0XHRcdEYuZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IGN1cnJlbnQuZGlyZWN0aW9uWyAoaW5kZXggPj0gY3VycmVudC5pbmRleCA/ICduZXh0JyA6ICdwcmV2JykgXTtcblx0XHRcdEYucm91dGVyICAgID0gcm91dGVyIHx8ICdqdW1wdG8nO1xuXG5cdFx0XHRpZiAoY3VycmVudC5sb29wKSB7XG5cdFx0XHRcdGlmIChpbmRleCA8IDApIHtcblx0XHRcdFx0XHRpbmRleCA9IGN1cnJlbnQuZ3JvdXAubGVuZ3RoICsgKGluZGV4ICUgY3VycmVudC5ncm91cC5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBpbmRleCAlIGN1cnJlbnQuZ3JvdXAubGVuZ3RoO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY3VycmVudC5ncm91cFsgaW5kZXggXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdEYuY2FuY2VsKCk7XG5cblx0XHRcdFx0Ri5fc3RhcnQoaW5kZXgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBDZW50ZXIgaW5zaWRlIHZpZXdwb3J0IGFuZCB0b2dnbGUgcG9zaXRpb24gdHlwZSB0byBmaXhlZCBvciBhYnNvbHV0ZSBpZiBuZWVkZWRcblx0XHRyZXBvc2l0aW9uOiBmdW5jdGlvbiAoZSwgb25seUFic29sdXRlKSB7XG5cdFx0XHR2YXIgY3VycmVudCA9IEYuY3VycmVudCxcblx0XHRcdFx0d3JhcCAgICA9IGN1cnJlbnQgPyBjdXJyZW50LndyYXAgOiBudWxsLFxuXHRcdFx0XHRwb3M7XG5cblx0XHRcdGlmICh3cmFwKSB7XG5cdFx0XHRcdHBvcyA9IEYuX2dldFBvc2l0aW9uKG9ubHlBYnNvbHV0ZSk7XG5cblx0XHRcdFx0aWYgKGUgJiYgZS50eXBlID09PSAnc2Nyb2xsJykge1xuXHRcdFx0XHRcdGRlbGV0ZSBwb3MucG9zaXRpb247XG5cblx0XHRcdFx0XHR3cmFwLnN0b3AodHJ1ZSwgdHJ1ZSkuYW5pbWF0ZShwb3MsIDIwMCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR3cmFwLmNzcyhwb3MpO1xuXG5cdFx0XHRcdFx0Y3VycmVudC5wb3MgPSAkLmV4dGVuZCh7fSwgY3VycmVudC5kaW0sIHBvcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbiAoZSkge1xuXHRcdFx0dmFyIHR5cGUgPSAoZSAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnR5cGUpLFxuXHRcdFx0XHRhbnl3YXkgPSAhdHlwZSB8fCB0eXBlID09PSAnb3JpZW50YXRpb25jaGFuZ2UnO1xuXG5cdFx0XHRpZiAoYW55d2F5KSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dChkaWRVcGRhdGUpO1xuXG5cdFx0XHRcdGRpZFVwZGF0ZSA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghRi5pc09wZW4gfHwgZGlkVXBkYXRlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZGlkVXBkYXRlID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQ7XG5cblx0XHRcdFx0aWYgKCFjdXJyZW50IHx8IEYuaXNDbG9zaW5nKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ri53cmFwLnJlbW92ZUNsYXNzKCdmYW5jeWJveC10bXAnKTtcblxuXHRcdFx0XHRpZiAoYW55d2F5IHx8IHR5cGUgPT09ICdsb2FkJyB8fCAodHlwZSA9PT0gJ3Jlc2l6ZScgJiYgY3VycmVudC5hdXRvUmVzaXplKSkge1xuXHRcdFx0XHRcdEYuX3NldERpbWVuc2lvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCEodHlwZSA9PT0gJ3Njcm9sbCcgJiYgY3VycmVudC5jYW5TaHJpbmspKSB7XG5cdFx0XHRcdFx0Ri5yZXBvc2l0aW9uKGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ri50cmlnZ2VyKCdvblVwZGF0ZScpO1xuXG5cdFx0XHRcdGRpZFVwZGF0ZSA9IG51bGw7XG5cblx0XHRcdH0sIChhbnl3YXkgJiYgIWlzVG91Y2ggPyAwIDogMzAwKSk7XG5cdFx0fSxcblxuXHRcdC8vIFNocmluayBjb250ZW50IHRvIGZpdCBpbnNpZGUgdmlld3BvcnQgb3IgcmVzdG9yZSBpZiByZXNpemVkXG5cdFx0dG9nZ2xlOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblx0XHRcdGlmIChGLmlzT3Blbikge1xuXHRcdFx0XHRGLmN1cnJlbnQuZml0VG9WaWV3ID0gJC50eXBlKGFjdGlvbikgPT09IFwiYm9vbGVhblwiID8gYWN0aW9uIDogIUYuY3VycmVudC5maXRUb1ZpZXc7XG5cblx0XHRcdFx0Ly8gSGVscCBicm93c2VyIHRvIHJlc3RvcmUgZG9jdW1lbnQgZGltZW5zaW9uc1xuXHRcdFx0XHRpZiAoaXNUb3VjaCkge1xuXHRcdFx0XHRcdEYud3JhcC5yZW1vdmVBdHRyKCdzdHlsZScpLmFkZENsYXNzKCdmYW5jeWJveC10bXAnKTtcblxuXHRcdFx0XHRcdEYudHJpZ2dlcignb25VcGRhdGUnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdEYudXBkYXRlKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGhpZGVMb2FkaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRELnVuYmluZCgnLmxvYWRpbmcnKTtcblxuXHRcdFx0JCgnI2ZhbmN5Ym94LWxvYWRpbmcnKS5yZW1vdmUoKTtcblx0XHR9LFxuXG5cdFx0c2hvd0xvYWRpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBlbCwgdmlld3BvcnQ7XG5cblx0XHRcdEYuaGlkZUxvYWRpbmcoKTtcblxuXHRcdFx0ZWwgPSAkKEYub3B0cy50cGwubG9hZGluZykuY2xpY2soRi5jYW5jZWwpLmFwcGVuZFRvKCdib2R5Jyk7XG5cblx0XHRcdC8vIElmIHVzZXIgd2lsbCBwcmVzcyB0aGUgZXNjYXBlLWJ1dHRvbiwgdGhlIHJlcXVlc3Qgd2lsbCBiZSBjYW5jZWxlZFxuXHRcdFx0RC5iaW5kKCdrZXlkb3duLmxvYWRpbmcnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmICgoZS53aGljaCB8fCBlLmtleUNvZGUpID09PSAyNykge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdEYuY2FuY2VsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoIUYuZGVmYXVsdHMuZml4ZWQpIHtcblx0XHRcdFx0dmlld3BvcnQgPSBGLmdldFZpZXdwb3J0KCk7XG5cblx0XHRcdFx0ZWwuY3NzKHtcblx0XHRcdFx0XHRwb3NpdGlvbiA6ICdhYnNvbHV0ZScsXG5cdFx0XHRcdFx0dG9wICA6ICh2aWV3cG9ydC5oICogMC41KSArIHZpZXdwb3J0LnksXG5cdFx0XHRcdFx0bGVmdCA6ICh2aWV3cG9ydC53ICogMC41KSArIHZpZXdwb3J0Lnhcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdEYudHJpZ2dlcignb25Mb2FkaW5nJyk7XG5cdFx0fSxcblxuXHRcdGdldFZpZXdwb3J0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgbG9ja2VkID0gKEYuY3VycmVudCAmJiBGLmN1cnJlbnQubG9ja2VkKSB8fCBmYWxzZSxcblx0XHRcdFx0cmV6ICAgID0ge1xuXHRcdFx0XHRcdHg6IFcuc2Nyb2xsTGVmdCgpLFxuXHRcdFx0XHRcdHk6IFcuc2Nyb2xsVG9wKClcblx0XHRcdFx0fTtcblxuXHRcdFx0aWYgKGxvY2tlZCAmJiBsb2NrZWQubGVuZ3RoKSB7XG5cdFx0XHRcdHJlei53ID0gbG9ja2VkWzBdLmNsaWVudFdpZHRoO1xuXHRcdFx0XHRyZXouaCA9IGxvY2tlZFswXS5jbGllbnRIZWlnaHQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC82NzI0XG5cdFx0XHRcdHJlei53ID0gaXNUb3VjaCAmJiB3aW5kb3cuaW5uZXJXaWR0aCAgPyB3aW5kb3cuaW5uZXJXaWR0aCAgOiBXLndpZHRoKCk7XG5cdFx0XHRcdHJlei5oID0gaXNUb3VjaCAmJiB3aW5kb3cuaW5uZXJIZWlnaHQgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBXLmhlaWdodCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV6O1xuXHRcdH0sXG5cblx0XHQvLyBVbmJpbmQgdGhlIGtleWJvYXJkIC8gY2xpY2tpbmcgYWN0aW9uc1xuXHRcdHVuYmluZEV2ZW50czogZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKEYud3JhcCAmJiBpc1F1ZXJ5KEYud3JhcCkpIHtcblx0XHRcdFx0Ri53cmFwLnVuYmluZCgnLmZiJyk7XG5cdFx0XHR9XG5cblx0XHRcdEQudW5iaW5kKCcuZmInKTtcblx0XHRcdFcudW5iaW5kKCcuZmInKTtcblx0XHR9LFxuXG5cdFx0YmluZEV2ZW50czogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGN1cnJlbnQgPSBGLmN1cnJlbnQsXG5cdFx0XHRcdGtleXM7XG5cblx0XHRcdGlmICghY3VycmVudCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIENoYW5naW5nIGRvY3VtZW50IGhlaWdodCBvbiBpT1MgZGV2aWNlcyB0cmlnZ2VycyBhICdyZXNpemUnIGV2ZW50LFxuXHRcdFx0Ly8gdGhhdCBjYW4gY2hhbmdlIGRvY3VtZW50IGhlaWdodC4uLiByZXBlYXRpbmcgaW5maW5pdGVseVxuXHRcdFx0Vy5iaW5kKCdvcmllbnRhdGlvbmNoYW5nZS5mYicgKyAoaXNUb3VjaCA/ICcnIDogJyByZXNpemUuZmInKSArIChjdXJyZW50LmF1dG9DZW50ZXIgJiYgIWN1cnJlbnQubG9ja2VkID8gJyBzY3JvbGwuZmInIDogJycpLCBGLnVwZGF0ZSk7XG5cblx0XHRcdGtleXMgPSBjdXJyZW50LmtleXM7XG5cblx0XHRcdGlmIChrZXlzKSB7XG5cdFx0XHRcdEQuYmluZCgna2V5ZG93bi5mYicsIGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGUgICA9IGUud2hpY2ggfHwgZS5rZXlDb2RlLFxuXHRcdFx0XHRcdFx0dGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gU2tpcCBlc2Mga2V5IGlmIGxvYWRpbmcsIGJlY2F1c2Ugc2hvd0xvYWRpbmcgd2lsbCBjYW5jZWwgcHJlbG9hZGluZ1xuXHRcdFx0XHRcdGlmIChjb2RlID09PSAyNyAmJiBGLmNvbWluZykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIElnbm9yZSBrZXkgY29tYmluYXRpb25zIGFuZCBrZXkgZXZlbnRzIHdpdGhpbiBmb3JtIGVsZW1lbnRzXG5cdFx0XHRcdFx0aWYgKCFlLmN0cmxLZXkgJiYgIWUuYWx0S2V5ICYmICFlLnNoaWZ0S2V5ICYmICFlLm1ldGFLZXkgJiYgISh0YXJnZXQgJiYgKHRhcmdldC50eXBlIHx8ICQodGFyZ2V0KS5pcygnW2NvbnRlbnRlZGl0YWJsZV0nKSkpKSB7XG5cdFx0XHRcdFx0XHQkLmVhY2goa2V5cywgZnVuY3Rpb24oaSwgdmFsKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChjdXJyZW50Lmdyb3VwLmxlbmd0aCA+IDEgJiYgdmFsWyBjb2RlIF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdEZbIGkgXSggdmFsWyBjb2RlIF0gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoJC5pbkFycmF5KGNvZGUsIHZhbCkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdEZbIGkgXSAoKTtcblxuXHRcdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICgkLmZuLm1vdXNld2hlZWwgJiYgY3VycmVudC5tb3VzZVdoZWVsKSB7XG5cdFx0XHRcdEYud3JhcC5iaW5kKCdtb3VzZXdoZWVsLmZiJywgZnVuY3Rpb24gKGUsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSkge1xuXHRcdFx0XHRcdHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBudWxsLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gJCh0YXJnZXQpLFxuXHRcdFx0XHRcdFx0Y2FuU2Nyb2xsID0gZmFsc2U7XG5cblx0XHRcdFx0XHR3aGlsZSAocGFyZW50Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aWYgKGNhblNjcm9sbCB8fCBwYXJlbnQuaXMoJy5mYW5jeWJveC1za2luJykgfHwgcGFyZW50LmlzKCcuZmFuY3lib3gtd3JhcCcpKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjYW5TY3JvbGwgPSBpc1Njcm9sbGFibGUoIHBhcmVudFswXSApO1xuXHRcdFx0XHRcdFx0cGFyZW50ICAgID0gJChwYXJlbnQpLnBhcmVudCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChkZWx0YSAhPT0gMCAmJiAhY2FuU2Nyb2xsKSB7XG5cdFx0XHRcdFx0XHRpZiAoRi5ncm91cC5sZW5ndGggPiAxICYmICFjdXJyZW50LmNhblNocmluaykge1xuXHRcdFx0XHRcdFx0XHRpZiAoZGVsdGFZID4gMCB8fCBkZWx0YVggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ri5wcmV2KCBkZWx0YVkgPiAwID8gJ2Rvd24nIDogJ2xlZnQnICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChkZWx0YVkgPCAwIHx8IGRlbHRhWCA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRGLm5leHQoIGRlbHRhWSA8IDAgPyAndXAnIDogJ3JpZ2h0JyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uIChldmVudCwgbykge1xuXHRcdFx0dmFyIHJldCwgb2JqID0gbyB8fCBGLmNvbWluZyB8fCBGLmN1cnJlbnQ7XG5cblx0XHRcdGlmIChvYmopIHtcblx0XHRcdFx0aWYgKCQuaXNGdW5jdGlvbiggb2JqW2V2ZW50XSApKSB7XG5cdFx0XHRcdFx0cmV0ID0gb2JqW2V2ZW50XS5hcHBseShvYmosIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHJldCA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAob2JqLmhlbHBlcnMpIHtcblx0XHRcdFx0XHQkLmVhY2gob2JqLmhlbHBlcnMsIGZ1bmN0aW9uIChoZWxwZXIsIG9wdHMpIHtcblx0XHRcdFx0XHRcdGlmIChvcHRzICYmIEYuaGVscGVyc1toZWxwZXJdICYmICQuaXNGdW5jdGlvbihGLmhlbHBlcnNbaGVscGVyXVtldmVudF0pKSB7XG5cdFx0XHRcdFx0XHRcdEYuaGVscGVyc1toZWxwZXJdW2V2ZW50XSgkLmV4dGVuZCh0cnVlLCB7fSwgRi5oZWxwZXJzW2hlbHBlcl0uZGVmYXVsdHMsIG9wdHMpLCBvYmopO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdEQudHJpZ2dlcihldmVudCk7XG5cdFx0fSxcblxuXHRcdGlzSW1hZ2U6IGZ1bmN0aW9uIChzdHIpIHtcblx0XHRcdHJldHVybiBpc1N0cmluZyhzdHIpICYmIHN0ci5tYXRjaCgvKF5kYXRhOmltYWdlXFwvLiosKXwoXFwuKGpwKGV8Z3xlZyl8Z2lmfHBuZ3xibXB8d2VicHxzdmcpKChcXD98IykuKik/JCkvaSk7XG5cdFx0fSxcblxuXHRcdGlzU1dGOiBmdW5jdGlvbiAoc3RyKSB7XG5cdFx0XHRyZXR1cm4gaXNTdHJpbmcoc3RyKSAmJiBzdHIubWF0Y2goL1xcLihzd2YpKChcXD98IykuKik/JC9pKTtcblx0XHR9LFxuXG5cdFx0X3N0YXJ0OiBmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHRcdHZhciBjb21pbmcgPSB7fSxcblx0XHRcdFx0b2JqLFxuXHRcdFx0XHRocmVmLFxuXHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRtYXJnaW4sXG5cdFx0XHRcdHBhZGRpbmc7XG5cblx0XHRcdGluZGV4ID0gZ2V0U2NhbGFyKCBpbmRleCApO1xuXHRcdFx0b2JqICAgPSBGLmdyb3VwWyBpbmRleCBdIHx8IG51bGw7XG5cblx0XHRcdGlmICghb2JqKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Y29taW5nID0gJC5leHRlbmQodHJ1ZSwge30sIEYub3B0cywgb2JqKTtcblxuXHRcdFx0Ly8gQ29udmVydCBtYXJnaW4gYW5kIHBhZGRpbmcgcHJvcGVydGllcyB0byBhcnJheSAtIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxuXHRcdFx0bWFyZ2luICA9IGNvbWluZy5tYXJnaW47XG5cdFx0XHRwYWRkaW5nID0gY29taW5nLnBhZGRpbmc7XG5cblx0XHRcdGlmICgkLnR5cGUobWFyZ2luKSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y29taW5nLm1hcmdpbiA9IFttYXJnaW4sIG1hcmdpbiwgbWFyZ2luLCBtYXJnaW5dO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoJC50eXBlKHBhZGRpbmcpID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjb21pbmcucGFkZGluZyA9IFtwYWRkaW5nLCBwYWRkaW5nLCBwYWRkaW5nLCBwYWRkaW5nXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gJ21vZGFsJyBwcm9wZXJ5IGlzIGp1c3QgYSBzaG9ydGN1dFxuXHRcdFx0aWYgKGNvbWluZy5tb2RhbCkge1xuXHRcdFx0XHQkLmV4dGVuZCh0cnVlLCBjb21pbmcsIHtcblx0XHRcdFx0XHRjbG9zZUJ0biAgIDogZmFsc2UsXG5cdFx0XHRcdFx0Y2xvc2VDbGljayA6IGZhbHNlLFxuXHRcdFx0XHRcdG5leHRDbGljayAgOiBmYWxzZSxcblx0XHRcdFx0XHRhcnJvd3MgICAgIDogZmFsc2UsXG5cdFx0XHRcdFx0bW91c2VXaGVlbCA6IGZhbHNlLFxuXHRcdFx0XHRcdGtleXMgICAgICAgOiBudWxsLFxuXHRcdFx0XHRcdGhlbHBlcnM6IHtcblx0XHRcdFx0XHRcdG92ZXJsYXkgOiB7XG5cdFx0XHRcdFx0XHRcdGNsb3NlQ2xpY2sgOiBmYWxzZVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vICdhdXRvU2l6ZScgcHJvcGVydHkgaXMgYSBzaG9ydGN1dCwgdG9vXG5cdFx0XHRpZiAoY29taW5nLmF1dG9TaXplKSB7XG5cdFx0XHRcdGNvbWluZy5hdXRvV2lkdGggPSBjb21pbmcuYXV0b0hlaWdodCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjb21pbmcud2lkdGggPT09ICdhdXRvJykge1xuXHRcdFx0XHRjb21pbmcuYXV0b1dpZHRoID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvbWluZy5oZWlnaHQgPT09ICdhdXRvJykge1xuXHRcdFx0XHRjb21pbmcuYXV0b0hlaWdodCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8qXG5cdFx0XHQgKiBBZGQgcmVmZXJlbmNlIHRvIHRoZSBncm91cCwgc28gaXRgcyBwb3NzaWJsZSB0byBhY2Nlc3MgZnJvbSBjYWxsYmFja3MsIGV4YW1wbGU6XG5cdFx0XHQgKiBhZnRlckxvYWQgOiBmdW5jdGlvbigpIHtcblx0XHRcdCAqICAgICB0aGlzLnRpdGxlID0gJ0ltYWdlICcgKyAodGhpcy5pbmRleCArIDEpICsgJyBvZiAnICsgdGhpcy5ncm91cC5sZW5ndGggKyAodGhpcy50aXRsZSA/ICcgLSAnICsgdGhpcy50aXRsZSA6ICcnKTtcblx0XHRcdCAqIH1cblx0XHRcdCAqL1xuXG5cdFx0XHRjb21pbmcuZ3JvdXAgID0gRi5ncm91cDtcblx0XHRcdGNvbWluZy5pbmRleCAgPSBpbmRleDtcblxuXHRcdFx0Ly8gR2l2ZSBhIGNoYW5jZSBmb3IgY2FsbGJhY2sgb3IgaGVscGVycyB0byB1cGRhdGUgY29taW5nIGl0ZW0gKHR5cGUsIHRpdGxlLCBldGMpXG5cdFx0XHRGLmNvbWluZyA9IGNvbWluZztcblxuXHRcdFx0aWYgKGZhbHNlID09PSBGLnRyaWdnZXIoJ2JlZm9yZUxvYWQnKSkge1xuXHRcdFx0XHRGLmNvbWluZyA9IG51bGw7XG5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0eXBlID0gY29taW5nLnR5cGU7XG5cdFx0XHRocmVmID0gY29taW5nLmhyZWY7XG5cblx0XHRcdGlmICghdHlwZSkge1xuXHRcdFx0XHRGLmNvbWluZyA9IG51bGw7XG5cblx0XHRcdFx0Ly9JZiB3ZSBjYW4gbm90IGRldGVybWluZSBjb250ZW50IHR5cGUgdGhlbiBkcm9wIHNpbGVudGx5IG9yIGRpc3BsYXkgbmV4dC9wcmV2IGl0ZW0gaWYgbG9vcGluZyB0aHJvdWdoIGdhbGxlcnlcblx0XHRcdFx0aWYgKEYuY3VycmVudCAmJiBGLnJvdXRlciAmJiBGLnJvdXRlciAhPT0gJ2p1bXB0bycpIHtcblx0XHRcdFx0XHRGLmN1cnJlbnQuaW5kZXggPSBpbmRleDtcblxuXHRcdFx0XHRcdHJldHVybiBGWyBGLnJvdXRlciBdKCBGLmRpcmVjdGlvbiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRGLmlzQWN0aXZlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKHR5cGUgPT09ICdpbWFnZScgfHwgdHlwZSA9PT0gJ3N3ZicpIHtcblx0XHRcdFx0Y29taW5nLmF1dG9IZWlnaHQgPSBjb21pbmcuYXV0b1dpZHRoID0gZmFsc2U7XG5cdFx0XHRcdGNvbWluZy5zY3JvbGxpbmcgID0gJ3Zpc2libGUnO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZSA9PT0gJ2ltYWdlJykge1xuXHRcdFx0XHRjb21pbmcuYXNwZWN0UmF0aW8gPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZSA9PT0gJ2lmcmFtZScgJiYgaXNUb3VjaCkge1xuXHRcdFx0XHRjb21pbmcuc2Nyb2xsaW5nID0gJ3Njcm9sbCc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1aWxkIHRoZSBuZWNjZXNzYXJ5IG1hcmt1cFxuXHRcdFx0Y29taW5nLndyYXAgPSAkKGNvbWluZy50cGwud3JhcCkuYWRkQ2xhc3MoJ2ZhbmN5Ym94LScgKyAoaXNUb3VjaCA/ICdtb2JpbGUnIDogJ2Rlc2t0b3AnKSArICcgZmFuY3lib3gtdHlwZS0nICsgdHlwZSArICcgZmFuY3lib3gtdG1wICcgKyBjb21pbmcud3JhcENTUykuYXBwZW5kVG8oIGNvbWluZy5wYXJlbnQgfHwgJ2JvZHknICk7XG5cblx0XHRcdCQuZXh0ZW5kKGNvbWluZywge1xuXHRcdFx0XHRza2luICA6ICQoJy5mYW5jeWJveC1za2luJywgIGNvbWluZy53cmFwKSxcblx0XHRcdFx0b3V0ZXIgOiAkKCcuZmFuY3lib3gtb3V0ZXInLCBjb21pbmcud3JhcCksXG5cdFx0XHRcdGlubmVyIDogJCgnLmZhbmN5Ym94LWlubmVyJywgY29taW5nLndyYXApXG5cdFx0XHR9KTtcblxuXHRcdFx0JC5lYWNoKFtcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiXSwgZnVuY3Rpb24oaSwgdikge1xuXHRcdFx0XHRjb21pbmcuc2tpbi5jc3MoJ3BhZGRpbmcnICsgdiwgZ2V0VmFsdWUoY29taW5nLnBhZGRpbmdbIGkgXSkpO1xuXHRcdFx0fSk7XG5cblx0XHRcdEYudHJpZ2dlcignb25SZWFkeScpO1xuXG5cdFx0XHQvLyBDaGVjayBiZWZvcmUgdHJ5IHRvIGxvYWQ7ICdpbmxpbmUnIGFuZCAnaHRtbCcgdHlwZXMgbmVlZCBjb250ZW50LCBvdGhlcnMgLSBocmVmXG5cdFx0XHRpZiAodHlwZSA9PT0gJ2lubGluZScgfHwgdHlwZSA9PT0gJ2h0bWwnKSB7XG5cdFx0XHRcdGlmICghY29taW5nLmNvbnRlbnQgfHwgIWNvbWluZy5jb250ZW50Lmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBGLl9lcnJvciggJ2NvbnRlbnQnICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICghaHJlZikge1xuXHRcdFx0XHRyZXR1cm4gRi5fZXJyb3IoICdocmVmJyApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZSA9PT0gJ2ltYWdlJykge1xuXHRcdFx0XHRGLl9sb2FkSW1hZ2UoKTtcblxuXHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnYWpheCcpIHtcblx0XHRcdFx0Ri5fbG9hZEFqYXgoKTtcblxuXHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnaWZyYW1lJykge1xuXHRcdFx0XHRGLl9sb2FkSWZyYW1lKCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdEYuX2FmdGVyTG9hZCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfZXJyb3I6IGZ1bmN0aW9uICggdHlwZSApIHtcblx0XHRcdCQuZXh0ZW5kKEYuY29taW5nLCB7XG5cdFx0XHRcdHR5cGUgICAgICAgOiAnaHRtbCcsXG5cdFx0XHRcdGF1dG9XaWR0aCAgOiB0cnVlLFxuXHRcdFx0XHRhdXRvSGVpZ2h0IDogdHJ1ZSxcblx0XHRcdFx0bWluV2lkdGggICA6IDAsXG5cdFx0XHRcdG1pbkhlaWdodCAgOiAwLFxuXHRcdFx0XHRzY3JvbGxpbmcgIDogJ25vJyxcblx0XHRcdFx0aGFzRXJyb3IgICA6IHR5cGUsXG5cdFx0XHRcdGNvbnRlbnQgICAgOiBGLmNvbWluZy50cGwuZXJyb3Jcblx0XHRcdH0pO1xuXG5cdFx0XHRGLl9hZnRlckxvYWQoKTtcblx0XHR9LFxuXG5cdFx0X2xvYWRJbWFnZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gUmVzZXQgcHJlbG9hZCBpbWFnZSBzbyBpdCBpcyBsYXRlciBwb3NzaWJsZSB0byBjaGVjayBcImNvbXBsZXRlXCIgcHJvcGVydHlcblx0XHRcdHZhciBpbWcgPSBGLmltZ1ByZWxvYWQgPSBuZXcgSW1hZ2UoKTtcblxuXHRcdFx0aW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhpcy5vbmxvYWQgPSB0aGlzLm9uZXJyb3IgPSBudWxsO1xuXG5cdFx0XHRcdEYuY29taW5nLndpZHRoICA9IHRoaXMud2lkdGggLyBGLm9wdHMucGl4ZWxSYXRpbztcblx0XHRcdFx0Ri5jb21pbmcuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgLyBGLm9wdHMucGl4ZWxSYXRpbztcblxuXHRcdFx0XHRGLl9hZnRlckxvYWQoKTtcblx0XHRcdH07XG5cblx0XHRcdGltZy5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aGlzLm9ubG9hZCA9IHRoaXMub25lcnJvciA9IG51bGw7XG5cblx0XHRcdFx0Ri5fZXJyb3IoICdpbWFnZScgKTtcblx0XHRcdH07XG5cblx0XHRcdGltZy5zcmMgPSBGLmNvbWluZy5ocmVmO1xuXG5cdFx0XHRpZiAoaW1nLmNvbXBsZXRlICE9PSB0cnVlKSB7XG5cdFx0XHRcdEYuc2hvd0xvYWRpbmcoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2xvYWRBamF4OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgY29taW5nID0gRi5jb21pbmc7XG5cblx0XHRcdEYuc2hvd0xvYWRpbmcoKTtcblxuXHRcdFx0Ri5hamF4TG9hZCA9ICQuYWpheCgkLmV4dGVuZCh7fSwgY29taW5nLmFqYXgsIHtcblx0XHRcdFx0dXJsOiBjb21pbmcuaHJlZixcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cykge1xuXHRcdFx0XHRcdGlmIChGLmNvbWluZyAmJiB0ZXh0U3RhdHVzICE9PSAnYWJvcnQnKSB7XG5cdFx0XHRcdFx0XHRGLl9lcnJvciggJ2FqYXgnLCBqcVhIUiApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdEYuaGlkZUxvYWRpbmcoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzKSB7XG5cdFx0XHRcdFx0aWYgKHRleHRTdGF0dXMgPT09ICdzdWNjZXNzJykge1xuXHRcdFx0XHRcdFx0Y29taW5nLmNvbnRlbnQgPSBkYXRhO1xuXG5cdFx0XHRcdFx0XHRGLl9hZnRlckxvYWQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pKTtcblx0XHR9LFxuXG5cdFx0X2xvYWRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNvbWluZyA9IEYuY29taW5nLFxuXHRcdFx0XHRpZnJhbWUgPSAkKGNvbWluZy50cGwuaWZyYW1lLnJlcGxhY2UoL1xce3JuZFxcfS9nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSkpXG5cdFx0XHRcdFx0LmF0dHIoJ3Njcm9sbGluZycsIGlzVG91Y2ggPyAnYXV0bycgOiBjb21pbmcuaWZyYW1lLnNjcm9sbGluZylcblx0XHRcdFx0XHQuYXR0cignc3JjJywgY29taW5nLmhyZWYpO1xuXG5cdFx0XHQvLyBUaGlzIGhlbHBzIElFXG5cdFx0XHQkKGNvbWluZy53cmFwKS5iaW5kKCdvblJlc2V0JywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdCQodGhpcykuZmluZCgnaWZyYW1lJykuaGlkZSgpLmF0dHIoJ3NyYycsICcvL2Fib3V0OmJsYW5rJykuZW5kKCkuZW1wdHkoKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoY29taW5nLmlmcmFtZS5wcmVsb2FkKSB7XG5cdFx0XHRcdEYuc2hvd0xvYWRpbmcoKTtcblxuXHRcdFx0XHRpZnJhbWUub25lKCdsb2FkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JCh0aGlzKS5kYXRhKCdyZWFkeScsIDEpO1xuXG5cdFx0XHRcdFx0Ly8gaU9TIHdpbGwgbG9zZSBzY3JvbGxpbmcgaWYgd2UgcmVzaXplXG5cdFx0XHRcdFx0aWYgKCFpc1RvdWNoKSB7XG5cdFx0XHRcdFx0XHQkKHRoaXMpLmJpbmQoJ2xvYWQuZmInLCBGLnVwZGF0ZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gV2l0aG91dCB0aGlzIHRyaWNrOlxuXHRcdFx0XHRcdC8vICAgLSBpZnJhbWUgd29uJ3Qgc2Nyb2xsIG9uIGlPUyBkZXZpY2VzXG5cdFx0XHRcdFx0Ly8gICAtIElFNyBzb21ldGltZXMgZGlzcGxheXMgZW1wdHkgaWZyYW1lXG5cdFx0XHRcdFx0JCh0aGlzKS5wYXJlbnRzKCcuZmFuY3lib3gtd3JhcCcpLndpZHRoKCcxMDAlJykucmVtb3ZlQ2xhc3MoJ2ZhbmN5Ym94LXRtcCcpLnNob3coKTtcblxuXHRcdFx0XHRcdEYuX2FmdGVyTG9hZCgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Y29taW5nLmNvbnRlbnQgPSBpZnJhbWUuYXBwZW5kVG8oIGNvbWluZy5pbm5lciApO1xuXG5cdFx0XHRpZiAoIWNvbWluZy5pZnJhbWUucHJlbG9hZCkge1xuXHRcdFx0XHRGLl9hZnRlckxvYWQoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X3ByZWxvYWRJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGdyb3VwICAgPSBGLmdyb3VwLFxuXHRcdFx0XHRjdXJyZW50ID0gRi5jdXJyZW50LFxuXHRcdFx0XHRsZW4gICAgID0gZ3JvdXAubGVuZ3RoLFxuXHRcdFx0XHRjbnQgICAgID0gY3VycmVudC5wcmVsb2FkID8gTWF0aC5taW4oY3VycmVudC5wcmVsb2FkLCBsZW4gLSAxKSA6IDAsXG5cdFx0XHRcdGl0ZW0sXG5cdFx0XHRcdGk7XG5cblx0XHRcdGZvciAoaSA9IDE7IGkgPD0gY250OyBpICs9IDEpIHtcblx0XHRcdFx0aXRlbSA9IGdyb3VwWyAoY3VycmVudC5pbmRleCArIGkgKSAlIGxlbiBdO1xuXG5cdFx0XHRcdGlmIChpdGVtLnR5cGUgPT09ICdpbWFnZScgJiYgaXRlbS5ocmVmKSB7XG5cdFx0XHRcdFx0bmV3IEltYWdlKCkuc3JjID0gaXRlbS5ocmVmO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdF9hZnRlckxvYWQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBjb21pbmcgICA9IEYuY29taW5nLFxuXHRcdFx0XHRwcmV2aW91cyA9IEYuY3VycmVudCxcblx0XHRcdFx0cGxhY2Vob2xkZXIgPSAnZmFuY3lib3gtcGxhY2Vob2xkZXInLFxuXHRcdFx0XHRjdXJyZW50LFxuXHRcdFx0XHRjb250ZW50LFxuXHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRzY3JvbGxpbmcsXG5cdFx0XHRcdGhyZWYsXG5cdFx0XHRcdGVtYmVkO1xuXG5cdFx0XHRGLmhpZGVMb2FkaW5nKCk7XG5cblx0XHRcdGlmICghY29taW5nIHx8IEYuaXNBY3RpdmUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZhbHNlID09PSBGLnRyaWdnZXIoJ2FmdGVyTG9hZCcsIGNvbWluZywgcHJldmlvdXMpKSB7XG5cdFx0XHRcdGNvbWluZy53cmFwLnN0b3AodHJ1ZSkudHJpZ2dlcignb25SZXNldCcpLnJlbW92ZSgpO1xuXG5cdFx0XHRcdEYuY29taW5nID0gbnVsbDtcblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwcmV2aW91cykge1xuXHRcdFx0XHRGLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIHByZXZpb3VzKTtcblxuXHRcdFx0XHRwcmV2aW91cy53cmFwLnN0b3AodHJ1ZSkucmVtb3ZlQ2xhc3MoJ2ZhbmN5Ym94LW9wZW5lZCcpXG5cdFx0XHRcdFx0LmZpbmQoJy5mYW5jeWJveC1pdGVtLCAuZmFuY3lib3gtbmF2Jylcblx0XHRcdFx0XHQucmVtb3ZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdEYudW5iaW5kRXZlbnRzKCk7XG5cblx0XHRcdGN1cnJlbnQgICA9IGNvbWluZztcblx0XHRcdGNvbnRlbnQgICA9IGNvbWluZy5jb250ZW50O1xuXHRcdFx0dHlwZSAgICAgID0gY29taW5nLnR5cGU7XG5cdFx0XHRzY3JvbGxpbmcgPSBjb21pbmcuc2Nyb2xsaW5nO1xuXG5cdFx0XHQkLmV4dGVuZChGLCB7XG5cdFx0XHRcdHdyYXAgIDogY3VycmVudC53cmFwLFxuXHRcdFx0XHRza2luICA6IGN1cnJlbnQuc2tpbixcblx0XHRcdFx0b3V0ZXIgOiBjdXJyZW50Lm91dGVyLFxuXHRcdFx0XHRpbm5lciA6IGN1cnJlbnQuaW5uZXIsXG5cdFx0XHRcdGN1cnJlbnQgIDogY3VycmVudCxcblx0XHRcdFx0cHJldmlvdXMgOiBwcmV2aW91c1xuXHRcdFx0fSk7XG5cblx0XHRcdGhyZWYgPSBjdXJyZW50LmhyZWY7XG5cblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlICdpbmxpbmUnOlxuXHRcdFx0XHRjYXNlICdhamF4Jzpcblx0XHRcdFx0Y2FzZSAnaHRtbCc6XG5cdFx0XHRcdFx0aWYgKGN1cnJlbnQuc2VsZWN0b3IpIHtcblx0XHRcdFx0XHRcdGNvbnRlbnQgPSAkKCc8ZGl2PicpLmh0bWwoY29udGVudCkuZmluZChjdXJyZW50LnNlbGVjdG9yKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoaXNRdWVyeShjb250ZW50KSkge1xuXHRcdFx0XHRcdFx0aWYgKCFjb250ZW50LmRhdGEocGxhY2Vob2xkZXIpKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRlbnQuZGF0YShwbGFjZWhvbGRlciwgJCgnPGRpdiBjbGFzcz1cIicgKyBwbGFjZWhvbGRlciArICdcIj48L2Rpdj4nKS5pbnNlcnRBZnRlciggY29udGVudCApLmhpZGUoKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb250ZW50ID0gY29udGVudC5zaG93KCkuZGV0YWNoKCk7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnQud3JhcC5iaW5kKCdvblJlc2V0JywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoJCh0aGlzKS5maW5kKGNvbnRlbnQpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnRlbnQuaGlkZSgpLnJlcGxhY2VBbGwoIGNvbnRlbnQuZGF0YShwbGFjZWhvbGRlcikgKS5kYXRhKHBsYWNlaG9sZGVyLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaW1hZ2UnOlxuXHRcdFx0XHRcdGNvbnRlbnQgPSBjdXJyZW50LnRwbC5pbWFnZS5yZXBsYWNlKC9cXHtocmVmXFx9L2csIGhyZWYpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdzd2YnOlxuXHRcdFx0XHRcdGNvbnRlbnQgPSAnPG9iamVjdCBpZD1cImZhbmN5Ym94LXN3ZlwiIGNsYXNzaWQ9XCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIiB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCI+PHBhcmFtIG5hbWU9XCJtb3ZpZVwiIHZhbHVlPVwiJyArIGhyZWYgKyAnXCI+PC9wYXJhbT4nO1xuXHRcdFx0XHRcdGVtYmVkICAgPSAnJztcblxuXHRcdFx0XHRcdCQuZWFjaChjdXJyZW50LnN3ZiwgZnVuY3Rpb24obmFtZSwgdmFsKSB7XG5cdFx0XHRcdFx0XHRjb250ZW50ICs9ICc8cGFyYW0gbmFtZT1cIicgKyBuYW1lICsgJ1wiIHZhbHVlPVwiJyArIHZhbCArICdcIj48L3BhcmFtPic7XG5cdFx0XHRcdFx0XHRlbWJlZCAgICs9ICcgJyArIG5hbWUgKyAnPVwiJyArIHZhbCArICdcIic7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRjb250ZW50ICs9ICc8ZW1iZWQgc3JjPVwiJyArIGhyZWYgKyAnXCIgdHlwZT1cImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiJyArIGVtYmVkICsgJz48L2VtYmVkPjwvb2JqZWN0Pic7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIShpc1F1ZXJ5KGNvbnRlbnQpICYmIGNvbnRlbnQucGFyZW50KCkuaXMoY3VycmVudC5pbm5lcikpKSB7XG5cdFx0XHRcdGN1cnJlbnQuaW5uZXIuYXBwZW5kKCBjb250ZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEdpdmUgYSBjaGFuY2UgZm9yIGhlbHBlcnMgb3IgY2FsbGJhY2tzIHRvIHVwZGF0ZSBlbGVtZW50c1xuXHRcdFx0Ri50cmlnZ2VyKCdiZWZvcmVTaG93Jyk7XG5cblx0XHRcdC8vIFNldCBzY3JvbGxpbmcgYmVmb3JlIGNhbGN1bGF0aW5nIGRpbWVuc2lvbnNcblx0XHRcdGN1cnJlbnQuaW5uZXIuY3NzKCdvdmVyZmxvdycsIHNjcm9sbGluZyA9PT0gJ3llcycgPyAnc2Nyb2xsJyA6IChzY3JvbGxpbmcgPT09ICdubycgPyAnaGlkZGVuJyA6IHNjcm9sbGluZykpO1xuXG5cdFx0XHQvLyBTZXQgaW5pdGlhbCBkaW1lbnNpb25zIGFuZCBzdGFydCBwb3NpdGlvblxuXHRcdFx0Ri5fc2V0RGltZW5zaW9uKCk7XG5cblx0XHRcdEYucmVwb3NpdGlvbigpO1xuXG5cdFx0XHRGLmlzT3BlbiA9IGZhbHNlO1xuXHRcdFx0Ri5jb21pbmcgPSBudWxsO1xuXG5cdFx0XHRGLmJpbmRFdmVudHMoKTtcblxuXHRcdFx0aWYgKCFGLmlzT3BlbmVkKSB7XG5cdFx0XHRcdCQoJy5mYW5jeWJveC13cmFwJykubm90KCBjdXJyZW50LndyYXAgKS5zdG9wKHRydWUpLnRyaWdnZXIoJ29uUmVzZXQnKS5yZW1vdmUoKTtcblxuXHRcdFx0fSBlbHNlIGlmIChwcmV2aW91cy5wcmV2TWV0aG9kKSB7XG5cdFx0XHRcdEYudHJhbnNpdGlvbnNbIHByZXZpb3VzLnByZXZNZXRob2QgXSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRGLnRyYW5zaXRpb25zWyBGLmlzT3BlbmVkID8gY3VycmVudC5uZXh0TWV0aG9kIDogY3VycmVudC5vcGVuTWV0aG9kIF0oKTtcblxuXHRcdFx0Ri5fcHJlbG9hZEltYWdlcygpO1xuXHRcdH0sXG5cblx0XHRfc2V0RGltZW5zaW9uOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgdmlld3BvcnQgICA9IEYuZ2V0Vmlld3BvcnQoKSxcblx0XHRcdFx0c3RlcHMgICAgICA9IDAsXG5cdFx0XHRcdGNhblNocmluayAgPSBmYWxzZSxcblx0XHRcdFx0Y2FuRXhwYW5kICA9IGZhbHNlLFxuXHRcdFx0XHR3cmFwICAgICAgID0gRi53cmFwLFxuXHRcdFx0XHRza2luICAgICAgID0gRi5za2luLFxuXHRcdFx0XHRpbm5lciAgICAgID0gRi5pbm5lcixcblx0XHRcdFx0Y3VycmVudCAgICA9IEYuY3VycmVudCxcblx0XHRcdFx0d2lkdGggICAgICA9IGN1cnJlbnQud2lkdGgsXG5cdFx0XHRcdGhlaWdodCAgICAgPSBjdXJyZW50LmhlaWdodCxcblx0XHRcdFx0bWluV2lkdGggICA9IGN1cnJlbnQubWluV2lkdGgsXG5cdFx0XHRcdG1pbkhlaWdodCAgPSBjdXJyZW50Lm1pbkhlaWdodCxcblx0XHRcdFx0bWF4V2lkdGggICA9IGN1cnJlbnQubWF4V2lkdGgsXG5cdFx0XHRcdG1heEhlaWdodCAgPSBjdXJyZW50Lm1heEhlaWdodCxcblx0XHRcdFx0c2Nyb2xsaW5nICA9IGN1cnJlbnQuc2Nyb2xsaW5nLFxuXHRcdFx0XHRzY3JvbGxPdXQgID0gY3VycmVudC5zY3JvbGxPdXRzaWRlID8gY3VycmVudC5zY3JvbGxiYXJXaWR0aCA6IDAsXG5cdFx0XHRcdG1hcmdpbiAgICAgPSBjdXJyZW50Lm1hcmdpbixcblx0XHRcdFx0d01hcmdpbiAgICA9IGdldFNjYWxhcihtYXJnaW5bMV0gKyBtYXJnaW5bM10pLFxuXHRcdFx0XHRoTWFyZ2luICAgID0gZ2V0U2NhbGFyKG1hcmdpblswXSArIG1hcmdpblsyXSksXG5cdFx0XHRcdHdQYWRkaW5nLFxuXHRcdFx0XHRoUGFkZGluZyxcblx0XHRcdFx0d1NwYWNlLFxuXHRcdFx0XHRoU3BhY2UsXG5cdFx0XHRcdG9yaWdXaWR0aCxcblx0XHRcdFx0b3JpZ0hlaWdodCxcblx0XHRcdFx0b3JpZ01heFdpZHRoLFxuXHRcdFx0XHRvcmlnTWF4SGVpZ2h0LFxuXHRcdFx0XHRyYXRpbyxcblx0XHRcdFx0d2lkdGhfLFxuXHRcdFx0XHRoZWlnaHRfLFxuXHRcdFx0XHRtYXhXaWR0aF8sXG5cdFx0XHRcdG1heEhlaWdodF8sXG5cdFx0XHRcdGlmcmFtZSxcblx0XHRcdFx0Ym9keTtcblxuXHRcdFx0Ly8gUmVzZXQgZGltZW5zaW9ucyBzbyB3ZSBjb3VsZCByZS1jaGVjayBhY3R1YWwgc2l6ZVxuXHRcdFx0d3JhcC5hZGQoc2tpbikuYWRkKGlubmVyKS53aWR0aCgnYXV0bycpLmhlaWdodCgnYXV0bycpLnJlbW92ZUNsYXNzKCdmYW5jeWJveC10bXAnKTtcblxuXHRcdFx0d1BhZGRpbmcgPSBnZXRTY2FsYXIoc2tpbi5vdXRlcldpZHRoKHRydWUpICAtIHNraW4ud2lkdGgoKSk7XG5cdFx0XHRoUGFkZGluZyA9IGdldFNjYWxhcihza2luLm91dGVySGVpZ2h0KHRydWUpIC0gc2tpbi5oZWlnaHQoKSk7XG5cblx0XHRcdC8vIEFueSBzcGFjZSBiZXR3ZWVuIGNvbnRlbnQgYW5kIHZpZXdwb3J0IChtYXJnaW4sIHBhZGRpbmcsIGJvcmRlciwgdGl0bGUpXG5cdFx0XHR3U3BhY2UgPSB3TWFyZ2luICsgd1BhZGRpbmc7XG5cdFx0XHRoU3BhY2UgPSBoTWFyZ2luICsgaFBhZGRpbmc7XG5cblx0XHRcdG9yaWdXaWR0aCAgPSBpc1BlcmNlbnRhZ2Uod2lkdGgpICA/ICh2aWV3cG9ydC53IC0gd1NwYWNlKSAqIGdldFNjYWxhcih3aWR0aCkgIC8gMTAwIDogd2lkdGg7XG5cdFx0XHRvcmlnSGVpZ2h0ID0gaXNQZXJjZW50YWdlKGhlaWdodCkgPyAodmlld3BvcnQuaCAtIGhTcGFjZSkgKiBnZXRTY2FsYXIoaGVpZ2h0KSAvIDEwMCA6IGhlaWdodDtcblxuXHRcdFx0aWYgKGN1cnJlbnQudHlwZSA9PT0gJ2lmcmFtZScpIHtcblx0XHRcdFx0aWZyYW1lID0gY3VycmVudC5jb250ZW50O1xuXG5cdFx0XHRcdGlmIChjdXJyZW50LmF1dG9IZWlnaHQgJiYgaWZyYW1lICYmIGlmcmFtZS5kYXRhKCdyZWFkeScpID09PSAxKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGlmIChpZnJhbWVbMF0uY29udGVudFdpbmRvdy5kb2N1bWVudC5sb2NhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRpbm5lci53aWR0aCggb3JpZ1dpZHRoICkuaGVpZ2h0KDk5OTkpO1xuXG5cdFx0XHRcdFx0XHRcdGJvZHkgPSBpZnJhbWUuY29udGVudHMoKS5maW5kKCdib2R5Jyk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKHNjcm9sbE91dCkge1xuXHRcdFx0XHRcdFx0XHRcdGJvZHkuY3NzKCdvdmVyZmxvdy14JywgJ2hpZGRlbicpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0b3JpZ0hlaWdodCA9IGJvZHkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoY3VycmVudC5hdXRvV2lkdGggfHwgY3VycmVudC5hdXRvSGVpZ2h0KSB7XG5cdFx0XHRcdGlubmVyLmFkZENsYXNzKCAnZmFuY3lib3gtdG1wJyApO1xuXG5cdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgaW4gY2FzZSB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSBvbmx5IG9uZSBkaW1lbnNpb25cblx0XHRcdFx0aWYgKCFjdXJyZW50LmF1dG9XaWR0aCkge1xuXHRcdFx0XHRcdGlubmVyLndpZHRoKCBvcmlnV2lkdGggKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghY3VycmVudC5hdXRvSGVpZ2h0KSB7XG5cdFx0XHRcdFx0aW5uZXIuaGVpZ2h0KCBvcmlnSGVpZ2h0ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudC5hdXRvV2lkdGgpIHtcblx0XHRcdFx0XHRvcmlnV2lkdGggPSBpbm5lci53aWR0aCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnQuYXV0b0hlaWdodCkge1xuXHRcdFx0XHRcdG9yaWdIZWlnaHQgPSBpbm5lci5oZWlnaHQoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlubmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtdG1wJyApO1xuXHRcdFx0fVxuXG5cdFx0XHR3aWR0aCAgPSBnZXRTY2FsYXIoIG9yaWdXaWR0aCApO1xuXHRcdFx0aGVpZ2h0ID0gZ2V0U2NhbGFyKCBvcmlnSGVpZ2h0ICk7XG5cblx0XHRcdHJhdGlvICA9IG9yaWdXaWR0aCAvIG9yaWdIZWlnaHQ7XG5cblx0XHRcdC8vIENhbGN1bGF0aW9ucyBmb3IgdGhlIGNvbnRlbnRcblx0XHRcdG1pbldpZHRoICA9IGdldFNjYWxhcihpc1BlcmNlbnRhZ2UobWluV2lkdGgpID8gZ2V0U2NhbGFyKG1pbldpZHRoLCAndycpIC0gd1NwYWNlIDogbWluV2lkdGgpO1xuXHRcdFx0bWF4V2lkdGggID0gZ2V0U2NhbGFyKGlzUGVyY2VudGFnZShtYXhXaWR0aCkgPyBnZXRTY2FsYXIobWF4V2lkdGgsICd3JykgLSB3U3BhY2UgOiBtYXhXaWR0aCk7XG5cblx0XHRcdG1pbkhlaWdodCA9IGdldFNjYWxhcihpc1BlcmNlbnRhZ2UobWluSGVpZ2h0KSA/IGdldFNjYWxhcihtaW5IZWlnaHQsICdoJykgLSBoU3BhY2UgOiBtaW5IZWlnaHQpO1xuXHRcdFx0bWF4SGVpZ2h0ID0gZ2V0U2NhbGFyKGlzUGVyY2VudGFnZShtYXhIZWlnaHQpID8gZ2V0U2NhbGFyKG1heEhlaWdodCwgJ2gnKSAtIGhTcGFjZSA6IG1heEhlaWdodCk7XG5cblx0XHRcdC8vIFRoZXNlIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgaWYgd3JhcCBjYW4gZml0IGluIHRoZSB2aWV3cG9ydFxuXHRcdFx0b3JpZ01heFdpZHRoICA9IG1heFdpZHRoO1xuXHRcdFx0b3JpZ01heEhlaWdodCA9IG1heEhlaWdodDtcblxuXHRcdFx0aWYgKGN1cnJlbnQuZml0VG9WaWV3KSB7XG5cdFx0XHRcdG1heFdpZHRoICA9IE1hdGgubWluKHZpZXdwb3J0LncgLSB3U3BhY2UsIG1heFdpZHRoKTtcblx0XHRcdFx0bWF4SGVpZ2h0ID0gTWF0aC5taW4odmlld3BvcnQuaCAtIGhTcGFjZSwgbWF4SGVpZ2h0KTtcblx0XHRcdH1cblxuXHRcdFx0bWF4V2lkdGhfICA9IHZpZXdwb3J0LncgLSB3TWFyZ2luO1xuXHRcdFx0bWF4SGVpZ2h0XyA9IHZpZXdwb3J0LmggLSBoTWFyZ2luO1xuXG5cdFx0XHRpZiAoY3VycmVudC5hc3BlY3RSYXRpbykge1xuXHRcdFx0XHRpZiAod2lkdGggPiBtYXhXaWR0aCkge1xuXHRcdFx0XHRcdHdpZHRoICA9IG1heFdpZHRoO1xuXHRcdFx0XHRcdGhlaWdodCA9IGdldFNjYWxhcih3aWR0aCAvIHJhdGlvKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChoZWlnaHQgPiBtYXhIZWlnaHQpIHtcblx0XHRcdFx0XHRoZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0XHRcdFx0d2lkdGggID0gZ2V0U2NhbGFyKGhlaWdodCAqIHJhdGlvKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh3aWR0aCA8IG1pbldpZHRoKSB7XG5cdFx0XHRcdFx0d2lkdGggID0gbWluV2lkdGg7XG5cdFx0XHRcdFx0aGVpZ2h0ID0gZ2V0U2NhbGFyKHdpZHRoIC8gcmF0aW8pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGhlaWdodCA8IG1pbkhlaWdodCkge1xuXHRcdFx0XHRcdGhlaWdodCA9IG1pbkhlaWdodDtcblx0XHRcdFx0XHR3aWR0aCAgPSBnZXRTY2FsYXIoaGVpZ2h0ICogcmF0aW8pO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpZHRoID0gTWF0aC5tYXgobWluV2lkdGgsIE1hdGgubWluKHdpZHRoLCBtYXhXaWR0aCkpO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50LmF1dG9IZWlnaHQgJiYgY3VycmVudC50eXBlICE9PSAnaWZyYW1lJykge1xuXHRcdFx0XHRcdGlubmVyLndpZHRoKCB3aWR0aCApO1xuXG5cdFx0XHRcdFx0aGVpZ2h0ID0gaW5uZXIuaGVpZ2h0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRoZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0KSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyeSB0byBmaXQgaW5zaWRlIHZpZXdwb3J0IChpbmNsdWRpbmcgdGhlIHRpdGxlKVxuXHRcdFx0aWYgKGN1cnJlbnQuZml0VG9WaWV3KSB7XG5cdFx0XHRcdGlubmVyLndpZHRoKCB3aWR0aCApLmhlaWdodCggaGVpZ2h0ICk7XG5cblx0XHRcdFx0d3JhcC53aWR0aCggd2lkdGggKyB3UGFkZGluZyApO1xuXG5cdFx0XHRcdC8vIFJlYWwgd3JhcCBkaW1lbnNpb25zXG5cdFx0XHRcdHdpZHRoXyAgPSB3cmFwLndpZHRoKCk7XG5cdFx0XHRcdGhlaWdodF8gPSB3cmFwLmhlaWdodCgpO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50LmFzcGVjdFJhdGlvKSB7XG5cdFx0XHRcdFx0d2hpbGUgKCh3aWR0aF8gPiBtYXhXaWR0aF8gfHwgaGVpZ2h0XyA+IG1heEhlaWdodF8pICYmIHdpZHRoID4gbWluV2lkdGggJiYgaGVpZ2h0ID4gbWluSGVpZ2h0KSB7XG5cdFx0XHRcdFx0XHRpZiAoc3RlcHMrKyA+IDE5KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIE1hdGgubWluKG1heEhlaWdodCwgaGVpZ2h0IC0gMTApKTtcblx0XHRcdFx0XHRcdHdpZHRoICA9IGdldFNjYWxhcihoZWlnaHQgKiByYXRpbyk7XG5cblx0XHRcdFx0XHRcdGlmICh3aWR0aCA8IG1pbldpZHRoKSB7XG5cdFx0XHRcdFx0XHRcdHdpZHRoICA9IG1pbldpZHRoO1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPSBnZXRTY2FsYXIod2lkdGggLyByYXRpbyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICh3aWR0aCA+IG1heFdpZHRoKSB7XG5cdFx0XHRcdFx0XHRcdHdpZHRoICA9IG1heFdpZHRoO1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPSBnZXRTY2FsYXIod2lkdGggLyByYXRpbyk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlubmVyLndpZHRoKCB3aWR0aCApLmhlaWdodCggaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRcdHdyYXAud2lkdGgoIHdpZHRoICsgd1BhZGRpbmcgKTtcblxuXHRcdFx0XHRcdFx0d2lkdGhfICA9IHdyYXAud2lkdGgoKTtcblx0XHRcdFx0XHRcdGhlaWdodF8gPSB3cmFwLmhlaWdodCgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHdpZHRoICA9IE1hdGgubWF4KG1pbldpZHRoLCAgTWF0aC5taW4od2lkdGgsICB3aWR0aCAgLSAod2lkdGhfICAtIG1heFdpZHRoXykpKTtcblx0XHRcdFx0XHRoZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIE1hdGgubWluKGhlaWdodCwgaGVpZ2h0IC0gKGhlaWdodF8gLSBtYXhIZWlnaHRfKSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzY3JvbGxPdXQgJiYgc2Nyb2xsaW5nID09PSAnYXV0bycgJiYgaGVpZ2h0IDwgb3JpZ0hlaWdodCAmJiAod2lkdGggKyB3UGFkZGluZyArIHNjcm9sbE91dCkgPCBtYXhXaWR0aF8pIHtcblx0XHRcdFx0d2lkdGggKz0gc2Nyb2xsT3V0O1xuXHRcdFx0fVxuXG5cdFx0XHRpbm5lci53aWR0aCggd2lkdGggKS5oZWlnaHQoIGhlaWdodCApO1xuXG5cdFx0XHR3cmFwLndpZHRoKCB3aWR0aCArIHdQYWRkaW5nICk7XG5cblx0XHRcdHdpZHRoXyAgPSB3cmFwLndpZHRoKCk7XG5cdFx0XHRoZWlnaHRfID0gd3JhcC5oZWlnaHQoKTtcblxuXHRcdFx0Y2FuU2hyaW5rID0gKHdpZHRoXyA+IG1heFdpZHRoXyB8fCBoZWlnaHRfID4gbWF4SGVpZ2h0XykgJiYgd2lkdGggPiBtaW5XaWR0aCAmJiBoZWlnaHQgPiBtaW5IZWlnaHQ7XG5cdFx0XHRjYW5FeHBhbmQgPSBjdXJyZW50LmFzcGVjdFJhdGlvID8gKHdpZHRoIDwgb3JpZ01heFdpZHRoICYmIGhlaWdodCA8IG9yaWdNYXhIZWlnaHQgJiYgd2lkdGggPCBvcmlnV2lkdGggJiYgaGVpZ2h0IDwgb3JpZ0hlaWdodCkgOiAoKHdpZHRoIDwgb3JpZ01heFdpZHRoIHx8IGhlaWdodCA8IG9yaWdNYXhIZWlnaHQpICYmICh3aWR0aCA8IG9yaWdXaWR0aCB8fCBoZWlnaHQgPCBvcmlnSGVpZ2h0KSk7XG5cblx0XHRcdCQuZXh0ZW5kKGN1cnJlbnQsIHtcblx0XHRcdFx0ZGltIDoge1xuXHRcdFx0XHRcdHdpZHRoXHQ6IGdldFZhbHVlKCB3aWR0aF8gKSxcblx0XHRcdFx0XHRoZWlnaHRcdDogZ2V0VmFsdWUoIGhlaWdodF8gKVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvcmlnV2lkdGggIDogb3JpZ1dpZHRoLFxuXHRcdFx0XHRvcmlnSGVpZ2h0IDogb3JpZ0hlaWdodCxcblx0XHRcdFx0Y2FuU2hyaW5rICA6IGNhblNocmluayxcblx0XHRcdFx0Y2FuRXhwYW5kICA6IGNhbkV4cGFuZCxcblx0XHRcdFx0d1BhZGRpbmcgICA6IHdQYWRkaW5nLFxuXHRcdFx0XHRoUGFkZGluZyAgIDogaFBhZGRpbmcsXG5cdFx0XHRcdHdyYXBTcGFjZSAgOiBoZWlnaHRfIC0gc2tpbi5vdXRlckhlaWdodCh0cnVlKSxcblx0XHRcdFx0c2tpblNwYWNlICA6IHNraW4uaGVpZ2h0KCkgLSBoZWlnaHRcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoIWlmcmFtZSAmJiBjdXJyZW50LmF1dG9IZWlnaHQgJiYgaGVpZ2h0ID4gbWluSGVpZ2h0ICYmIGhlaWdodCA8IG1heEhlaWdodCAmJiAhY2FuRXhwYW5kKSB7XG5cdFx0XHRcdGlubmVyLmhlaWdodCgnYXV0bycpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRfZ2V0UG9zaXRpb246IGZ1bmN0aW9uIChvbmx5QWJzb2x1dGUpIHtcblx0XHRcdHZhciBjdXJyZW50ICA9IEYuY3VycmVudCxcblx0XHRcdFx0dmlld3BvcnQgPSBGLmdldFZpZXdwb3J0KCksXG5cdFx0XHRcdG1hcmdpbiAgID0gY3VycmVudC5tYXJnaW4sXG5cdFx0XHRcdHdpZHRoICAgID0gRi53cmFwLndpZHRoKCkgICsgbWFyZ2luWzFdICsgbWFyZ2luWzNdLFxuXHRcdFx0XHRoZWlnaHQgICA9IEYud3JhcC5oZWlnaHQoKSArIG1hcmdpblswXSArIG1hcmdpblsyXSxcblx0XHRcdFx0cmV6ICAgICAgPSB7XG5cdFx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdFx0XHRcdFx0dG9wICA6IG1hcmdpblswXSxcblx0XHRcdFx0XHRsZWZ0IDogbWFyZ2luWzNdXG5cdFx0XHRcdH07XG5cblx0XHRcdGlmIChjdXJyZW50LmF1dG9DZW50ZXIgJiYgY3VycmVudC5maXhlZCAmJiAhb25seUFic29sdXRlICYmIGhlaWdodCA8PSB2aWV3cG9ydC5oICYmIHdpZHRoIDw9IHZpZXdwb3J0LncpIHtcblx0XHRcdFx0cmV6LnBvc2l0aW9uID0gJ2ZpeGVkJztcblxuXHRcdFx0fSBlbHNlIGlmICghY3VycmVudC5sb2NrZWQpIHtcblx0XHRcdFx0cmV6LnRvcCAgKz0gdmlld3BvcnQueTtcblx0XHRcdFx0cmV6LmxlZnQgKz0gdmlld3BvcnQueDtcblx0XHRcdH1cblxuXHRcdFx0cmV6LnRvcCAgPSBnZXRWYWx1ZShNYXRoLm1heChyZXoudG9wLCAgcmV6LnRvcCAgKyAoKHZpZXdwb3J0LmggLSBoZWlnaHQpICogY3VycmVudC50b3BSYXRpbykpKTtcblx0XHRcdHJlei5sZWZ0ID0gZ2V0VmFsdWUoTWF0aC5tYXgocmV6LmxlZnQsIHJlei5sZWZ0ICsgKCh2aWV3cG9ydC53IC0gd2lkdGgpICAqIGN1cnJlbnQubGVmdFJhdGlvKSkpO1xuXG5cdFx0XHRyZXR1cm4gcmV6O1xuXHRcdH0sXG5cblx0XHRfYWZ0ZXJab29tSW46IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBjdXJyZW50ID0gRi5jdXJyZW50O1xuXG5cdFx0XHRpZiAoIWN1cnJlbnQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRGLmlzT3BlbiA9IEYuaXNPcGVuZWQgPSB0cnVlO1xuXG5cdFx0XHRGLndyYXAuY3NzKCdvdmVyZmxvdycsICd2aXNpYmxlJykuYWRkQ2xhc3MoJ2ZhbmN5Ym94LW9wZW5lZCcpLmhpZGUoKS5zaG93KDApO1xuXG5cdFx0XHRGLnVwZGF0ZSgpO1xuXG5cdFx0XHQvLyBBc3NpZ24gYSBjbGljayBldmVudFxuXHRcdFx0aWYgKCBjdXJyZW50LmNsb3NlQ2xpY2sgfHwgKGN1cnJlbnQubmV4dENsaWNrICYmIEYuZ3JvdXAubGVuZ3RoID4gMSkgKSB7XG5cdFx0XHRcdEYuaW5uZXIuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpLmJpbmQoJ2NsaWNrLmZiJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGlmICghJChlLnRhcmdldCkuaXMoJ2EnKSAmJiAhJChlLnRhcmdldCkucGFyZW50KCkuaXMoJ2EnKSkge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHRGWyBjdXJyZW50LmNsb3NlQ2xpY2sgPyAnY2xvc2UnIDogJ25leHQnIF0oKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDcmVhdGUgYSBjbG9zZSBidXR0b25cblx0XHRcdGlmIChjdXJyZW50LmNsb3NlQnRuKSB7XG5cdFx0XHRcdCQoY3VycmVudC50cGwuY2xvc2VCdG4pLmFwcGVuZFRvKEYuc2tpbikuYmluZCgnY2xpY2suZmInLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0Ri5jbG9zZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3JlYXRlIG5hdmlnYXRpb24gYXJyb3dzXG5cdFx0XHRpZiAoY3VycmVudC5hcnJvd3MgJiYgRi5ncm91cC5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdGlmIChjdXJyZW50Lmxvb3AgfHwgY3VycmVudC5pbmRleCA+IDApIHtcblx0XHRcdFx0XHQkKGN1cnJlbnQudHBsLnByZXYpLmFwcGVuZFRvKEYub3V0ZXIpLmJpbmQoJ2NsaWNrLmZiJywgRi5wcmV2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjdXJyZW50Lmxvb3AgfHwgY3VycmVudC5pbmRleCA8IEYuZ3JvdXAubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdCQoY3VycmVudC50cGwubmV4dCkuYXBwZW5kVG8oRi5vdXRlcikuYmluZCgnY2xpY2suZmInLCBGLm5leHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdEYudHJpZ2dlcignYWZ0ZXJTaG93Jyk7XG5cblx0XHRcdC8vIFN0b3AgdGhlIHNsaWRlc2hvdyBpZiB0aGlzIGlzIHRoZSBsYXN0IGl0ZW1cblx0XHRcdGlmICghY3VycmVudC5sb29wICYmIGN1cnJlbnQuaW5kZXggPT09IGN1cnJlbnQuZ3JvdXAubGVuZ3RoIC0gMSkge1xuXG5cdFx0XHRcdEYucGxheSggZmFsc2UgKTtcblxuXHRcdFx0fSBlbHNlIGlmIChGLm9wdHMuYXV0b1BsYXkgJiYgIUYucGxheWVyLmlzQWN0aXZlKSB7XG5cdFx0XHRcdEYub3B0cy5hdXRvUGxheSA9IGZhbHNlO1xuXG5cdFx0XHRcdEYucGxheSh0cnVlKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0X2FmdGVyWm9vbU91dDogZnVuY3Rpb24gKCBvYmogKSB7XG5cdFx0XHRvYmogPSBvYmogfHwgRi5jdXJyZW50O1xuXG5cdFx0XHQkKCcuZmFuY3lib3gtd3JhcCcpLnRyaWdnZXIoJ29uUmVzZXQnKS5yZW1vdmUoKTtcblxuXHRcdFx0JC5leHRlbmQoRiwge1xuXHRcdFx0XHRncm91cCAgOiB7fSxcblx0XHRcdFx0b3B0cyAgIDoge30sXG5cdFx0XHRcdHJvdXRlciA6IGZhbHNlLFxuXHRcdFx0XHRjdXJyZW50ICAgOiBudWxsLFxuXHRcdFx0XHRpc0FjdGl2ZSAgOiBmYWxzZSxcblx0XHRcdFx0aXNPcGVuZWQgIDogZmFsc2UsXG5cdFx0XHRcdGlzT3BlbiAgICA6IGZhbHNlLFxuXHRcdFx0XHRpc0Nsb3NpbmcgOiBmYWxzZSxcblx0XHRcdFx0d3JhcCAgIDogbnVsbCxcblx0XHRcdFx0c2tpbiAgIDogbnVsbCxcblx0XHRcdFx0b3V0ZXIgIDogbnVsbCxcblx0XHRcdFx0aW5uZXIgIDogbnVsbFxuXHRcdFx0fSk7XG5cblx0XHRcdEYudHJpZ2dlcignYWZ0ZXJDbG9zZScsIG9iaik7XG5cdFx0fVxuXHR9KTtcblxuXHQvKlxuXHQgKlx0RGVmYXVsdCB0cmFuc2l0aW9uc1xuXHQgKi9cblxuXHRGLnRyYW5zaXRpb25zID0ge1xuXHRcdGdldE9yaWdQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGN1cnJlbnQgID0gRi5jdXJyZW50LFxuXHRcdFx0XHRlbGVtZW50ICA9IGN1cnJlbnQuZWxlbWVudCxcblx0XHRcdFx0b3JpZyAgICAgPSBjdXJyZW50Lm9yaWcsXG5cdFx0XHRcdHBvcyAgICAgID0ge30sXG5cdFx0XHRcdHdpZHRoICAgID0gNTAsXG5cdFx0XHRcdGhlaWdodCAgID0gNTAsXG5cdFx0XHRcdGhQYWRkaW5nID0gY3VycmVudC5oUGFkZGluZyxcblx0XHRcdFx0d1BhZGRpbmcgPSBjdXJyZW50LndQYWRkaW5nLFxuXHRcdFx0XHR2aWV3cG9ydCA9IEYuZ2V0Vmlld3BvcnQoKTtcblxuXHRcdFx0aWYgKCFvcmlnICYmIGN1cnJlbnQuaXNEb20gJiYgZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xuXHRcdFx0XHRvcmlnID0gZWxlbWVudC5maW5kKCdpbWc6Zmlyc3QnKTtcblxuXHRcdFx0XHRpZiAoIW9yaWcubGVuZ3RoKSB7XG5cdFx0XHRcdFx0b3JpZyA9IGVsZW1lbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzUXVlcnkob3JpZykpIHtcblx0XHRcdFx0cG9zID0gb3JpZy5vZmZzZXQoKTtcblxuXHRcdFx0XHRpZiAob3JpZy5pcygnaW1nJykpIHtcblx0XHRcdFx0XHR3aWR0aCAgPSBvcmlnLm91dGVyV2lkdGgoKTtcblx0XHRcdFx0XHRoZWlnaHQgPSBvcmlnLm91dGVySGVpZ2h0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cG9zLnRvcCAgPSB2aWV3cG9ydC55ICsgKHZpZXdwb3J0LmggLSBoZWlnaHQpICogY3VycmVudC50b3BSYXRpbztcblx0XHRcdFx0cG9zLmxlZnQgPSB2aWV3cG9ydC54ICsgKHZpZXdwb3J0LncgLSB3aWR0aCkgICogY3VycmVudC5sZWZ0UmF0aW87XG5cdFx0XHR9XG5cblx0XHRcdGlmIChGLndyYXAuY3NzKCdwb3NpdGlvbicpID09PSAnZml4ZWQnIHx8IGN1cnJlbnQubG9ja2VkKSB7XG5cdFx0XHRcdHBvcy50b3AgIC09IHZpZXdwb3J0Lnk7XG5cdFx0XHRcdHBvcy5sZWZ0IC09IHZpZXdwb3J0Lng7XG5cdFx0XHR9XG5cblx0XHRcdHBvcyA9IHtcblx0XHRcdFx0dG9wICAgICA6IGdldFZhbHVlKHBvcy50b3AgIC0gaFBhZGRpbmcgKiBjdXJyZW50LnRvcFJhdGlvKSxcblx0XHRcdFx0bGVmdCAgICA6IGdldFZhbHVlKHBvcy5sZWZ0IC0gd1BhZGRpbmcgKiBjdXJyZW50LmxlZnRSYXRpbyksXG5cdFx0XHRcdHdpZHRoICAgOiBnZXRWYWx1ZSh3aWR0aCAgKyB3UGFkZGluZyksXG5cdFx0XHRcdGhlaWdodCAgOiBnZXRWYWx1ZShoZWlnaHQgKyBoUGFkZGluZylcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBwb3M7XG5cdFx0fSxcblxuXHRcdHN0ZXA6IGZ1bmN0aW9uIChub3csIGZ4KSB7XG5cdFx0XHR2YXIgcmF0aW8sXG5cdFx0XHRcdHBhZGRpbmcsXG5cdFx0XHRcdHZhbHVlLFxuXHRcdFx0XHRwcm9wICAgICAgID0gZngucHJvcCxcblx0XHRcdFx0Y3VycmVudCAgICA9IEYuY3VycmVudCxcblx0XHRcdFx0d3JhcFNwYWNlICA9IGN1cnJlbnQud3JhcFNwYWNlLFxuXHRcdFx0XHRza2luU3BhY2UgID0gY3VycmVudC5za2luU3BhY2U7XG5cblx0XHRcdGlmIChwcm9wID09PSAnd2lkdGgnIHx8IHByb3AgPT09ICdoZWlnaHQnKSB7XG5cdFx0XHRcdHJhdGlvID0gZnguZW5kID09PSBmeC5zdGFydCA/IDEgOiAobm93IC0gZnguc3RhcnQpIC8gKGZ4LmVuZCAtIGZ4LnN0YXJ0KTtcblxuXHRcdFx0XHRpZiAoRi5pc0Nsb3NpbmcpIHtcblx0XHRcdFx0XHRyYXRpbyA9IDEgLSByYXRpbztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBhZGRpbmcgPSBwcm9wID09PSAnd2lkdGgnID8gY3VycmVudC53UGFkZGluZyA6IGN1cnJlbnQuaFBhZGRpbmc7XG5cdFx0XHRcdHZhbHVlICAgPSBub3cgLSBwYWRkaW5nO1xuXG5cdFx0XHRcdEYuc2tpblsgcHJvcCBdKCAgZ2V0U2NhbGFyKCBwcm9wID09PSAnd2lkdGgnID8gIHZhbHVlIDogdmFsdWUgLSAod3JhcFNwYWNlICogcmF0aW8pICkgKTtcblx0XHRcdFx0Ri5pbm5lclsgcHJvcCBdKCBnZXRTY2FsYXIoIHByb3AgPT09ICd3aWR0aCcgPyAgdmFsdWUgOiB2YWx1ZSAtICh3cmFwU3BhY2UgKiByYXRpbykgLSAoc2tpblNwYWNlICogcmF0aW8pICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0em9vbUluOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgY3VycmVudCAgPSBGLmN1cnJlbnQsXG5cdFx0XHRcdHN0YXJ0UG9zID0gY3VycmVudC5wb3MsXG5cdFx0XHRcdGVmZmVjdCAgID0gY3VycmVudC5vcGVuRWZmZWN0LFxuXHRcdFx0XHRlbGFzdGljICA9IGVmZmVjdCA9PT0gJ2VsYXN0aWMnLFxuXHRcdFx0XHRlbmRQb3MgICA9ICQuZXh0ZW5kKHtvcGFjaXR5IDogMX0sIHN0YXJ0UG9zKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIFwicG9zaXRpb25cIiBwcm9wZXJ0eSB0aGF0IGJyZWFrcyBvbGRlciBJRVxuXHRcdFx0ZGVsZXRlIGVuZFBvcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKGVsYXN0aWMpIHtcblx0XHRcdFx0c3RhcnRQb3MgPSB0aGlzLmdldE9yaWdQb3NpdGlvbigpO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50Lm9wZW5PcGFjaXR5KSB7XG5cdFx0XHRcdFx0c3RhcnRQb3Mub3BhY2l0eSA9IDAuMTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKGVmZmVjdCA9PT0gJ2ZhZGUnKSB7XG5cdFx0XHRcdHN0YXJ0UG9zLm9wYWNpdHkgPSAwLjE7XG5cdFx0XHR9XG5cblx0XHRcdEYud3JhcC5jc3Moc3RhcnRQb3MpLmFuaW1hdGUoZW5kUG9zLCB7XG5cdFx0XHRcdGR1cmF0aW9uIDogZWZmZWN0ID09PSAnbm9uZScgPyAwIDogY3VycmVudC5vcGVuU3BlZWQsXG5cdFx0XHRcdGVhc2luZyAgIDogY3VycmVudC5vcGVuRWFzaW5nLFxuXHRcdFx0XHRzdGVwICAgICA6IGVsYXN0aWMgPyB0aGlzLnN0ZXAgOiBudWxsLFxuXHRcdFx0XHRjb21wbGV0ZSA6IEYuX2FmdGVyWm9vbUluXG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0em9vbU91dDogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGN1cnJlbnQgID0gRi5jdXJyZW50LFxuXHRcdFx0XHRlZmZlY3QgICA9IGN1cnJlbnQuY2xvc2VFZmZlY3QsXG5cdFx0XHRcdGVsYXN0aWMgID0gZWZmZWN0ID09PSAnZWxhc3RpYycsXG5cdFx0XHRcdGVuZFBvcyAgID0ge29wYWNpdHkgOiAwLjF9O1xuXG5cdFx0XHRpZiAoZWxhc3RpYykge1xuXHRcdFx0XHRlbmRQb3MgPSB0aGlzLmdldE9yaWdQb3NpdGlvbigpO1xuXG5cdFx0XHRcdGlmIChjdXJyZW50LmNsb3NlT3BhY2l0eSkge1xuXHRcdFx0XHRcdGVuZFBvcy5vcGFjaXR5ID0gMC4xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdEYud3JhcC5hbmltYXRlKGVuZFBvcywge1xuXHRcdFx0XHRkdXJhdGlvbiA6IGVmZmVjdCA9PT0gJ25vbmUnID8gMCA6IGN1cnJlbnQuY2xvc2VTcGVlZCxcblx0XHRcdFx0ZWFzaW5nICAgOiBjdXJyZW50LmNsb3NlRWFzaW5nLFxuXHRcdFx0XHRzdGVwICAgICA6IGVsYXN0aWMgPyB0aGlzLnN0ZXAgOiBudWxsLFxuXHRcdFx0XHRjb21wbGV0ZSA6IEYuX2FmdGVyWm9vbU91dFxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGNoYW5nZUluOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgY3VycmVudCAgID0gRi5jdXJyZW50LFxuXHRcdFx0XHRlZmZlY3QgICAgPSBjdXJyZW50Lm5leHRFZmZlY3QsXG5cdFx0XHRcdHN0YXJ0UG9zICA9IGN1cnJlbnQucG9zLFxuXHRcdFx0XHRlbmRQb3MgICAgPSB7IG9wYWNpdHkgOiAxIH0sXG5cdFx0XHRcdGRpcmVjdGlvbiA9IEYuZGlyZWN0aW9uLFxuXHRcdFx0XHRkaXN0YW5jZSAgPSAyMDAsXG5cdFx0XHRcdGZpZWxkO1xuXG5cdFx0XHRzdGFydFBvcy5vcGFjaXR5ID0gMC4xO1xuXG5cdFx0XHRpZiAoZWZmZWN0ID09PSAnZWxhc3RpYycpIHtcblx0XHRcdFx0ZmllbGQgPSBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICd1cCcgPyAndG9wJyA6ICdsZWZ0JztcblxuXHRcdFx0XHRpZiAoZGlyZWN0aW9uID09PSAnZG93bicgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG5cdFx0XHRcdFx0c3RhcnRQb3NbIGZpZWxkIF0gPSBnZXRWYWx1ZShnZXRTY2FsYXIoc3RhcnRQb3NbIGZpZWxkIF0pIC0gZGlzdGFuY2UpO1xuXHRcdFx0XHRcdGVuZFBvc1sgZmllbGQgXSAgID0gJys9JyArIGRpc3RhbmNlICsgJ3B4JztcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXJ0UG9zWyBmaWVsZCBdID0gZ2V0VmFsdWUoZ2V0U2NhbGFyKHN0YXJ0UG9zWyBmaWVsZCBdKSArIGRpc3RhbmNlKTtcblx0XHRcdFx0XHRlbmRQb3NbIGZpZWxkIF0gICA9ICctPScgKyBkaXN0YW5jZSArICdweCc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gV29ya2Fyb3VuZCBmb3IgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyNzNcblx0XHRcdGlmIChlZmZlY3QgPT09ICdub25lJykge1xuXHRcdFx0XHRGLl9hZnRlclpvb21JbigpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRGLndyYXAuY3NzKHN0YXJ0UG9zKS5hbmltYXRlKGVuZFBvcywge1xuXHRcdFx0XHRcdGR1cmF0aW9uIDogY3VycmVudC5uZXh0U3BlZWQsXG5cdFx0XHRcdFx0ZWFzaW5nICAgOiBjdXJyZW50Lm5leHRFYXNpbmcsXG5cdFx0XHRcdFx0Y29tcGxldGUgOiBGLl9hZnRlclpvb21JblxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Y2hhbmdlT3V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgcHJldmlvdXMgID0gRi5wcmV2aW91cyxcblx0XHRcdFx0ZWZmZWN0ICAgID0gcHJldmlvdXMucHJldkVmZmVjdCxcblx0XHRcdFx0ZW5kUG9zICAgID0geyBvcGFjaXR5IDogMC4xIH0sXG5cdFx0XHRcdGRpcmVjdGlvbiA9IEYuZGlyZWN0aW9uLFxuXHRcdFx0XHRkaXN0YW5jZSAgPSAyMDA7XG5cblx0XHRcdGlmIChlZmZlY3QgPT09ICdlbGFzdGljJykge1xuXHRcdFx0XHRlbmRQb3NbIGRpcmVjdGlvbiA9PT0gJ2Rvd24nIHx8IGRpcmVjdGlvbiA9PT0gJ3VwJyA/ICd0b3AnIDogJ2xlZnQnIF0gPSAoIGRpcmVjdGlvbiA9PT0gJ3VwJyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/ICctJyA6ICcrJyApICsgJz0nICsgZGlzdGFuY2UgKyAncHgnO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmV2aW91cy53cmFwLmFuaW1hdGUoZW5kUG9zLCB7XG5cdFx0XHRcdGR1cmF0aW9uIDogZWZmZWN0ID09PSAnbm9uZScgPyAwIDogcHJldmlvdXMucHJldlNwZWVkLFxuXHRcdFx0XHRlYXNpbmcgICA6IHByZXZpb3VzLnByZXZFYXNpbmcsXG5cdFx0XHRcdGNvbXBsZXRlIDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdCQodGhpcykudHJpZ2dlcignb25SZXNldCcpLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0Lypcblx0ICpcdE92ZXJsYXkgaGVscGVyXG5cdCAqL1xuXG5cdEYuaGVscGVycy5vdmVybGF5ID0ge1xuXHRcdGRlZmF1bHRzIDoge1xuXHRcdFx0Y2xvc2VDbGljayA6IHRydWUsICAgICAgLy8gaWYgdHJ1ZSwgZmFuY3lCb3ggd2lsbCBiZSBjbG9zZWQgd2hlbiB1c2VyIGNsaWNrcyBvbiB0aGUgb3ZlcmxheVxuXHRcdFx0c3BlZWRPdXQgICA6IDIwMCwgICAgICAgLy8gZHVyYXRpb24gb2YgZmFkZU91dCBhbmltYXRpb25cblx0XHRcdHNob3dFYXJseSAgOiB0cnVlLCAgICAgIC8vIGluZGljYXRlcyBpZiBzaG91bGQgYmUgb3BlbmVkIGltbWVkaWF0ZWx5IG9yIHdhaXQgdW50aWwgdGhlIGNvbnRlbnQgaXMgcmVhZHlcblx0XHRcdGNzcyAgICAgICAgOiB7fSwgICAgICAgIC8vIGN1c3RvbSBDU1MgcHJvcGVydGllc1xuXHRcdFx0bG9ja2VkICAgICA6ICFpc1RvdWNoLCAgLy8gaWYgdHJ1ZSwgdGhlIGNvbnRlbnQgd2lsbCBiZSBsb2NrZWQgaW50byBvdmVybGF5XG5cdFx0XHRmaXhlZCAgICAgIDogdHJ1ZSAgICAgICAvLyBpZiBmYWxzZSwgdGhlIG92ZXJsYXkgQ1NTIHBvc2l0aW9uIHByb3BlcnR5IHdpbGwgbm90IGJlIHNldCB0byBcImZpeGVkXCJcblx0XHR9LFxuXG5cdFx0b3ZlcmxheSA6IG51bGwsICAgICAgLy8gY3VycmVudCBoYW5kbGVcblx0XHRmaXhlZCAgIDogZmFsc2UsICAgICAvLyBpbmRpY2F0ZXMgaWYgdGhlIG92ZXJsYXkgaGFzIHBvc2l0aW9uIFwiZml4ZWRcIlxuXHRcdGVsICAgICAgOiAkKCdodG1sJyksIC8vIGVsZW1lbnQgdGhhdCBjb250YWlucyBcInRoZSBsb2NrXCJcblxuXHRcdC8vIFB1YmxpYyBtZXRob2RzXG5cdFx0Y3JlYXRlIDogZnVuY3Rpb24ob3B0cykge1xuXHRcdFx0dmFyIHBhcmVudDtcblxuXHRcdFx0b3B0cyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRzKTtcblxuXHRcdFx0aWYgKHRoaXMub3ZlcmxheSkge1xuXHRcdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHBhcmVudCA9IEYuY29taW5nID8gRi5jb21pbmcucGFyZW50IDogb3B0cy5wYXJlbnQ7XG5cblx0XHRcdHRoaXMub3ZlcmxheSA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1vdmVybGF5XCI+PC9kaXY+JykuYXBwZW5kVG8oIHBhcmVudCAmJiBwYXJlbnQubGVuZ3RoID8gcGFyZW50IDogJ2JvZHknICk7XG5cdFx0XHR0aGlzLmZpeGVkICAgPSBmYWxzZTtcblxuXHRcdFx0aWYgKG9wdHMuZml4ZWQgJiYgRi5kZWZhdWx0cy5maXhlZCkge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXkuYWRkQ2xhc3MoJ2ZhbmN5Ym94LW92ZXJsYXktZml4ZWQnKTtcblxuXHRcdFx0XHR0aGlzLmZpeGVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b3BlbiA6IGZ1bmN0aW9uKG9wdHMpIHtcblx0XHRcdHZhciB0aGF0ID0gdGhpcztcblxuXHRcdFx0b3B0cyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRzKTtcblxuXHRcdFx0aWYgKHRoaXMub3ZlcmxheSkge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXkudW5iaW5kKCcub3ZlcmxheScpLndpZHRoKCdhdXRvJykuaGVpZ2h0KCdhdXRvJyk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuY3JlYXRlKG9wdHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuZml4ZWQpIHtcblx0XHRcdFx0Vy5iaW5kKCdyZXNpemUub3ZlcmxheScsICQucHJveHkoIHRoaXMudXBkYXRlLCB0aGlzKSApO1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRzLmNsb3NlQ2xpY2spIHtcblx0XHRcdFx0dGhpcy5vdmVybGF5LmJpbmQoJ2NsaWNrLm92ZXJsYXknLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCdmYW5jeWJveC1vdmVybGF5JykpIHtcblx0XHRcdFx0XHRcdGlmIChGLmlzQWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRcdEYuY2xvc2UoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoYXQuY2xvc2UoKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMub3ZlcmxheS5jc3MoIG9wdHMuY3NzICkuc2hvdygpO1xuXHRcdH0sXG5cblx0XHRjbG9zZSA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Vy51bmJpbmQoJ3Jlc2l6ZS5vdmVybGF5Jyk7XG5cblx0XHRcdGlmICh0aGlzLmVsLmhhc0NsYXNzKCdmYW5jeWJveC1sb2NrJykpIHtcblx0XHRcdFx0JCgnLmZhbmN5Ym94LW1hcmdpbicpLnJlbW92ZUNsYXNzKCdmYW5jeWJveC1tYXJnaW4nKTtcblxuXHRcdFx0XHR0aGlzLmVsLnJlbW92ZUNsYXNzKCdmYW5jeWJveC1sb2NrJyk7XG5cblx0XHRcdFx0Vy5zY3JvbGxUb3AoIHRoaXMuc2Nyb2xsViApLnNjcm9sbExlZnQoIHRoaXMuc2Nyb2xsSCApO1xuXHRcdFx0fVxuXG5cdFx0XHQkKCcuZmFuY3lib3gtb3ZlcmxheScpLnJlbW92ZSgpLmhpZGUoKTtcblxuXHRcdFx0JC5leHRlbmQodGhpcywge1xuXHRcdFx0XHRvdmVybGF5IDogbnVsbCxcblx0XHRcdFx0Zml4ZWQgICA6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Ly8gUHJpdmF0ZSwgY2FsbGJhY2tzXG5cblx0XHR1cGRhdGUgOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgd2lkdGggPSAnMTAwJScsIG9mZnNldFdpZHRoO1xuXG5cdFx0XHQvLyBSZXNldCB3aWR0aC9oZWlnaHQgc28gaXQgd2lsbCBub3QgbWVzc1xuXHRcdFx0dGhpcy5vdmVybGF5LndpZHRoKHdpZHRoKS5oZWlnaHQoJzEwMCUnKTtcblxuXHRcdFx0Ly8galF1ZXJ5IGRvZXMgbm90IHJldHVybiByZWxpYWJsZSByZXN1bHQgZm9yIElFXG5cdFx0XHRpZiAoSUUpIHtcblx0XHRcdFx0b2Zmc2V0V2lkdGggPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGgsIGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGgpO1xuXG5cdFx0XHRcdGlmIChELndpZHRoKCkgPiBvZmZzZXRXaWR0aCkge1xuXHRcdFx0XHRcdHdpZHRoID0gRC53aWR0aCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoRC53aWR0aCgpID4gVy53aWR0aCgpKSB7XG5cdFx0XHRcdHdpZHRoID0gRC53aWR0aCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm92ZXJsYXkud2lkdGgod2lkdGgpLmhlaWdodChELmhlaWdodCgpKTtcblx0XHR9LFxuXG5cdFx0Ly8gVGhpcyBpcyB3aGVyZSB3ZSBjYW4gbWFuaXB1bGF0ZSBET00sIGJlY2F1c2UgbGF0ZXIgaXQgd291bGQgY2F1c2UgaWZyYW1lcyB0byByZWxvYWRcblx0XHRvblJlYWR5IDogZnVuY3Rpb24gKG9wdHMsIG9iaikge1xuXHRcdFx0dmFyIG92ZXJsYXkgPSB0aGlzLm92ZXJsYXk7XG5cblx0XHRcdCQoJy5mYW5jeWJveC1vdmVybGF5Jykuc3RvcCh0cnVlLCB0cnVlKTtcblxuXHRcdFx0aWYgKCFvdmVybGF5KSB7XG5cdFx0XHRcdHRoaXMuY3JlYXRlKG9wdHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0cy5sb2NrZWQgJiYgdGhpcy5maXhlZCAmJiBvYmouZml4ZWQpIHtcblx0XHRcdFx0b2JqLmxvY2tlZCA9IHRoaXMub3ZlcmxheS5hcHBlbmQoIG9iai53cmFwICk7XG5cdFx0XHRcdG9iai5maXhlZCAgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdHMuc2hvd0Vhcmx5ID09PSB0cnVlKSB7XG5cdFx0XHRcdHRoaXMuYmVmb3JlU2hvdy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmVTaG93IDogZnVuY3Rpb24ob3B0cywgb2JqKSB7XG5cdFx0XHRpZiAob2JqLmxvY2tlZCAmJiAhdGhpcy5lbC5oYXNDbGFzcygnZmFuY3lib3gtbG9jaycpKSB7XG5cdFx0XHRcdGlmICh0aGlzLmZpeFBvc2l0aW9uICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdCQoJyo6bm90KG9iamVjdCknKS5maWx0ZXIoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiAoJCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcgJiYgISQodGhpcykuaGFzQ2xhc3MoXCJmYW5jeWJveC1vdmVybGF5XCIpICYmICEkKHRoaXMpLmhhc0NsYXNzKFwiZmFuY3lib3gtd3JhcFwiKSApO1xuXHRcdFx0XHRcdH0pLmFkZENsYXNzKCdmYW5jeWJveC1tYXJnaW4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuZWwuYWRkQ2xhc3MoJ2ZhbmN5Ym94LW1hcmdpbicpO1xuXG5cdFx0XHRcdHRoaXMuc2Nyb2xsViA9IFcuc2Nyb2xsVG9wKCk7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsSCA9IFcuc2Nyb2xsTGVmdCgpO1xuXG5cdFx0XHRcdHRoaXMuZWwuYWRkQ2xhc3MoJ2ZhbmN5Ym94LWxvY2snKTtcblxuXHRcdFx0XHRXLnNjcm9sbFRvcCggdGhpcy5zY3JvbGxWICkuc2Nyb2xsTGVmdCggdGhpcy5zY3JvbGxIICk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMub3BlbihvcHRzKTtcblx0XHR9LFxuXG5cdFx0b25VcGRhdGUgOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghdGhpcy5maXhlZCkge1xuXHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRhZnRlckNsb3NlOiBmdW5jdGlvbiAob3B0cykge1xuXHRcdFx0Ly8gUmVtb3ZlIG92ZXJsYXkgaWYgZXhpc3RzIGFuZCBmYW5jeUJveCBpcyBub3Qgb3BlbmluZ1xuXHRcdFx0Ly8gKGUuZy4sIGl0IGlzIG5vdCBiZWluZyBvcGVuIHVzaW5nIGFmdGVyQ2xvc2UgY2FsbGJhY2spXG5cdFx0XHRpZiAodGhpcy5vdmVybGF5ICYmICFGLmNvbWluZykge1xuXHRcdFx0XHR0aGlzLm92ZXJsYXkuZmFkZU91dChvcHRzLnNwZWVkT3V0LCAkLnByb3h5KCB0aGlzLmNsb3NlLCB0aGlzICkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKlxuXHQgKlx0VGl0bGUgaGVscGVyXG5cdCAqL1xuXG5cdEYuaGVscGVycy50aXRsZSA9IHtcblx0XHRkZWZhdWx0cyA6IHtcblx0XHRcdHR5cGUgICAgIDogJ2Zsb2F0JywgLy8gJ2Zsb2F0JywgJ2luc2lkZScsICdvdXRzaWRlJyBvciAnb3ZlcicsXG5cdFx0XHRwb3NpdGlvbiA6ICdib3R0b20nIC8vICd0b3AnIG9yICdib3R0b20nXG5cdFx0fSxcblxuXHRcdGJlZm9yZVNob3c6IGZ1bmN0aW9uIChvcHRzKSB7XG5cdFx0XHR2YXIgY3VycmVudCA9IEYuY3VycmVudCxcblx0XHRcdFx0dGV4dCAgICA9IGN1cnJlbnQudGl0bGUsXG5cdFx0XHRcdHR5cGUgICAgPSBvcHRzLnR5cGUsXG5cdFx0XHRcdHRpdGxlLFxuXHRcdFx0XHR0YXJnZXQ7XG5cblx0XHRcdGlmICgkLmlzRnVuY3Rpb24odGV4dCkpIHtcblx0XHRcdFx0dGV4dCA9IHRleHQuY2FsbChjdXJyZW50LmVsZW1lbnQsIGN1cnJlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWlzU3RyaW5nKHRleHQpIHx8ICQudHJpbSh0ZXh0KSA9PT0gJycpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aXRsZSA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC10aXRsZSBmYW5jeWJveC10aXRsZS0nICsgdHlwZSArICctd3JhcFwiPicgKyB0ZXh0ICsgJzwvZGl2PicpO1xuXG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0Y2FzZSAnaW5zaWRlJzpcblx0XHRcdFx0XHR0YXJnZXQgPSBGLnNraW47XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ291dHNpZGUnOlxuXHRcdFx0XHRcdHRhcmdldCA9IEYud3JhcDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnb3Zlcic6XG5cdFx0XHRcdFx0dGFyZ2V0ID0gRi5pbm5lcjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gJ2Zsb2F0J1xuXHRcdFx0XHRcdHRhcmdldCA9IEYuc2tpbjtcblxuXHRcdFx0XHRcdHRpdGxlLmFwcGVuZFRvKCdib2R5Jyk7XG5cblx0XHRcdFx0XHRpZiAoSUUpIHtcblx0XHRcdFx0XHRcdHRpdGxlLndpZHRoKCB0aXRsZS53aWR0aCgpICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGl0bGUud3JhcElubmVyKCc8c3BhbiBjbGFzcz1cImNoaWxkXCI+PC9zcGFuPicpO1xuXG5cdFx0XHRcdFx0Ly9JbmNyZWFzZSBib3R0b20gbWFyZ2luIHNvIHRoaXMgdGl0bGUgd2lsbCBhbHNvIGZpdCBpbnRvIHZpZXdwb3J0XG5cdFx0XHRcdFx0Ri5jdXJyZW50Lm1hcmdpblsyXSArPSBNYXRoLmFicyggZ2V0U2NhbGFyKHRpdGxlLmNzcygnbWFyZ2luLWJvdHRvbScpKSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0dGl0bGVbIChvcHRzLnBvc2l0aW9uID09PSAndG9wJyA/ICdwcmVwZW5kVG8nICA6ICdhcHBlbmRUbycpIF0odGFyZ2V0KTtcblx0XHR9XG5cdH07XG5cblx0Ly8galF1ZXJ5IHBsdWdpbiBpbml0aWFsaXphdGlvblxuXHQkLmZuLmZhbmN5Ym94ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0XHR2YXIgaW5kZXgsXG5cdFx0XHR0aGF0ICAgICA9ICQodGhpcyksXG5cdFx0XHRzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgfHwgJycsXG5cdFx0XHRydW4gICAgICA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0dmFyIHdoYXQgPSAkKHRoaXMpLmJsdXIoKSwgaWR4ID0gaW5kZXgsIHJlbFR5cGUsIHJlbFZhbDtcblxuXHRcdFx0XHRpZiAoIShlLmN0cmxLZXkgfHwgZS5hbHRLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkpICYmICF3aGF0LmlzKCcuZmFuY3lib3gtd3JhcCcpKSB7XG5cdFx0XHRcdFx0cmVsVHlwZSA9IG9wdGlvbnMuZ3JvdXBBdHRyIHx8ICdkYXRhLWZhbmN5Ym94LWdyb3VwJztcblx0XHRcdFx0XHRyZWxWYWwgID0gd2hhdC5hdHRyKHJlbFR5cGUpO1xuXG5cdFx0XHRcdFx0aWYgKCFyZWxWYWwpIHtcblx0XHRcdFx0XHRcdHJlbFR5cGUgPSAncmVsJztcblx0XHRcdFx0XHRcdHJlbFZhbCAgPSB3aGF0LmdldCgwKVsgcmVsVHlwZSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChyZWxWYWwgJiYgcmVsVmFsICE9PSAnJyAmJiByZWxWYWwgIT09ICdub2ZvbGxvdycpIHtcblx0XHRcdFx0XHRcdHdoYXQgPSBzZWxlY3Rvci5sZW5ndGggPyAkKHNlbGVjdG9yKSA6IHRoYXQ7XG5cdFx0XHRcdFx0XHR3aGF0ID0gd2hhdC5maWx0ZXIoJ1snICsgcmVsVHlwZSArICc9XCInICsgcmVsVmFsICsgJ1wiXScpO1xuXHRcdFx0XHRcdFx0aWR4ICA9IHdoYXQuaW5kZXgodGhpcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3B0aW9ucy5pbmRleCA9IGlkeDtcblxuXHRcdFx0XHRcdC8vIFN0b3AgYW4gZXZlbnQgZnJvbSBidWJibGluZyBpZiBldmVyeXRoaW5nIGlzIGZpbmVcblx0XHRcdFx0XHRpZiAoRi5vcGVuKHdoYXQsIG9wdGlvbnMpICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdGluZGV4ICAgPSBvcHRpb25zLmluZGV4IHx8IDA7XG5cblx0XHRpZiAoIXNlbGVjdG9yIHx8IG9wdGlvbnMubGl2ZSA9PT0gZmFsc2UpIHtcblx0XHRcdHRoYXQudW5iaW5kKCdjbGljay5mYi1zdGFydCcpLmJpbmQoJ2NsaWNrLmZiLXN0YXJ0JywgcnVuKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRELnVuZGVsZWdhdGUoc2VsZWN0b3IsICdjbGljay5mYi1zdGFydCcpLmRlbGVnYXRlKHNlbGVjdG9yICsgXCI6bm90KCcuZmFuY3lib3gtaXRlbSwgLmZhbmN5Ym94LW5hdicpXCIsICdjbGljay5mYi1zdGFydCcsIHJ1bik7XG5cdFx0fVxuXG5cdFx0dGhpcy5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94LXN0YXJ0PTFdJykudHJpZ2dlcignY2xpY2snKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8vIFRlc3RzIHRoYXQgbmVlZCBhIGJvZHkgYXQgZG9jIHJlYWR5XG5cdEQucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHcxLCB3MjtcblxuXHRcdGlmICggJC5zY3JvbGxiYXJXaWR0aCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Ly8gaHR0cDovL2JlbmFsbWFuLmNvbS9wcm9qZWN0cy9qcXVlcnktbWlzYy1wbHVnaW5zLyNzY3JvbGxiYXJ3aWR0aFxuXHRcdFx0JC5zY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gJCgnPGRpdiBzdHlsZT1cIndpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6YXV0b1wiPjxkaXYvPjwvZGl2PicpLmFwcGVuZFRvKCdib2R5JyksXG5cdFx0XHRcdFx0Y2hpbGQgID0gcGFyZW50LmNoaWxkcmVuKCksXG5cdFx0XHRcdFx0d2lkdGggID0gY2hpbGQuaW5uZXJXaWR0aCgpIC0gY2hpbGQuaGVpZ2h0KCA5OSApLmlubmVyV2lkdGgoKTtcblxuXHRcdFx0XHRwYXJlbnQucmVtb3ZlKCk7XG5cblx0XHRcdFx0cmV0dXJuIHdpZHRoO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoICQuc3VwcG9ydC5maXhlZFBvc2l0aW9uID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQkLnN1cHBvcnQuZml4ZWRQb3NpdGlvbiA9IChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gID0gJCgnPGRpdiBzdHlsZT1cInBvc2l0aW9uOmZpeGVkO3RvcDoyMHB4O1wiPjwvZGl2PicpLmFwcGVuZFRvKCdib2R5JyksXG5cdFx0XHRcdFx0Zml4ZWQgPSAoIGVsZW1bMF0ub2Zmc2V0VG9wID09PSAyMCB8fCBlbGVtWzBdLm9mZnNldFRvcCA9PT0gMTUgKTtcblxuXHRcdFx0XHRlbGVtLnJlbW92ZSgpO1xuXG5cdFx0XHRcdHJldHVybiBmaXhlZDtcblx0XHRcdH0oKSk7XG5cdFx0fVxuXG5cdFx0JC5leHRlbmQoRi5kZWZhdWx0cywge1xuXHRcdFx0c2Nyb2xsYmFyV2lkdGggOiAkLnNjcm9sbGJhcldpZHRoKCksXG5cdFx0XHRmaXhlZCAgOiAkLnN1cHBvcnQuZml4ZWRQb3NpdGlvbixcblx0XHRcdHBhcmVudCA6ICQoJ2JvZHknKVxuXHRcdH0pO1xuXG5cdFx0Ly9HZXQgcmVhbCB3aWR0aCBvZiBwYWdlIHNjcm9sbC1iYXJcblx0XHR3MSA9ICQod2luZG93KS53aWR0aCgpO1xuXG5cdFx0SC5hZGRDbGFzcygnZmFuY3lib3gtbG9jay10ZXN0Jyk7XG5cblx0XHR3MiA9ICQod2luZG93KS53aWR0aCgpO1xuXG5cdFx0SC5yZW1vdmVDbGFzcygnZmFuY3lib3gtbG9jay10ZXN0Jyk7XG5cblx0XHQkKFwiPHN0eWxlIHR5cGU9J3RleHQvY3NzJz4uZmFuY3lib3gtbWFyZ2lue21hcmdpbi1yaWdodDpcIiArICh3MiAtIHcxKSArIFwicHg7fTwvc3R5bGU+XCIpLmFwcGVuZFRvKFwiaGVhZFwiKTtcblx0fSk7XG5cbn0od2luZG93LCBkb2N1bWVudCwgalF1ZXJ5KSk7XG4iLCJjb25zdCB2YWxpZGF0ZUZpZWxkcyA9IChmb3JtLCBmaWVsZHNBcnJheSkgPT4ge1xyXG5cclxuICAgIGZpZWxkc0FycmF5LmZvckVhY2goKGZpZWxkKSA9PiB7XHJcbiAgICAgICAgZmllbGQucmVtb3ZlQ2xhc3MoXCJpbnB1dC1lcnJvclwiKTtcclxuICAgICAgICBpZiAoZmllbGQudmFsKCkudHJpbSgpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGZpZWxkLmFkZENsYXNzKFwiaW5wdXQtZXJyb3JcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7IFxyXG5cclxuICAgIGNvbnN0IGVycm9yRmllbGRzID0gZm9ybS5maW5kKFwiLmlucHV0LWVycm9yXCIpO1xyXG5cclxuICAgIHJldHVybiBlcnJvckZpZWxkcy5sZW5ndGggPT09IDA7XHJcbn1cclxuXHJcbiQoJy5mb3JtJykuc3VibWl0KChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgZm9ybSA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IG5hbWUgPSBmb3JtLmZpbmQoXCJbbmFtZT0nbmFtZSddXCIpO1xyXG4gICAgY29uc3QgcGhvbmUgPSBmb3JtLmZpbmQoXCJbbmFtZT0ncGhvbmUnXVwiKTtcclxuICAgIGNvbnN0IGNvbW1lbnQgPSBmb3JtLmZpbmQoXCJbbmFtZT0nY29tbWVudCddXCIpO1xyXG4gICAgY29uc3QgdG8gPSBmb3JtLmZpbmQoXCJbbmFtZT0ndG8nXVwiKTsgXHJcblxyXG4gICAgY29uc3QgbW9kYWwgPSAkKFwiI21vZGFsXCIpO1xyXG4gICAgY29uc3QgY29udGVudCA9IG1vZGFsLmZpbmQoXCIubW9kYWxfX2NvbnRlbnRcIik7XHJcblxyXG4gICAgbW9kYWwucmVtb3ZlQ2xhc3MoXCJlcnJvci1tb2RhbFwiKTtcclxuXHJcbiAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVGaWVsZHMoZm9ybSwgW25hbWUsIHBob25lLCBjb21tZW50LCB0b10pO1xyXG5cclxuICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9ICQuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDpcImh0dHBzOi8vd2ViZGV2LWFwaS5sb2Z0c2Nob29sLmNvbS9zZW5kbWFpbFwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgcGhvbmU6IHBob25lLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgY29tbWVudDogY29tbWVudC52YWwoKSxcclxuICAgICAgICAgICAgICAgIHRvOiB0by52YWwoKSxcclxuICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGVycm9yOiBkYXRhID0+IHsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pOyBcclxuXHJcbiAgICAgICAgcmVxdWVzdC5kb25lKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQudGV4dChkYXRhLm1lc3NhZ2UpOyBcclxuICAgICAgICAgICAgJChcIi5mb3JtXCIpWzBdLnJlc2V0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcXVlc3QuZmFpbChkYXRhID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEucmVzcG9uc2VKU09OLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIGNvbnRlbnQudGV4dChtZXNzYWdlKTtcclxuICAgICAgICAgICAgbW9kYWwuYWRkQ2xhc3MoXCJlcnJvci1tb2RhbFwiKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5hbHdheXMoKCkgPT4ge1xyXG4gICAgICAgICAgICAkLmZhbmN5Ym94Lm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgc3JjOiBcIiNtb2RhbFwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbmxpbmVcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH0gICAgICAgIFxyXG59KTtcclxuXHJcbiQoXCIuYXBwLXN1Ym1pdC1idG5cIikuY2xpY2soZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0ICgpO1xyXG5cclxuICAgICQuZmFuY3lib3guY2xvc2UoKTtcclxufSlcclxuIiwibGV0IGJ1cmdlciAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGFtYnVyZ2VyJyk7XHJcbmxldCBvdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm92ZXJsYXknKTtcclxubGV0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcbmxldCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LW1vYmlsZV9fbGluaycpO1xyXG5cclxubGlua3MuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTWVudSk7XHJcbn0pXHJcblxyXG5mdW5jdGlvbiB0b2dnbGVNZW51KCkge1xyXG4gICAgYnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoJ2hhbWJ1cmdlci0tYWN0aXZlJyk7XHJcbiAgICBvdmVybGF5LmNsYXNzTGlzdC50b2dnbGUoJ292ZXJsYXktLWFjdGl2ZScpO1xyXG4gICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5LS1hY3RpdmUtbWVudScpO1xyXG59IFxyXG5cclxuYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTWVudSk7IiwiY29uc3QgbWVzdXJlV2lkdGggPSAoaXRlbSkgPT4ge1xyXG4gICAgbGV0IHJlcUl0ZW1XaWR0aCA9IDA7XHJcblxyXG4gICAgY29uc3Qgc2NyZWVuV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGl0ZW0uY2xvc2VzdChcIi5wcm9kdWN0cy1tZW51XCIpO1xyXG4gICAgY29uc3QgdGl0bGVzQmxvY2tzID0gY29udGFpbmVyLmZpbmQoXCIucHJvZHVjdHMtbWVudV9fdGl0bGVcIik7XHJcbiAgICBjb25zdCB0aXRsZXNXaWR0aCA9IHRpdGxlc0Jsb2Nrcy53aWR0aCgpICogdGl0bGVzQmxvY2tzLmxlbmd0aDtcclxuXHJcbiAgICBjb25zdCB0ZXh0Q29udGFpbmVyID0gaXRlbS5maW5kKFwiLnByb2R1Y3RzLW1lbnVfX2NvbnRhaW5lclwiKTtcclxuICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQodGV4dENvbnRhaW5lci5jc3MoXCJwYWRkaW5nLWxlZnRcIikpO1xyXG4gICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQodGV4dENvbnRhaW5lci5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpKTtcclxuXHJcbiAgICBjb25zdCBpc01vYmlsZSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogNzY4cHgpXCIpLm1hdGNoZXM7XHJcblxyXG4gICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgICAgcmVxSXRlbVdpZHRoID0gc2NyZWVuV2lkdGggLSB0aXRsZXNXaWR0aDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVxSXRlbVdpZHRoID0gNTAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29udGFpbmVyOiByZXFJdGVtV2lkdGgsXHJcbiAgICAgICAgdGV4dENvbnRhaW5lcjogcmVxSXRlbVdpZHRoIC0gcGFkZGluZ1JpZ2h0IC0gcGFkZGluZ0xlZnRcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IGNsb3NlRXZlcnlJdGVtSW5Db250YWluZXIgPSAoY29udGFpbmVyKSA9PiB7XHJcbiAgICBjb25zdCBpdGVtcyA9IGNvbnRhaW5lci5maW5kKFwiLnByb2R1Y3RzLW1lbnVfX2l0ZW1cIik7XHJcbiAgICBjb25zdCBjb250ZW50ID0gY29udGFpbmVyLmZpbmQoXCIucHJvZHVjdHMtbWVudV9fY29udGVudFwiKTtcclxuXHJcbiAgICBpdGVtcy5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgIGNvbnRlbnQud2lkdGgoMCk7XHJcbn07XHJcblxyXG5jb25zdCBvcGVuSXRlbU5ldSA9IChpdGVtKSA9PiB7XHJcbiAgICBjb25zdCBoaWRkZW5Db250ZW50ID0gaXRlbS5maW5kKFwiLnByb2R1Y3RzLW1lbnVfX2NvbnRlbnRcIik7XHJcbiAgICBjb25zdCByZXFXaWR0aCA9IG1lc3VyZVdpZHRoKGl0ZW0pO1xyXG4gICAgY29uc3QgdGV4dEJsb2NrID0gaXRlbS5maW5kKFwiLnByb2R1Y3RzLW1lbnVfX2NvbnRhaW5lclwiKTtcclxuXHJcbiAgICBpdGVtLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgaGlkZGVuQ29udGVudC53aWR0aChyZXFXaWR0aC5jb250YWluZXIpO1xyXG4gICAgdGV4dEJsb2NrLndpZHRoKHJlcVdpZHRoLnRleHRDb250YWluZXIpO1xyXG59O1xyXG5cclxuJChcIi5wcm9kdWN0cy1tZW51X190aXRsZVwiKS5vbihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICBjb25zdCBpdGVtID0gJHRoaXMuY2xvc2VzdChcIi5wcm9kdWN0cy1tZW51X19pdGVtXCIpO1xyXG4gICAgY29uc3QgaXRlbU9wZW5lZCA9IGl0ZW0uaGFzQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSAkdGhpcy5jbG9zZXN0KFwiLnByb2R1Y3RzLW1lbnVcIik7XHJcblxyXG4gICAgaWYgKGl0ZW1PcGVuZWQpIHtcclxuICAgICAgICBjbG9zZUV2ZXJ5SXRlbUluQ29udGFpbmVyKGNvbnRhaW5lcilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2xvc2VFdmVyeUl0ZW1JbkNvbnRhaW5lcihjb250YWluZXIpXHJcbiAgICAgICAgb3Blbkl0ZW1OZXUoaXRlbSk7XHJcbiAgICB9ICAgIFxyXG59KTsgXHJcblxyXG4kKFwiLnByb2R1Y3RzLW1lbnVfX2Nsb3NlXCIpLm9uKFwiY2xpY2tcIiwgZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY2xvc2VFdmVyeUl0ZW1JbkNvbnRhaW5lcigkKCcucHJvZHVjdHMtbWVudScpKTtcclxufSk7XHJcbiIsImxldCBteU1hcDtcclxuY29uc3QgaW5pdCA9ICgpID0+IHtcclxuIG15TWFwID0gbmV3IHltYXBzLk1hcChcIm1hcFwiLCB7XHJcbiAgIGNlbnRlcjogWzU5LjkzOTE2OTk4NjkyMTc0LCAzMC4zMDkwMTUwOTY3MzI2MjJdLFxyXG4gICB6b29tOiAxMSxcclxuICAgY29udHJvbHM6IFtdLFxyXG4gfSk7XHJcbiBcclxuIGxldCBjb29yZHMgPSBbXHJcbiAgICAgWzU5Ljk0NTU0MzI3OTg5Mjg3LCAzMC4zODkzNTI2MjExNDY2OF0sXHJcbiAgICAgWzU5LjkxMTQyMzIzNTYzOTA5LCAzMC41MDAyNDU4NzA2NTg0MV0sXHJcbiAgICAgWzU5Ljg4NjkzMTYxNzg0NjA2LCAzMC4zMTk2NTgxMDIxMDM3MTNdLFxyXG4gICAgIFs1OS45NzAzMzU3NDgyMTY3MiwgMzAuMzE1MTk0OTA2MzAyOTI0XSxcclxuICAgXSxcclxuICAgbXlDb2xsZWN0aW9uID0gbmV3IHltYXBzLkdlb09iamVjdENvbGxlY3Rpb24oe30sIHtcclxuICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgIGljb25MYXlvdXQ6ICdkZWZhdWx0I2ltYWdlJyxcclxuICAgICBpY29uSW1hZ2VIcmVmOiAnLi9pbWcvaWNvbnMvbWFya2VyLnN2ZycsXHJcbiAgICAgaWNvbkltYWdlU2l6ZTogWzQ2LCA1N10sXHJcbiAgICAgaWNvbkltYWdlT2Zmc2V0OiBbLTM1LCAtNTJdXHJcbiAgIH0pO1xyXG4gXHJcbiBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICBteUNvbGxlY3Rpb24uYWRkKG5ldyB5bWFwcy5QbGFjZW1hcmsoY29vcmRzW2ldKSk7XHJcbiB9XHJcbiBcclxuIG15TWFwLmdlb09iamVjdHMuYWRkKG15Q29sbGVjdGlvbik7XHJcbiBcclxuIG15TWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XHJcbn07XHJcbiBcclxueW1hcHMucmVhZHkoaW5pdCk7XHJcbiIsImxldCBwbGF5ZXI7XHJcbmNvbnN0IHBsYXllckNvbnRhaW5lciA9ICQoXCIucGxheWVyXCIpO1xyXG4gXHJcbmxldCBldmVudHNJbml0ID0gKCkgPT4ge1xyXG4gJChcIi5wbGF5ZXJfX3N0YXJ0XCIpLmNsaWNrKGUgPT4ge1xyXG4gICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiBcclxuICAgaWYgKHBsYXllckNvbnRhaW5lci5oYXNDbGFzcyhcInBhdXNlZFwiKSkge1xyXG4gICAgIHBsYXllci5wYXVzZVZpZGVvKCk7XHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgcGxheWVyLnBsYXlWaWRlbygpO1xyXG4gICB9XHJcbiB9KTtcclxuIFxyXG4gJChcIi5wbGF5ZXJfX3BsYXliYWNrXCIpLmNsaWNrKGUgPT4ge1xyXG4gICBjb25zdCBiYXIgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgIGNvbnN0IGNsaWNrZWRQb3NpdGlvbiA9IGUub3JpZ2luYWxFdmVudC5sYXllclg7XHJcbiAgIGNvbnN0IG5ld0J1dHRvblBvc2l0aW9uUGVyY2VudCA9IChjbGlja2VkUG9zaXRpb24gLyBiYXIud2lkdGgoKSkgKiAxMDA7XHJcbiAgIGNvbnN0IG5ld1BsYXliYWNrUG9zaXRpb25TZWMgPVxyXG4gICAgIChwbGF5ZXIuZ2V0RHVyYXRpb24oKSAvIDEwMCkgKiBuZXdCdXR0b25Qb3NpdGlvblBlcmNlbnQ7XHJcbiBcclxuICAgJChcIi5wbGF5ZXJfX3BsYXliYWNrLWJ1dHRvblwiKS5jc3Moe1xyXG4gICAgIGxlZnQ6IGAke25ld0J1dHRvblBvc2l0aW9uUGVyY2VudH0lYFxyXG4gICB9KTtcclxuIFxyXG4gICBwbGF5ZXIuc2Vla1RvKG5ld1BsYXliYWNrUG9zaXRpb25TZWMpO1xyXG4gfSk7XHJcbiBcclxuICQoXCIucGxheWVyX19zcGxhc2hcIikuY2xpY2soZSA9PiB7XHJcbiAgIHBsYXllci5wbGF5VmlkZW8oKTtcclxuIH0pXHJcbn07XHJcbiBcclxuY29uc3QgZm9ybWF0VGltZSA9IHRpbWVTZWMgPT4ge1xyXG4gY29uc3Qgcm91bmRUaW1lID0gTWF0aC5yb3VuZCh0aW1lU2VjKTtcclxuIFxyXG4gY29uc3QgbWludXRlcyA9IGFkZFplcm8oTWF0aC5mbG9vcihyb3VuZFRpbWUgLyA2MCkpO1xyXG4gY29uc3Qgc2Vjb25kcyA9IGFkZFplcm8ocm91bmRUaW1lIC0gbWludXRlcyAqIDYwKTtcclxuIFxyXG4gZnVuY3Rpb24gYWRkWmVybyhudW0pIHtcclxuICAgcmV0dXJuIG51bSA8IDEwID8gYDAke251bX1gIDogbnVtO1xyXG4gfVxyXG4gXHJcbiByZXR1cm4gYCR7bWludXRlc30gOiAke3NlY29uZHN9YDtcclxufTtcclxuIFxyXG5jb25zdCBvblBsYXllclJlYWR5ID0gKCkgPT4ge1xyXG4gbGV0IGludGVydmFsO1xyXG4gY29uc3QgZHVyYXRpb25TZWMgPSBwbGF5ZXIuZ2V0RHVyYXRpb24oKTtcclxuIFxyXG4gJChcIi5wbGF5ZXJfX2R1cmF0aW9uLWVzdGltYXRlXCIpLnRleHQoZm9ybWF0VGltZShkdXJhdGlvblNlYykpO1xyXG4gXHJcbiBpZiAodHlwZW9mIGludGVydmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gfVxyXG4gXHJcbiBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgY29uc3QgY29tcGxldGVkU2VjID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XHJcbiAgIGNvbnN0IGNvbXBsZXRlZFBlcmNlbnQgPSAoY29tcGxldGVkU2VjIC8gZHVyYXRpb25TZWMpICogMTAwO1xyXG4gXHJcbiAgICQoXCIucGxheWVyX19wbGF5YmFjay1idXR0b25cIikuY3NzKHtcclxuICAgICBsZWZ0OiBgJHtjb21wbGV0ZWRQZXJjZW50fSVgXHJcbiAgIH0pO1xyXG4gXHJcbiAgICQoXCIucGxheWVyX19kdXJhdGlvbi1jb21wbGV0ZWRcIikudGV4dChmb3JtYXRUaW1lKGNvbXBsZXRlZFNlYykpO1xyXG4gfSwgMTAwMCk7XHJcbn07XHJcbiBcclxuY29uc3Qgb25QbGF5ZXJTdGF0ZUNoYW5nZSA9IGV2ZW50ID0+IHtcclxuIC8qXHJcbiAgIC0xICjQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUg0LLQuNC00LXQviDQvdC1INC90LDRh9Cw0YLQvilcclxuICAgMCAo0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1INCy0LjQtNC10L4g0LfQsNCy0LXRgNGI0LXQvdC+KVxyXG4gICAxICjQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40LUpXHJcbiAgIDIgKNC/0LDRg9C30LApXHJcbiAgIDMgKNCx0YPRhNC10YDQuNC30LDRhtC40Y8pXHJcbiAgIDUgKNCy0LjQtNC10L4g0L/QvtC00LDRjtGCINGA0LXQv9C70LjQutC4KS5cclxuICovXHJcbiBzd2l0Y2ggKGV2ZW50LmRhdGEpIHtcclxuICAgY2FzZSAxOlxyXG4gICAgIHBsYXllckNvbnRhaW5lci5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICBwbGF5ZXJDb250YWluZXIuYWRkQ2xhc3MoXCJwYXVzZWRcIik7XHJcbiAgICAgYnJlYWs7XHJcbiBcclxuICAgY2FzZSAyOlxyXG4gICAgIHBsYXllckNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICBwbGF5ZXJDb250YWluZXIucmVtb3ZlQ2xhc3MoXCJwYXVzZWRcIik7XHJcbiAgICAgYnJlYWs7XHJcbiB9XHJcbn07XHJcbiBcclxuZnVuY3Rpb24gb25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkoKSB7XHJcbiBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKFwieXQtcGxheWVyXCIsIHtcclxuICAgaGVpZ2h0OiBcIjQwNVwiLFxyXG4gICB3aWR0aDogXCI2NjBcIixcclxuICAgdmlkZW9JZDogXCJnZC1QOUZIMldRNFwiLFxyXG4gICBldmVudHM6IHtcclxuICAgICBvblJlYWR5OiBvblBsYXllclJlYWR5LFxyXG4gICAgIG9uU3RhdGVDaGFuZ2U6IG9uUGxheWVyU3RhdGVDaGFuZ2VcclxuICAgfSxcclxuICAgcGxheWVyVmFyczoge1xyXG4gICAgIGNvbnRyb2xzOiAwLFxyXG4gICAgIGRpc2FibGVrYjogMCxcclxuICAgICBzaG93aW5mbzogMCxcclxuICAgICByZWw6IDAsXHJcbiAgICAgYXV0b3BsYXk6IDAsXHJcbiAgICAgbW9kZXN0YnJhbmRpbmc6IDBcclxuICAgfVxyXG4gfSk7XHJcbn1cclxuIFxyXG5ldmVudHNJbml0KCk7XHJcbiIsImNsYXNzIFNsaWRlU2hvdyB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgY29uZmlnID0ge30pIHtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy50YXJnZXQucXVlcnlTZWxlY3RvcignW2RhdGEtc2hvdy1jb250ZW50XScpXHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IEFycmF5LmZyb20odGhpcy5jb250ZW50LmNoaWxkcmVuKVxyXG4gICAgICAgIHRoaXMubmF2ID0gdGhpcy50YXJnZXQucXVlcnlTZWxlY3RvcignW2RhdGEtc2hvdy1uYXZdJykgXHJcblxyXG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb25JdGVtcygpXHJcbiAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oY29uZmlnLmFuaW1hdGUpXHJcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVTbGlkZShjb25maWcuYWN0aXZlKSAgXHJcblxyXG4gICAgICAgIHRoaXMubmF2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROYXYgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnW2RhdGEtc2hvdy1saW5rXScpXHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudE5hdikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVTbGlkZShwYXJzZUludChjdXJyZW50TmF2LmRhdGFzZXQuc2hvd0xpbmspKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzZXRBbmltYXRpb24oY29uZmlnID0ge30pIHtcclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaXRlbS5zdHlsZS50cmFuc2l0aW9uID0gYG9wYWNpdHkgJHtjb25maWcudGltZSB8fCAxfXMgJHtjb25maWcubW9kZSB8fCAnZWFzZSd9YFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc2V0UG9zaXRpb25JdGVtcygpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnXHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXHJcbiAgICAgICAgICAgIGl0ZW0uc3R5bGUudG9wID0gMFxyXG4gICAgICAgICAgICBpdGVtLnN0eWxlLm9wYWNpdHkgPSAwXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZVNsaWRlKGluZGV4ID0gMSkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IGkgKyAxKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJ1xyXG4gICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5vcGFjaXR5ID0gMVxyXG4gICAgICAgICAgICAgICAgaXRlbS5zdHlsZS56SW5kZXggPSAyMFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcclxuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUub3BhY2l0eSA9IDBcclxuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuekluZGV4ID0gMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkgXHJcblxyXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlTmF2KGluZGV4KVxyXG4gICAgfSBcclxuXHJcbiAgICBzZXRBY3RpdmVOYXYoaW5kZXgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IG5hdiBvZiB0aGlzLm5hdi5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAobmF2ID09PSB0aGlzLm5hdi5jaGlsZHJlbltpbmRleCAtIDFdKSB7XHJcbiAgICAgICAgICAgICAgICBuYXYuY2xhc3NMaXN0LmFkZChgJHtuYXYuY2xhc3NMaXN0WzBdfS0tYWN0aXZlYClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5hdi5jbGFzc0xpc3QucmVtb3ZlKGAke25hdi5jbGFzc0xpc3RbMF19LS1hY3RpdmVgKVxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICB9XHJcbiAgICB9ICAgXHJcblxyXG59XHJcblxyXG5jb25zdCBzbGlkZSA9IG5ldyBTbGlkZVNob3coJy5zbGlkZS1zaG93Jywge1xyXG4gICAgYWN0aXZlOiAxLFxyXG4gICAgYW5pbWF0ZToge1xyXG4gICAgICAgIHRpbWU6IDIsXHJcbiAgICAgICAgbW9kZTogJ2Vhc2UtaW4nXHJcbiAgICB9XHJcbn0pXHJcbiAgXHJcbi8vY29uc29sZS5sb2coc2xpZGUpXHJcblxyXG4vKiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIHNsaWRlLnNldEFjdGl2ZVNsaWRlKDMpXHJcbn0sIDMwMDApICovXHJcbiIsImNvbnN0IHNlY3Rpb25zID0gJChcInNlY3Rpb25cIik7XHJcbmNvbnN0IGRpc3BsYXkgPSAkKFwiLm1haW5jb250ZW50XCIpO1xyXG5jb25zdCBzaWRlTWVudSA9ICQoXCIuZml4ZWQtbWVudVwiKTtcclxuY29uc3QgbWVudUl0ZW1zID0gc2lkZU1lbnUuZmluZChcIi5maXhlZC1tZW51X19pdGVtXCIpO1xyXG5cclxuY29uc3QgbW9iaWxlRGV0ZWN0ID0gbmV3IE1vYmlsZURldGVjdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbmNvbnN0IGlzTW9iaWxlID0gbW9iaWxlRGV0ZWN0Lm1vYmlsZSgpO1xyXG5cclxubGV0IGluU2Nyb2xsID0gZmFsc2U7XHJcblxyXG5zZWN0aW9ucy5maXJzdCgpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuY29uc3QgY291bnRTZWN0aW9uUG9zaXRpb24gPSBzZWN0aW9uRXEgPT4ge1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSBzZWN0aW9uRXEgKiAtMTAwO1xyXG5cclxuICAgIGlmIChpc05hTihwb3NpdGlvbikpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi0L/QtdGA0LXQtNCw0L3QviDQvdC1INCy0YDQvdC+0LUg0LfQvdCw0YfQtdC90LjQtSDQsiBjb3VudFNlY3Rpb25Qb3NpdGlvblwiKTtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgfTtcclxuXHJcbmNvbnN0IGNoYW5nZU1lbnVUaGVtZUZvclNlY3Rpb24gPSAoc2VjdGlvbkVxKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50U2VjdGlvbiA9IHNlY3Rpb25zLmVxKHNlY3Rpb25FcSk7XHJcbiAgICBjb25zdCBtZW51VGhlbWUgPSBjdXJyZW50U2VjdGlvbi5hdHRyKFwiZGF0YS1zaWRlbWVudS10aGVtZVwiKTtcclxuICAgIGNvbnN0IGFjdGl2ZUNsYXNzID0gXCJmaXhlZC1tZW51LS1zaGFkb3dlZFwiO1xyXG5cclxuICAgIGlmIChtZW51VGhlbWUgPT09IFwiYmxhY2tcIikge1xyXG4gICAgICAgIHNpZGVNZW51LmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2lkZU1lbnUucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc3QgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0gPSAoaXRlbXMsIGl0ZW1FcSwgYWN0aXZlQ2xhc3MpID0+IHtcclxuICAgIGl0ZW1zLmVxKGl0ZW1FcSkuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xyXG59O1xyXG5cclxuY29uc3QgcGVyZm9tVHJhbnNpdGlvbiA9IChzZWN0aW9uRXEpID0+IHtcclxuICAgIGlmIChpblNjcm9sbCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRyYW5zaXRpb25PdmVyID0gMTAwMDtcclxuICAgIGNvbnN0IG1vdXNlSW5lcnRpb25PdmVyID0gMzAwO1xyXG5cclxuICAgIGluU2Nyb2xsID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGNvdW50U2VjdGlvblBvc2l0aW9uKHNlY3Rpb25FcSk7XHJcblxyXG4gICAgY2hhbmdlTWVudVRoZW1lRm9yU2VjdGlvbihzZWN0aW9uRXEpO1xyXG5cclxuICAgIGRpc3BsYXkuY3NzKHtcclxuICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgke3Bvc2l0aW9ufSUpYCxcclxuICAgIH0pO1xyXG5cclxuICAgIHJlc2V0QWN0aXZlQ2xhc3NGb3JJdGVtKHNlY3Rpb25zLCBzZWN0aW9uRXEsIFwiYWN0aXZlXCIpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGluU2Nyb2xsID0gZmFsc2U7ICBcclxuICAgICAgICByZXNldEFjdGl2ZUNsYXNzRm9ySXRlbShtZW51SXRlbXMsIHNlY3Rpb25FcSwgXCJmaXhlZC1tZW51X19pdGVtLS1hY3RpdmVcIik7ICBcclxuICAgICAgfSwgdHJhbnNpdGlvbk92ZXIgKyBtb3VzZUluZXJ0aW9uT3Zlcik7XHJcbiAgICB9O1xyXG5cclxuY29uc3Qgdmlld3BvcnRTY3JvbGxlciA9ICgpID0+IHtcclxuICAgIGNvbnN0IGFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9ucy5maWx0ZXIoXCIuYWN0aXZlXCIpO1xyXG4gICAgY29uc3QgbmV4dFNlY3Rpb24gPSBhY3RpdmVTZWN0aW9uLm5leHQoKTtcclxuICAgIGNvbnN0IHByZXZTZWN0aW9uID0gYWN0aXZlU2VjdGlvbi5wcmV2KCk7IFxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICBpZiAobmV4dFNlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHBlcmZvbVRyYW5zaXRpb24obmV4dFNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcmV2KCkge1xyXG4gICAgICAgICAgaWYgKHByZXZTZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBwZXJmb21UcmFuc2l0aW9uKHByZXZTZWN0aW9uLmluZGV4KCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuJCh3aW5kb3cpLm9uKFwid2hlZWxcIiwgZSA9PiB7XHJcbiAgICBjb25zdCBkZWx0YVkgPSBlLm9yaWdpbmFsRXZlbnQuZGVsdGFZO1xyXG4gICAgY29uc3Qgc2Nyb2xsZXIgPSB2aWV3cG9ydFNjcm9sbGVyKCk7XHJcbiAgICBcclxuICAgIGlmIChkZWx0YVkgPiAwKSB7XHJcbiAgICAgICAgc2Nyb2xsZXIubmV4dCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoZGVsdGFZIDwgMCkge1xyXG4gICAgICAgIHNjcm9sbGVyLnByZXYoKTtcclxuICAgIH1cclxufSk7XHJcblxyXG4kKHdpbmRvdykub24oXCJrZXlkb3duXCIsIChlKSA9PiB7XHJcbiAgICBjb25zdCB0YWdOYW1lID0gZS50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgY29uc3QgdXNlclR5cGluZ0luSW5wdXRzID0gdGFnTmFtZSA9PT0gXCJpbnB1dFwiIHx8IHRhZ05hbWUgPT09IFwidGV4dGFyZWFcIjtcclxuICAgIGNvbnN0IHNjcm9sbGVyID0gdmlld3BvcnRTY3JvbGxlcigpO1xyXG5cclxuICAgIGlmICh1c2VyVHlwaW5nSW5JbnB1dHMpIHJldHVybjtcclxuXHJcbiAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICAgIGNhc2UgMzg6IFxyXG4gICAgICAgICAgICBzY3JvbGxlci5wcmV2KCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gIFxyXG4gICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgIHNjcm9sbGVyLm5leHQoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuJChcIi53cmFwcGVyXCIpLm9uKFwidG91Y2htb3ZlXCIsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcclxuXHJcbiQoXCJbZGF0YS1zY3JvbGwtdG9dXCIpLmNsaWNrKChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgY29uc3QgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XHJcbiAgICBjb25zdCB0YXJnZXQgPSAkdGhpcy5hdHRyKFwiZGF0YS1zY3JvbGwtdG9cIik7XHJcbiAgICBjb25zdCByZXFTZWN0aW9uID0gJChgW2RhdGEtc2VjdGlvbi1pZD0ke3RhcmdldH1dYCk7XHJcbiAgICBcclxuICAgIHBlcmZvbVRyYW5zaXRpb24ocmVxU2VjdGlvbi5pbmRleCgpKTtcclxuXHJcbn0pO1xyXG5cclxuLy9odHRwczovL2dpdGh1Yi5jb20vbWF0dGJyeXNvbi9Ub3VjaFN3aXBlLUpxdWVyeS1QbHVnaW5cclxuaWYgKGlzTW9iaWxlKSB7ICBcclxuICAgICQoXCJib2R5XCIpLnN3aXBlKHtcclxuICAgICAgc3dpcGU6IGZ1bmN0aW9uIChldmVudCwgZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICBjb25zdCBzY3JvbGxlciA9IHZpZXdwb3J0U2Nyb2xsZXIoKTtcclxuICAgICAgICAgIGxldCBzY3JvbGxEaXJlY3Rpb24gPSBcIlwiO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInVwXCIpIHNjcm9sbERpcmVjdGlvbiA9IFwibmV4dFwiO1xyXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJkb3duXCIpIHNjcm9sbERpcmVjdGlvbiA9IFwicHJldlwiO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBzY3JvbGxlcltzY3JvbGxEaXJlY3Rpb25dKCk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxufSIsImNvbnN0IHNsaWRlciA9ICQoJy5wcm9kdWN0cycpLmJ4U2xpZGVyKHtcclxuICAgIHBhZ2VyOiBmYWxzZSxcclxuICAgIGNvbnRyb2xzOiBmYWxzZSxcclxuICAgIHNwZWVkOiA4MDBcclxufSk7XHJcblxyXG4kKCcucHJvZHVjdC1zbGlkZXJfX2Fycm93LS1kaXJlY3Rpb24tLXByZXYnKS5jbGljayhlID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNsaWRlci5nb1RvUHJldlNsaWRlKCk7XHJcbn0pXHJcblxyXG4kKCcucHJvZHVjdC1zbGlkZXJfX2Fycm93LS1kaXJlY3Rpb24tLW5leHQnKS5jbGljayhlID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNsaWRlci5nb1RvTmV4dFNsaWRlKCk7XHJcbn0pXHJcbiIsImNvbnN0IG9wZW5JdGVtID0gaXRlbSA9PiB7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSBpdGVtLmNsb3Nlc3QoXCIudGVhbV9faXRlbVwiKTtcclxuICAgIGNvbnN0IGNvbnRlbnRCbG9jayA9IGNvbnRhaW5lci5maW5kKFwiLnRlYW1fX2NvbnRlbnRcIik7XHJcbiAgICBjb25zdCB0ZXh0QmxvY2sgPSBjb250ZW50QmxvY2suZmluZChcIi50ZWFtX19jb250ZW50LWJsb2NrXCIpO1xyXG4gICAgY29uc3QgcmVxSGVpZ2h0ID0gdGV4dEJsb2NrLmhlaWdodCgpO1xyXG5cclxuICAgIGNvbnRhaW5lci5hZGRDbGFzcyhcImFjdGl2ZS10ZWFtXCIpO1xyXG4gICAgY29udGVudEJsb2NrLmhlaWdodChyZXFIZWlnaHQpO1xyXG59XHJcblxyXG5jb25zdCBjbG9zZUV2ZXJ5SXRlbSA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICBjb25zdCBpdGVtcyA9IGNvbnRhaW5lci5maW5kKCcudGVhbV9fY29udGVudCcpO1xyXG4gICAgY29uc3QgaXRlbUNvbnRhaW5lciA9IGNvbnRhaW5lci5maW5kKFwiLnRlYW1fX2l0ZW1cIik7XHJcblxyXG4gICAgaXRlbUNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImFjdGl2ZS10ZWFtXCIpO1xyXG4gICAgaXRlbXMuaGVpZ2h0KDApO1xyXG59XHJcblxyXG4kKCcudGVhbV9fdGl0bGUnKS5jbGljayhlID0+IHtcclxuICAgIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gJHRoaXMuY2xvc2VzdCgnLnRlYW0nKTtcclxuICAgIGNvbnN0IGVsZW1Db250YWluZXIgPSAkdGhpcy5jbG9zZXN0KFwiLnRlYW1fX2l0ZW1cIik7XHJcblxyXG4gICAgaWYgKGVsZW1Db250YWluZXIuaGFzQ2xhc3MoXCJhY3RpdmUtdGVhbVwiKSkge1xyXG4gICAgICAgIGNsb3NlRXZlcnlJdGVtKGNvbnRhaW5lcik7XHJcbiAgICB9ICAgZWxzZSB7XHJcbiAgICAgICAgY2xvc2VFdmVyeUl0ZW0oY29udGFpbmVyKTtcclxuICAgICAgICBvcGVuSXRlbSgkdGhpcyk7XHJcbiAgICB9XHJcblxyXG59KTsiXX0=
